
LW2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080031cc  080031cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031cc  080031cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  20000010  080031e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  080031e4  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef6c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271e  00000000  00000000  0002efef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00031710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb7  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000241f  00000000  00000000  00033457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010de9  00000000  00000000  00035876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc4b3  00000000  00000000  0004665f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b4  00000000  00000000  00142b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00146fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003154 	.word	0x08003154

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08003154 	.word	0x08003154

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9e2 	bl	80005ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f82d 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f877 	bl	8000320 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <main+0x58>)
 8000234:	f107 0414 	add.w	r4, r7, #20
 8000238:	461d      	mov	r5, r3
 800023a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023e:	682b      	ldr	r3, [r5, #0]
 8000240:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fdea 	bl	8001e22 <osThreadCreate>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0a      	ldr	r2, [pc, #40]	; (800027c <main+0x5c>)
 8000252:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x60>)
 8000256:	463c      	mov	r4, r7
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000262:	463b      	mov	r3, r7
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fddb 	bl	8001e22 <osThreadCreate>
 800026c:	4603      	mov	r3, r0
 800026e:	4a05      	ldr	r2, [pc, #20]	; (8000284 <main+0x64>)
 8000270:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000272:	f001 fdcf 	bl	8001e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000276:	e7fe      	b.n	8000276 <main+0x56>
 8000278:	08003178 	.word	0x08003178
 800027c:	2000002c 	.word	0x2000002c
 8000280:	08003198 	.word	0x08003198
 8000284:	20000030 	.word	0x20000030

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b094      	sub	sp, #80	; 0x50
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2238      	movs	r2, #56	; 0x38
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 ff30 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fc50 	bl	8000b50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	2340      	movs	r3, #64	; 0x40
 80002bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002c6:	2304      	movs	r3, #4
 80002c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002ca:	2355      	movs	r3, #85	; 0x55
 80002cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fcea 	bl	8000cb8 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ea:	f000 f88a 	bl	8000402 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2303      	movs	r3, #3
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2104      	movs	r1, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f000 ffe8 	bl	80012dc <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000312:	f000 f876 	bl	8000402 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3750      	adds	r7, #80	; 0x50
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_GPIO_Init+0x58>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <MX_GPIO_Init+0x58>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MX_GPIO_Init+0x58>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	210c      	movs	r1, #12
 8000350:	480a      	ldr	r0, [pc, #40]	; (800037c <MX_GPIO_Init+0x5c>)
 8000352:	f000 fbe5 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000356:	230c      	movs	r3, #12
 8000358:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000362:	2303      	movs	r3, #3
 8000364:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x5c>)
 800036c:	f000 fa56 	bl	800081c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	48001000 	.word	0x48001000

08000380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2104      	movs	r1, #4
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <StartDefaultTask+0x30>)
 800038e:	f000 fbc7 	bl	8000b20 <HAL_GPIO_WritePin>
    osDelay(500);
 8000392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000396:	f001 fd6b 	bl	8001e70 <osDelay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2104      	movs	r1, #4
 800039e:	4804      	ldr	r0, [pc, #16]	; (80003b0 <StartDefaultTask+0x30>)
 80003a0:	f000 fbbe 	bl	8000b20 <HAL_GPIO_WritePin>
    osDelay(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a8:	f001 fd62 	bl	8001e70 <osDelay>
  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80003ac:	e7ec      	b.n	8000388 <StartDefaultTask+0x8>
 80003ae:	bf00      	nop
 80003b0:	48001000 	.word	0x48001000

080003b4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <StartTask02+0x2c>)
 80003c2:	f000 fbad 	bl	8000b20 <HAL_GPIO_WritePin>
    osDelay(250);
 80003c6:	20fa      	movs	r0, #250	; 0xfa
 80003c8:	f001 fd52 	bl	8001e70 <osDelay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <StartTask02+0x2c>)
 80003d2:	f000 fba5 	bl	8000b20 <HAL_GPIO_WritePin>
    osDelay(250);
 80003d6:	20fa      	movs	r0, #250	; 0xfa
 80003d8:	f001 fd4a 	bl	8001e70 <osDelay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80003dc:	e7ee      	b.n	80003bc <StartTask02+0x8>
 80003de:	bf00      	nop
 80003e0:	48001000 	.word	0x48001000

080003e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003f4:	d101      	bne.n	80003fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003f6:	f000 f913 	bl	8000620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000406:	b672      	cpsid	i
}
 8000408:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040a:	e7fe      	b.n	800040a <Error_Handler+0x8>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_MspInit+0x50>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_MspInit+0x50>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6613      	str	r3, [r2, #96]	; 0x60
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x50>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x50>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <HAL_MspInit+0x50>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_MspInit+0x50>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	210f      	movs	r1, #15
 8000446:	f06f 0001 	mvn.w	r0, #1
 800044a:	f000 f9bf 	bl	80007cc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800044e:	f000 fc23 	bl	8000c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	; 0x30
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000470:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <HAL_InitTick+0xc8>)
 8000472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000474:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <HAL_InitTick+0xc8>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6593      	str	r3, [r2, #88]	; 0x58
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <HAL_InitTick+0xc8>)
 800047e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000488:	f107 020c 	add.w	r2, r7, #12
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4611      	mov	r1, r2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 f8e2 	bl	800165c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000498:	f001 f8ca 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 800049c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a0:	4a22      	ldr	r2, [pc, #136]	; (800052c <HAL_InitTick+0xcc>)
 80004a2:	fba2 2303 	umull	r2, r3, r2, r3
 80004a6:	0c9b      	lsrs	r3, r3, #18
 80004a8:	3b01      	subs	r3, #1
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <HAL_InitTick+0xd0>)
 80004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <HAL_InitTick+0xd0>)
 80004b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80004bc:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <HAL_InitTick+0xd0>)
 80004be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_InitTick+0xd0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <HAL_InitTick+0xd0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80004ce:	4818      	ldr	r0, [pc, #96]	; (8000530 <HAL_InitTick+0xd0>)
 80004d0:	f001 f93c 	bl	800174c <HAL_TIM_Base_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80004da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d11b      	bne.n	800051a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80004e2:	4813      	ldr	r0, [pc, #76]	; (8000530 <HAL_InitTick+0xd0>)
 80004e4:	f001 f994 	bl	8001810 <HAL_TIM_Base_Start_IT>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80004ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d111      	bne.n	800051a <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004f6:	201c      	movs	r0, #28
 80004f8:	f000 f982 	bl	8000800 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b0f      	cmp	r3, #15
 8000500:	d808      	bhi.n	8000514 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000502:	2200      	movs	r2, #0
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	201c      	movs	r0, #28
 8000508:	f000 f960 	bl	80007cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <HAL_InitTick+0xd4>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	e002      	b.n	800051a <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800051a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800051e:	4618      	mov	r0, r3
 8000520:	3730      	adds	r7, #48	; 0x30
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	431bde83 	.word	0x431bde83
 8000530:	20000034 	.word	0x20000034
 8000534:	20000004 	.word	0x20000004

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <TIM2_IRQHandler+0x10>)
 800056a:	f001 f9c9 	bl	8001900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034

08000578 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f002 fd9f 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe27 	bl	8000220 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   r0, =_estack
 80005d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005e0:	080031d4 	.word	0x080031d4
  ldr r2, =_sbss
 80005e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005e8:	20000dd8 	.word	0x20000dd8

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>

080005ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f8dc 	bl	80007b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fe:	200f      	movs	r0, #15
 8000600:	f7ff ff2e 	bl	8000460 <HAL_InitTick>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e001      	b.n	8000614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000610:	f7ff fefc 	bl	800040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000614:	79fb      	ldrb	r3, [r7, #7]

}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x1c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x20>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4413      	add	r3, r2
 800062e:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x1c>)
 8000630:	6013      	str	r3, [r2, #0]
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000080 	.word	0x20000080
 8000640:	20000008 	.word	0x20000008

08000644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_GetTick+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000080 	.word	0x20000080

0800065c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	60d3      	str	r3, [r2, #12]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <__NVIC_GetPriorityGrouping+0x18>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	f003 0307 	and.w	r3, r3, #7
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db0b      	blt.n	80006ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 021f 	and.w	r2, r3, #31
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <__NVIC_EnableIRQ+0x38>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	095b      	lsrs	r3, r3, #5
 80006e0:	2001      	movs	r0, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff4c 	bl	800065c <__NVIC_SetPriorityGrouping>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007da:	f7ff ff63 	bl	80006a4 <__NVIC_GetPriorityGrouping>
 80007de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	6978      	ldr	r0, [r7, #20]
 80007e6:	f7ff ffb3 	bl	8000750 <NVIC_EncodePriority>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff82 	bl	80006fc <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff56 	bl	80006c0 <__NVIC_EnableIRQ>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800082a:	e15a      	b.n	8000ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	2101      	movs	r1, #1
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f000 814c 	beq.w	8000adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b01      	cmp	r3, #1
 800084e:	d005      	beq.n	800085c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000858:	2b02      	cmp	r3, #2
 800085a:	d130      	bne.n	80008be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000892:	2201      	movs	r2, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	f003 0201 	and.w	r2, r3, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d017      	beq.n	80008fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b02      	cmp	r3, #2
 8000904:	d123      	bne.n	800094e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	6939      	ldr	r1, [r7, #16]
 800094a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0203 	and.w	r2, r3, #3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80a6 	beq.w	8000adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	4a5a      	ldr	r2, [pc, #360]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6613      	str	r3, [r2, #96]	; 0x60
 800099c:	4b58      	ldr	r3, [pc, #352]	; (8000b00 <HAL_GPIO_Init+0x2e4>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a8:	4a56      	ldr	r2, [pc, #344]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	220f      	movs	r2, #15
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009d2:	d01f      	beq.n	8000a14 <HAL_GPIO_Init+0x1f8>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a4c      	ldr	r2, [pc, #304]	; (8000b08 <HAL_GPIO_Init+0x2ec>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d019      	beq.n	8000a10 <HAL_GPIO_Init+0x1f4>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a4b      	ldr	r2, [pc, #300]	; (8000b0c <HAL_GPIO_Init+0x2f0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d013      	beq.n	8000a0c <HAL_GPIO_Init+0x1f0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a4a      	ldr	r2, [pc, #296]	; (8000b10 <HAL_GPIO_Init+0x2f4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0x1ec>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <HAL_GPIO_Init+0x2f8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x1e8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2fc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <HAL_GPIO_Init+0x1e4>
 80009fc:	2305      	movs	r3, #5
 80009fe:	e00a      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a00:	2306      	movs	r3, #6
 8000a02:	e008      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a04:	2304      	movs	r3, #4
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e004      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <HAL_GPIO_Init+0x1fa>
 8000a14:	2300      	movs	r3, #0
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	f002 0203 	and.w	r2, r2, #3
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a26:	4937      	ldr	r1, [pc, #220]	; (8000b04 <HAL_GPIO_Init+0x2e8>)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a58:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a82:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <HAL_GPIO_Init+0x300>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f ae9d 	bne.w	800082c <HAL_GPIO_Init+0x10>
  }
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000c00 	.word	0x48000c00
 8000b14:	48001000 	.word	0x48001000
 8000b18:	48001400 	.word	0x48001400
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d141      	bne.n	8000be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b5e:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6a:	d131      	bne.n	8000bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b6c:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b72:	4a46      	ldr	r2, [pc, #280]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b84:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b8c:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2232      	movs	r2, #50	; 0x32
 8000b92:	fb02 f303 	mul.w	r3, r2, r3
 8000b96:	4a3f      	ldr	r2, [pc, #252]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	0c9b      	lsrs	r3, r3, #18
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ba2:	e002      	b.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb6:	d102      	bne.n	8000bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f2      	bne.n	8000ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bca:	d158      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e057      	b.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000be0:	e04d      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be8:	d141      	bne.n	8000c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf6:	d131      	bne.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c10:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2232      	movs	r2, #50	; 0x32
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	0c9b      	lsrs	r3, r3, #18
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2e:	e002      	b.n	8000c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c42:	d102      	bne.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f2      	bne.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d112      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e011      	b.n	8000c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c6c:	e007      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	20000000 	.word	0x20000000
 8000c94:	431bde83 	.word	0x431bde83

08000c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6093      	str	r3, [r2, #8]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e2fe      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d075      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd6:	4b97      	ldr	r3, [pc, #604]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ce0:	4b94      	ldr	r3, [pc, #592]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2b0c      	cmp	r3, #12
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x3e>
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d002      	beq.n	8000cfc <HAL_RCC_OscConfig+0x44>
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d10b      	bne.n	8000d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfc:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d05b      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x108>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d157      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e2d9      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1c:	d106      	bne.n	8000d2c <HAL_RCC_OscConfig+0x74>
 8000d1e:	4b85      	ldr	r3, [pc, #532]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a84      	ldr	r2, [pc, #528]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e01d      	b.n	8000d68 <HAL_RCC_OscConfig+0xb0>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x98>
 8000d36:	4b7f      	ldr	r3, [pc, #508]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7b      	ldr	r2, [pc, #492]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xb0>
 8000d50:	4b78      	ldr	r3, [pc, #480]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a77      	ldr	r2, [pc, #476]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b75      	ldr	r3, [pc, #468]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a74      	ldr	r2, [pc, #464]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc68 	bl	8000644 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc64 	bl	8000644 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e29e      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d8a:	4b6a      	ldr	r3, [pc, #424]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xc0>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc54 	bl	8000644 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc50 	bl	8000644 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e28a      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0xe8>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d075      	beq.n	8000eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dce:	4b59      	ldr	r3, [pc, #356]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b0c      	cmp	r3, #12
 8000de6:	d102      	bne.n	8000dee <HAL_RCC_OscConfig+0x136>
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d002      	beq.n	8000df4 <HAL_RCC_OscConfig+0x13c>
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d11f      	bne.n	8000e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000df4:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <HAL_RCC_OscConfig+0x154>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e25d      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0c:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	061b      	lsls	r3, r3, #24
 8000e1a:	4946      	ldr	r1, [pc, #280]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <HAL_RCC_OscConfig+0x280>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb1b 	bl	8000460 <HAL_InitTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d043      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e249      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a3c      	ldr	r2, [pc, #240]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e48:	f7ff fbfc 	bl	8000644 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e50:	f7ff fbf8 	bl	8000644 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e232      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	061b      	lsls	r3, r3, #24
 8000e7c:	492d      	ldr	r1, [pc, #180]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
 8000e82:	e01a      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a2a      	ldr	r2, [pc, #168]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fbd8 	bl	8000644 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fbd4 	bl	8000644 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e20e      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1e0>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d041      	beq.n	8000f4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbb1 	bl	8000644 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fbad 	bl	8000644 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e1e7      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0ef      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x22e>
 8000f06:	e020      	b.n	8000f4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_RCC_OscConfig+0x27c>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f18:	f7ff fb94 	bl	8000644 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f1e:	e00d      	b.n	8000f3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fb90 	bl	8000644 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d906      	bls.n	8000f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e1ca      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1ea      	bne.n	8000f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80a6 	beq.w	80010a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f5c:	4b84      	ldr	r3, [pc, #528]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2b4>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_RCC_OscConfig+0x2b6>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00d      	beq.n	8000f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a7e      	ldr	r2, [pc, #504]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f8e:	4b79      	ldr	r3, [pc, #484]	; (8001174 <HAL_RCC_OscConfig+0x4bc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x4bc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a75      	ldr	r2, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x4bc>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb4d 	bl	8000644 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fae:	f7ff fb49 	bl	8000644 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e183      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc0:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x4bc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x32e>
 8000fd4:	4b66      	ldr	r3, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fda:	4a65      	ldr	r2, [pc, #404]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fe4:	e024      	b.n	8001030 <HAL_RCC_OscConfig+0x378>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d110      	bne.n	8001010 <HAL_RCC_OscConfig+0x358>
 8000fee:	4b60      	ldr	r3, [pc, #384]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff4:	4a5e      	ldr	r2, [pc, #376]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001004:	4a5a      	ldr	r2, [pc, #360]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800100e:	e00f      	b.n	8001030 <HAL_RCC_OscConfig+0x378>
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001016:	4a56      	ldr	r2, [pc, #344]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001026:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d016      	beq.n	8001066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff fb04 	bl	8000644 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800103e:	e00a      	b.n	8001056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001040:	f7ff fb00 	bl	8000644 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f241 3288 	movw	r2, #5000	; 0x1388
 800104e:	4293      	cmp	r3, r2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e138      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ed      	beq.n	8001040 <HAL_RCC_OscConfig+0x388>
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001066:	f7ff faed 	bl	8000644 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fae9 	bl	8000644 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e121      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ed      	bne.n	800106e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 800109e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d03c      	beq.n	800112a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01c      	beq.n	80010f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 80010ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010be:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c8:	f7ff fabc 	bl	8000644 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d0:	f7ff fab8 	bl	8000644 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e0f2      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 80010e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ef      	beq.n	80010d0 <HAL_RCC_OscConfig+0x418>
 80010f0:	e01b      	b.n	800112a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001102:	f7ff fa9f 	bl	8000644 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800110a:	f7ff fa9b 	bl	8000644 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0d5      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 800111e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1ef      	bne.n	800110a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80c9 	beq.w	80012c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b0c      	cmp	r3, #12
 800113e:	f000 8083 	beq.w	8001248 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d15e      	bne.n	8001208 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_RCC_OscConfig+0x4b8>)
 8001150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fa75 	bl	8000644 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800115c:	e00c      	b.n	8001178 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fa71 	bl	8000644 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d905      	bls.n	8001178 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0ab      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ec      	bne.n	800115e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <HAL_RCC_OscConfig+0x61c>)
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a11      	ldr	r1, [r2, #32]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001194:	3a01      	subs	r2, #1
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	4311      	orrs	r1, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800119e:	0212      	lsls	r2, r2, #8
 80011a0:	4311      	orrs	r1, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011a6:	0852      	lsrs	r2, r2, #1
 80011a8:	3a01      	subs	r2, #1
 80011aa:	0552      	lsls	r2, r2, #21
 80011ac:	4311      	orrs	r1, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011b2:	0852      	lsrs	r2, r2, #1
 80011b4:	3a01      	subs	r2, #1
 80011b6:	0652      	lsls	r2, r2, #25
 80011b8:	4311      	orrs	r1, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011be:	06d2      	lsls	r2, r2, #27
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4943      	ldr	r1, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fa30 	bl	8000644 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fa2c 	bl	8000644 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e066      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x530>
 8001206:	e05e      	b.n	80012c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 800120e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fa16 	bl	8000644 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fa12 	bl	8000644 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04c      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	4924      	ldr	r1, [pc, #144]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_RCC_OscConfig+0x620>)
 8001242:	4013      	ands	r3, r2
 8001244:	60cb      	str	r3, [r1, #12]
 8001246:	e03e      	b.n	80012c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e039      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_OscConfig+0x618>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	429a      	cmp	r2, r3
 8001266:	d12c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	3b01      	subs	r3, #1
 8001274:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	429a      	cmp	r2, r3
 8001278:	d123      	bne.n	80012c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001286:	429a      	cmp	r2, r3
 8001288:	d11b      	bne.n	80012c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d113      	bne.n	80012c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	3b01      	subs	r3, #1
 80012a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	3b01      	subs	r3, #1
 80012bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	019f800c 	.word	0x019f800c
 80012d8:	feeefffc 	.word	0xfeeefffc

080012dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e11e      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4b91      	ldr	r3, [pc, #580]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d910      	bls.n	8001324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b8e      	ldr	r3, [pc, #568]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 020f 	bic.w	r2, r3, #15
 800130a:	498c      	ldr	r1, [pc, #560]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b8a      	ldr	r3, [pc, #552]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e106      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d073      	beq.n	8001418 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d129      	bne.n	800138c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001338:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0f4      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001348:	f000 f9ba 	bl	80016c0 <RCC_GetSysClockFreqFromPLLSource>
 800134c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4a7c      	ldr	r2, [pc, #496]	; (8001544 <HAL_RCC_ClockConfig+0x268>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d93f      	bls.n	80013d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001356:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800136a:	2b00      	cmp	r3, #0
 800136c:	d033      	beq.n	80013d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d12f      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001376:	4b72      	ldr	r3, [pc, #456]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800137e:	4a70      	ldr	r2, [pc, #448]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e024      	b.n	80013d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0c6      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a4:	4b66      	ldr	r3, [pc, #408]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0be      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013b4:	f000 f8ce 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4a61      	ldr	r2, [pc, #388]	; (8001544 <HAL_RCC_ClockConfig+0x268>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d909      	bls.n	80013d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ca:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f023 0203 	bic.w	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4957      	ldr	r1, [pc, #348]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013e8:	f7ff f92c 	bl	8000644 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f0:	f7ff f928 	bl	8000644 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e095      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001406:	4b4e      	ldr	r3, [pc, #312]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 020c 	and.w	r2, r3, #12
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	429a      	cmp	r2, r3
 8001416:	d1eb      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d023      	beq.n	800146c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a42      	ldr	r2, [pc, #264]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800143a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001450:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001456:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4936      	ldr	r1, [pc, #216]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
 800146a:	e008      	b.n	800147e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b80      	cmp	r3, #128	; 0x80
 8001470:	d105      	bne.n	800147e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4a32      	ldr	r2, [pc, #200]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800147c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d21d      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 020f 	bic.w	r2, r3, #15
 8001494:	4929      	ldr	r1, [pc, #164]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800149c:	f7ff f8d2 	bl	8000644 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a4:	f7ff f8ce 	bl	8000644 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e03b      	b.n	8001532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x260>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1ed      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4917      	ldr	r1, [pc, #92]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490f      	ldr	r1, [pc, #60]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001506:	f000 f825 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_ClockConfig+0x264>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490c      	ldr	r1, [pc, #48]	; (8001548 <HAL_RCC_ClockConfig+0x26c>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_RCC_ClockConfig+0x270>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x274>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff98 	bl	8000460 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	04c4b400 	.word	0x04c4b400
 8001548:	080031b4 	.word	0x080031b4
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d102      	bne.n	800156c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e047      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d102      	bne.n	800157e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_RCC_GetSysClockFreq+0xc0>)
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e03e      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d136      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3301      	adds	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b2:	68d2      	ldr	r2, [r2, #12]
 80015b4:	0a12      	lsrs	r2, r2, #8
 80015b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
      break;
 80015c0:	e00c      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015cc:	68d2      	ldr	r2, [r2, #12]
 80015ce:	0a12      	lsrs	r2, r2, #8
 80015d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
      break;
 80015da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0e5b      	lsrs	r3, r3, #25
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	3301      	adds	r3, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e001      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015fc:	693b      	ldr	r3, [r7, #16]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	00f42400 	.word	0x00f42400
 8001614:	007a1200 	.word	0x007a1200

08001618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4904      	ldr	r1, [pc, #16]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	080031c4 	.word	0x080031c4

0800165c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	220f      	movs	r2, #15
 800166a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_GetClockConfig+0x5c>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_RCC_GetClockConfig+0x5c>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_RCC_GetClockConfig+0x60>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 020f 	and.w	r2, r3, #15
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40022000 	.word	0x40022000

080016c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d10c      	bne.n	80016fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016e4:	4a17      	ldr	r2, [pc, #92]	; (8001744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016ee:	68d2      	ldr	r2, [r2, #12]
 80016f0:	0a12      	lsrs	r2, r2, #8
 80016f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
    break;
 80016fc:	e00c      	b.n	8001718 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	0a12      	lsrs	r2, r2, #8
 800170c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
    break;
 8001716:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0e5b      	lsrs	r3, r3, #25
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	3301      	adds	r3, #1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	007a1200 	.word	0x007a1200
 8001748:	00f42400 	.word	0x00f42400

0800174c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e049      	b.n	80017f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f841 	bl	80017fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3304      	adds	r3, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f000 fa30 	bl	8001bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d001      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e054      	b.n	80018d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d022      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d01d      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d018      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_TIM_Base_Start_IT+0xdc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00e      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d009      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d004      	beq.n	8001890 <HAL_TIM_Base_Start_IT+0x80>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d115      	bne.n	80018bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_TIM_Base_Start_IT+0xec>)
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d015      	beq.n	80018ce <HAL_TIM_Base_Start_IT+0xbe>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d011      	beq.n	80018ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ba:	e008      	b.n	80018ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e000      	b.n	80018d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40000800 	.word	0x40000800
 80018ec:	40000c00 	.word	0x40000c00
 80018f0:	40013400 	.word	0x40013400
 80018f4:	40014000 	.word	0x40014000
 80018f8:	40015000 	.word	0x40015000
 80018fc:	00010007 	.word	0x00010007

08001900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d020      	beq.n	8001964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01b      	beq.n	8001964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0202 	mvn.w	r2, #2
 8001934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f931 	bl	8001bb2 <HAL_TIM_IC_CaptureCallback>
 8001950:	e005      	b.n	800195e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f923 	bl	8001b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f934 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d020      	beq.n	80019b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01b      	beq.n	80019b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0204 	mvn.w	r2, #4
 8001980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2202      	movs	r2, #2
 8001986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f90b 	bl	8001bb2 <HAL_TIM_IC_CaptureCallback>
 800199c:	e005      	b.n	80019aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8fd 	bl	8001b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f90e 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d020      	beq.n	80019fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f06f 0208 	mvn.w	r2, #8
 80019cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2204      	movs	r2, #4
 80019d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8e5 	bl	8001bb2 <HAL_TIM_IC_CaptureCallback>
 80019e8:	e005      	b.n	80019f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f8d7 	bl	8001b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8e8 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d020      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0210 	mvn.w	r2, #16
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8bf 	bl	8001bb2 <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8b1 	bl	8001b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8c2 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0201 	mvn.w	r2, #1
 8001a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fcbc 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d104      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8001a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f969 	bl	8001d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f961 	bl	8001d80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f87c 	bl	8001bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00c      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0220 	mvn.w	r2, #32
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f929 	bl	8001d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f935 	bl	8001d94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f92d 	bl	8001da8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f925 	bl	8001dbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f91d 	bl	8001dd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <TIM_Base_SetConfig+0x144>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d017      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	d013      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <TIM_Base_SetConfig+0x148>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00f      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <TIM_Base_SetConfig+0x14c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00b      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <TIM_Base_SetConfig+0x150>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <TIM_Base_SetConfig+0x154>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <TIM_Base_SetConfig+0x48>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <TIM_Base_SetConfig+0x158>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d108      	bne.n	8001c4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a39      	ldr	r2, [pc, #228]	; (8001d34 <TIM_Base_SetConfig+0x144>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d023      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c58:	d01f      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <TIM_Base_SetConfig+0x148>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01b      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <TIM_Base_SetConfig+0x14c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d017      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <TIM_Base_SetConfig+0x150>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <TIM_Base_SetConfig+0x154>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00f      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <TIM_Base_SetConfig+0x15c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00b      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <TIM_Base_SetConfig+0x160>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <TIM_Base_SetConfig+0x164>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d003      	beq.n	8001c9a <TIM_Base_SetConfig+0xaa>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <TIM_Base_SetConfig+0x158>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d108      	bne.n	8001cac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <TIM_Base_SetConfig+0x144>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <TIM_Base_SetConfig+0x110>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <TIM_Base_SetConfig+0x154>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00f      	beq.n	8001d00 <TIM_Base_SetConfig+0x110>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <TIM_Base_SetConfig+0x15c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00b      	beq.n	8001d00 <TIM_Base_SetConfig+0x110>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <TIM_Base_SetConfig+0x160>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <TIM_Base_SetConfig+0x110>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <TIM_Base_SetConfig+0x164>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <TIM_Base_SetConfig+0x110>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <TIM_Base_SetConfig+0x158>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d103      	bne.n	8001d08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f023 0201 	bic.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]
  }
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40013400 	.word	0x40013400
 8001d48:	40015000 	.word	0x40015000
 8001d4c:	40014000 	.word	0x40014000
 8001d50:	40014400 	.word	0x40014400
 8001d54:	40014800 	.word	0x40014800

08001d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df6:	2b84      	cmp	r3, #132	; 0x84
 8001df8:	d005      	beq.n	8001e06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001dfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	3303      	adds	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e18:	f000 fa58 	bl	80022cc <vTaskStartScheduler>
  
  return osOK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685c      	ldr	r4, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e38:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ffcf 	bl	8001de4 <makeFreeRtosPriority>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9200      	str	r2, [sp, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4632      	mov	r2, r6
 8001e54:	4629      	mov	r1, r5
 8001e56:	4620      	mov	r0, r4
 8001e58:	f000 f8d2 	bl	8002000 <xTaskCreate>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <osDelay+0x16>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	e000      	b.n	8001e88 <osDelay+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f9eb 	bl	8002264 <vTaskDelay>
  
  return osOK;
 8001e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f103 0208 	add.w	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f103 0208 	add.w	r2, r3, #8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f103 0208 	add.w	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d103      	bne.n	8001f5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e00c      	b.n	8001f74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e002      	b.n	8001f68 <vListInsert+0x2e>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d2f6      	bcs.n	8001f62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6892      	ldr	r2, [r2, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d103      	bne.n	8001fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1e5a      	subs	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af04      	add	r7, sp, #16
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fe87 	bl	8002d28 <pvPortMalloc>
 800201a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00e      	beq.n	8002040 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002022:	2054      	movs	r0, #84	; 0x54
 8002024:	f000 fe80 	bl	8002d28 <pvPortMalloc>
 8002028:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	e005      	b.n	8002044 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f000 ff41 	bl	8002ec0 <vPortFree>
 800203e:	e001      	b.n	8002044 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d013      	beq.n	8002072 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	2300      	movs	r3, #0
 800204e:	9303      	str	r3, [sp, #12]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f80e 	bl	8002082 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002066:	69f8      	ldr	r0, [r7, #28]
 8002068:	f000 f892 	bl	8002190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	e002      	b.n	8002078 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002078:	69bb      	ldr	r3, [r7, #24]
	}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b088      	sub	sp, #32
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800209a:	3b01      	subs	r3, #1
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f023 0307 	bic.w	r3, r3, #7
 80020a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b8:	f383 8811 	msr	BASEPRI, r3
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020c6:	bf00      	nop
 80020c8:	e7fe      	b.n	80020c8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01f      	beq.n	8002110 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	e012      	b.n	80020fc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	7819      	ldrb	r1, [r3, #0]
 80020de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	3334      	adds	r3, #52	; 0x34
 80020e6:	460a      	mov	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d9e9      	bls.n	80020d6 <prvInitialiseNewTask+0x54>
 8002102:	e000      	b.n	8002106 <prvInitialiseNewTask+0x84>
			{
				break;
 8002104:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210e:	e003      	b.n	8002118 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	2b06      	cmp	r3, #6
 800211c:	d901      	bls.n	8002122 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800211e:	2306      	movs	r3, #6
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	2200      	movs	r2, #0
 8002132:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	3304      	adds	r3, #4
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fecd 	bl	8001ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fec8 	bl	8001ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800214c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	f1c3 0207 	rsb	r2, r3, #7
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	2200      	movs	r2, #0
 8002162:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	69b8      	ldr	r0, [r7, #24]
 8002172:	f000 fbcd 	bl	8002910 <pxPortInitialiseStack>
 8002176:	4602      	mov	r2, r0
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002188:	bf00      	nop
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002198:	f000 fce4 	bl	8002b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <prvAddNewTaskToReadyList+0xb8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	4a29      	ldr	r2, [pc, #164]	; (8002248 <prvAddNewTaskToReadyList+0xb8>)
 80021a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <prvAddNewTaskToReadyList+0xbc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <prvAddNewTaskToReadyList+0xbc>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <prvAddNewTaskToReadyList+0xb8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d110      	bne.n	80021de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80021bc:	f000 faa4 	bl	8002708 <prvInitialiseTaskLists>
 80021c0:	e00d      	b.n	80021de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <prvAddNewTaskToReadyList+0xc0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <prvAddNewTaskToReadyList+0xbc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d802      	bhi.n	80021de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <prvAddNewTaskToReadyList+0xbc>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <prvAddNewTaskToReadyList+0xc4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <prvAddNewTaskToReadyList+0xc4>)
 80021e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2201      	movs	r2, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <prvAddNewTaskToReadyList+0xc8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <prvAddNewTaskToReadyList+0xc8>)
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <prvAddNewTaskToReadyList+0xcc>)
 8002208:	441a      	add	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7ff fe6e 	bl	8001ef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002216:	f000 fcd5 	bl	8002bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <prvAddNewTaskToReadyList+0xc0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00e      	beq.n	8002240 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <prvAddNewTaskToReadyList+0xbc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <prvAddNewTaskToReadyList+0xd0>)
 8002232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000184 	.word	0x20000184
 800224c:	20000084 	.word	0x20000084
 8002250:	20000190 	.word	0x20000190
 8002254:	200001a0 	.word	0x200001a0
 8002258:	2000018c 	.word	0x2000018c
 800225c:	20000088 	.word	0x20000088
 8002260:	e000ed04 	.word	0xe000ed04

08002264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d017      	beq.n	80022a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <vTaskDelay+0x60>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <vTaskDelay+0x30>
	__asm volatile
 800227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	60bb      	str	r3, [r7, #8]
}
 8002290:	bf00      	nop
 8002292:	e7fe      	b.n	8002292 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002294:	f000 f862 	bl	800235c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fad2 	bl	8002844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022a0:	f000 f86a 	bl	8002378 <xTaskResumeAll>
 80022a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <vTaskDelay+0x64>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200001ac 	.word	0x200001ac
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <vTaskStartScheduler+0x78>)
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	491a      	ldr	r1, [pc, #104]	; (8002348 <vTaskStartScheduler+0x7c>)
 80022e0:	481a      	ldr	r0, [pc, #104]	; (800234c <vTaskStartScheduler+0x80>)
 80022e2:	f7ff fe8d 	bl	8002000 <xTaskCreate>
 80022e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d116      	bne.n	800231c <vTaskStartScheduler+0x50>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	60bb      	str	r3, [r7, #8]
}
 8002300:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <vTaskStartScheduler+0x84>)
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <vTaskStartScheduler+0x88>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <vTaskStartScheduler+0x8c>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002316:	f000 fb83 	bl	8002a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800231a:	e00e      	b.n	800233a <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d10a      	bne.n	800233a <vTaskStartScheduler+0x6e>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	607b      	str	r3, [r7, #4]
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <vTaskStartScheduler+0x6c>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200001a8 	.word	0x200001a8
 8002348:	080031ac 	.word	0x080031ac
 800234c:	080026d9 	.word	0x080026d9
 8002350:	200001a4 	.word	0x200001a4
 8002354:	20000190 	.word	0x20000190
 8002358:	20000188 	.word	0x20000188

0800235c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <vTaskSuspendAll+0x18>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a03      	ldr	r2, [pc, #12]	; (8002374 <vTaskSuspendAll+0x18>)
 8002368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	200001ac 	.word	0x200001ac

08002378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <xTaskResumeAll+0x114>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	603b      	str	r3, [r7, #0]
}
 80023a0:	bf00      	nop
 80023a2:	e7fe      	b.n	80023a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80023a4:	f000 fbde 	bl	8002b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <xTaskResumeAll+0x114>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <xTaskResumeAll+0x114>)
 80023b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <xTaskResumeAll+0x114>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d161      	bne.n	800247e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023ba:	4b35      	ldr	r3, [pc, #212]	; (8002490 <xTaskResumeAll+0x118>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d05d      	beq.n	800247e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023c2:	e02e      	b.n	8002422 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <xTaskResumeAll+0x11c>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3318      	adds	r3, #24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fdeb 	bl	8001fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fde6 	bl	8001fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <xTaskResumeAll+0x120>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <xTaskResumeAll+0x120>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4a27      	ldr	r2, [pc, #156]	; (800249c <xTaskResumeAll+0x124>)
 8002400:	441a      	add	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff fd72 	bl	8001ef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <xTaskResumeAll+0x128>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <xTaskResumeAll+0x12c>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <xTaskResumeAll+0x11c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cc      	bne.n	80023c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002430:	f000 f9e8 	bl	8002804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <xTaskResumeAll+0x130>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002440:	f000 f836 	bl	80024b0 <xTaskIncrementTick>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <xTaskResumeAll+0x12c>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f1      	bne.n	8002440 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <xTaskResumeAll+0x130>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <xTaskResumeAll+0x12c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800246a:	2301      	movs	r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <xTaskResumeAll+0x134>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800247e:	f000 fba1 	bl	8002bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8002482:	68bb      	ldr	r3, [r7, #8]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200001ac 	.word	0x200001ac
 8002490:	20000184 	.word	0x20000184
 8002494:	20000144 	.word	0x20000144
 8002498:	2000018c 	.word	0x2000018c
 800249c:	20000088 	.word	0x20000088
 80024a0:	20000084 	.word	0x20000084
 80024a4:	20000198 	.word	0x20000198
 80024a8:	20000194 	.word	0x20000194
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <xTaskIncrementTick+0x144>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 808e 	bne.w	80025e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <xTaskIncrementTick+0x148>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80024cc:	4a4a      	ldr	r2, [pc, #296]	; (80025f8 <xTaskIncrementTick+0x148>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d120      	bne.n	800251a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80024d8:	4b48      	ldr	r3, [pc, #288]	; (80025fc <xTaskIncrementTick+0x14c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	603b      	str	r3, [r7, #0]
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xTaskIncrementTick+0x46>
 80024f8:	4b40      	ldr	r3, [pc, #256]	; (80025fc <xTaskIncrementTick+0x14c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <xTaskIncrementTick+0x150>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a3e      	ldr	r2, [pc, #248]	; (80025fc <xTaskIncrementTick+0x14c>)
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <xTaskIncrementTick+0x150>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <xTaskIncrementTick+0x154>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a3c      	ldr	r2, [pc, #240]	; (8002604 <xTaskIncrementTick+0x154>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	f000 f975 	bl	8002804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <xTaskIncrementTick+0x158>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d348      	bcc.n	80025b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <xTaskIncrementTick+0x14c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <xTaskIncrementTick+0x158>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	601a      	str	r2, [r3, #0]
					break;
 8002536:	e03e      	b.n	80025b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <xTaskIncrementTick+0x14c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d203      	bcs.n	8002558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002550:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <xTaskIncrementTick+0x158>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002556:	e02e      	b.n	80025b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3304      	adds	r3, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd25 	bl	8001fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3318      	adds	r3, #24
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fd1c 	bl	8001fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <xTaskIncrementTick+0x15c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <xTaskIncrementTick+0x15c>)
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <xTaskIncrementTick+0x160>)
 8002594:	441a      	add	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3304      	adds	r3, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7ff fca8 	bl	8001ef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <xTaskIncrementTick+0x164>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3b9      	bcc.n	8002524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b4:	e7b6      	b.n	8002524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <xTaskIncrementTick+0x164>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	4914      	ldr	r1, [pc, #80]	; (8002610 <xTaskIncrementTick+0x160>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d901      	bls.n	80025d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <xTaskIncrementTick+0x168>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80025da:	2301      	movs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e004      	b.n	80025ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <xTaskIncrementTick+0x16c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <xTaskIncrementTick+0x16c>)
 80025e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80025ea:	697b      	ldr	r3, [r7, #20]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200001ac 	.word	0x200001ac
 80025f8:	20000188 	.word	0x20000188
 80025fc:	2000013c 	.word	0x2000013c
 8002600:	20000140 	.word	0x20000140
 8002604:	2000019c 	.word	0x2000019c
 8002608:	200001a4 	.word	0x200001a4
 800260c:	2000018c 	.word	0x2000018c
 8002610:	20000088 	.word	0x20000088
 8002614:	20000084 	.word	0x20000084
 8002618:	20000198 	.word	0x20000198
 800261c:	20000194 	.word	0x20000194

08002620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002626:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <vTaskSwitchContext+0xa4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <vTaskSwitchContext+0xa8>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002634:	e03f      	b.n	80026b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <vTaskSwitchContext+0xa8>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <vTaskSwitchContext+0xac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	f1c3 031f 	rsb	r3, r3, #31
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	491f      	ldr	r1, [pc, #124]	; (80026d0 <vTaskSwitchContext+0xb0>)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	607b      	str	r3, [r7, #4]
}
 8002678:	bf00      	nop
 800267a:	e7fe      	b.n	800267a <vTaskSwitchContext+0x5a>
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <vTaskSwitchContext+0xb0>)
 8002688:	4413      	add	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3308      	adds	r3, #8
 800269e:	429a      	cmp	r2, r3
 80026a0:	d104      	bne.n	80026ac <vTaskSwitchContext+0x8c>
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <vTaskSwitchContext+0xb4>)
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200001ac 	.word	0x200001ac
 80026c8:	20000198 	.word	0x20000198
 80026cc:	2000018c 	.word	0x2000018c
 80026d0:	20000088 	.word	0x20000088
 80026d4:	20000084 	.word	0x20000084

080026d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80026e0:	f000 f852 	bl	8002788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <prvIdleTask+0x28>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d9f9      	bls.n	80026e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <prvIdleTask+0x2c>)
 80026ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80026fc:	e7f0      	b.n	80026e0 <prvIdleTask+0x8>
 80026fe:	bf00      	nop
 8002700:	20000088 	.word	0x20000088
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	e00c      	b.n	800272e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <prvInitialiseTaskLists+0x60>)
 8002720:	4413      	add	r3, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fbb8 	bl	8001e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b06      	cmp	r3, #6
 8002732:	d9ef      	bls.n	8002714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <prvInitialiseTaskLists+0x64>)
 8002736:	f7ff fbaf 	bl	8001e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <prvInitialiseTaskLists+0x68>)
 800273c:	f7ff fbac 	bl	8001e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <prvInitialiseTaskLists+0x6c>)
 8002742:	f7ff fba9 	bl	8001e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002746:	480c      	ldr	r0, [pc, #48]	; (8002778 <prvInitialiseTaskLists+0x70>)
 8002748:	f7ff fba6 	bl	8001e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <prvInitialiseTaskLists+0x74>)
 800274e:	f7ff fba3 	bl	8001e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <prvInitialiseTaskLists+0x78>)
 8002754:	4a05      	ldr	r2, [pc, #20]	; (800276c <prvInitialiseTaskLists+0x64>)
 8002756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <prvInitialiseTaskLists+0x7c>)
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <prvInitialiseTaskLists+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000088 	.word	0x20000088
 800276c:	20000114 	.word	0x20000114
 8002770:	20000128 	.word	0x20000128
 8002774:	20000144 	.word	0x20000144
 8002778:	20000158 	.word	0x20000158
 800277c:	20000170 	.word	0x20000170
 8002780:	2000013c 	.word	0x2000013c
 8002784:	20000140 	.word	0x20000140

08002788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800278e:	e019      	b.n	80027c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002790:	f000 f9e8 	bl	8002b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <prvCheckTasksWaitingTermination+0x50>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc03 	bl	8001fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <prvCheckTasksWaitingTermination+0x54>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <prvCheckTasksWaitingTermination+0x54>)
 80027ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <prvCheckTasksWaitingTermination+0x58>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <prvCheckTasksWaitingTermination+0x58>)
 80027b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80027ba:	f000 fa03 	bl	8002bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f810 	bl	80027e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <prvCheckTasksWaitingTermination+0x58>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e1      	bne.n	8002790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000158 	.word	0x20000158
 80027dc:	20000184 	.word	0x20000184
 80027e0:	2000016c 	.word	0x2000016c

080027e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fb65 	bl	8002ec0 <vPortFree>
			vPortFree( pxTCB );
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fb62 	bl	8002ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <prvResetNextTaskUnblockTime+0x38>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <prvResetNextTaskUnblockTime+0x3c>)
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800281c:	e008      	b.n	8002830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <prvResetNextTaskUnblockTime+0x38>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <prvResetNextTaskUnblockTime+0x3c>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	2000013c 	.word	0x2000013c
 8002840:	200001a4 	.word	0x200001a4

08002844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fba6 	bl	8001fac <uxListRemove>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4013      	ands	r3, r2
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800287c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d10a      	bne.n	800289c <prvAddCurrentTaskToDelayedList+0x58>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3304      	adds	r3, #4
 8002892:	4619      	mov	r1, r3
 8002894:	481a      	ldr	r0, [pc, #104]	; (8002900 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002896:	f7ff fb2c 	bl	8001ef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800289a:	e026      	b.n	80028ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d209      	bcs.n	80028c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3304      	adds	r3, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7ff fb3a 	bl	8001f3a <vListInsert>
}
 80028c6:	e010      	b.n	80028ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3304      	adds	r3, #4
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7ff fb30 	bl	8001f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d202      	bcs.n	80028ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000188 	.word	0x20000188
 80028f8:	20000084 	.word	0x20000084
 80028fc:	2000018c 	.word	0x2000018c
 8002900:	20000170 	.word	0x20000170
 8002904:	20000140 	.word	0x20000140
 8002908:	2000013c 	.word	0x2000013c
 800290c:	200001a4 	.word	0x200001a4

08002910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3b04      	subs	r3, #4
 8002920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3b04      	subs	r3, #4
 800292e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b04      	subs	r3, #4
 800293e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <pxPortInitialiseStack+0x64>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b14      	subs	r3, #20
 800294a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b04      	subs	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f06f 0202 	mvn.w	r2, #2
 800295e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3b20      	subs	r3, #32
 8002964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	08002979 	.word	0x08002979

08002978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <prvTaskExitError+0x54>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d00a      	beq.n	80029a2 <prvTaskExitError+0x2a>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	60fb      	str	r3, [r7, #12]
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <prvTaskExitError+0x28>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	60bb      	str	r3, [r7, #8]
}
 80029b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029b6:	bf00      	nop
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0fc      	beq.n	80029b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <pxCurrentTCBConst2>)
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	6808      	ldr	r0, [r1, #0]
 80029d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029da:	f380 8809 	msr	PSP, r0
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f380 8811 	msr	BASEPRI, r0
 80029ea:	4770      	bx	lr
 80029ec:	f3af 8000 	nop.w

080029f0 <pxCurrentTCBConst2>:
 80029f0:	20000084 	.word	0x20000084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop

080029f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029f8:	4808      	ldr	r0, [pc, #32]	; (8002a1c <prvPortStartFirstTask+0x24>)
 80029fa:	6800      	ldr	r0, [r0, #0]
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f380 8808 	msr	MSP, r0
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f380 8814 	msr	CONTROL, r0
 8002a0a:	b662      	cpsie	i
 8002a0c:	b661      	cpsie	f
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	df00      	svc	0
 8002a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed08 	.word	0xe000ed08

08002a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <xPortStartScheduler+0x120>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <xPortStartScheduler+0x124>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10a      	bne.n	8002a46 <xPortStartScheduler+0x26>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	613b      	str	r3, [r7, #16]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <xPortStartScheduler+0x120>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <xPortStartScheduler+0x128>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10a      	bne.n	8002a66 <xPortStartScheduler+0x46>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	60fb      	str	r3, [r7, #12]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <xPortStartScheduler+0x12c>)
 8002a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <xPortStartScheduler+0x130>)
 8002a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a94:	e009      	b.n	8002aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <xPortStartScheduler+0x134>)
 8002a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d0ef      	beq.n	8002a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00a      	beq.n	8002ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	60bb      	str	r3, [r7, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <xPortStartScheduler+0x134>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <xPortStartScheduler+0x134>)
 8002aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <xPortStartScheduler+0x138>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <xPortStartScheduler+0x138>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <xPortStartScheduler+0x138>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <xPortStartScheduler+0x138>)
 8002b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b0e:	f000 f8dd 	bl	8002ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <xPortStartScheduler+0x13c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002b18:	f000 f8fc 	bl	8002d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <xPortStartScheduler+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <xPortStartScheduler+0x140>)
 8002b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b28:	f7ff ff66 	bl	80029f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b2c:	f7ff fd78 	bl	8002620 <vTaskSwitchContext>
	prvTaskExitError();
 8002b30:	f7ff ff22 	bl	8002978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	410fc271 	.word	0x410fc271
 8002b48:	410fc270 	.word	0x410fc270
 8002b4c:	e000e400 	.word	0xe000e400
 8002b50:	200001b0 	.word	0x200001b0
 8002b54:	200001b4 	.word	0x200001b4
 8002b58:	e000ed20 	.word	0xe000ed20
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	e000ef34 	.word	0xe000ef34

08002b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	607b      	str	r3, [r7, #4]
}
 8002b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <vPortEnterCritical+0x58>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10f      	bne.n	8002bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <vPortEnterCritical+0x5c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	603b      	str	r3, [r7, #0]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <vPortEnterCritical+0x4a>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <vPortExitCritical+0x50>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <vPortExitCritical+0x24>
	__asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	607b      	str	r3, [r7, #4]
}
 8002be4:	bf00      	nop
 8002be6:	e7fe      	b.n	8002be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <vPortExitCritical+0x50>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <vPortExitCritical+0x50>)
 8002bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <vPortExitCritical+0x50>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <vPortExitCritical+0x42>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c
	...

08002c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c20:	f3ef 8009 	mrs	r0, PSP
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <pxCurrentTCBConst>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f01e 0f10 	tst.w	lr, #16
 8002c30:	bf08      	it	eq
 8002c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c44:	f380 8811 	msr	BASEPRI, r0
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f7ff fce6 	bl	8002620 <vTaskSwitchContext>
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f380 8811 	msr	BASEPRI, r0
 8002c5c:	bc09      	pop	{r0, r3}
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	6808      	ldr	r0, [r1, #0]
 8002c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c66:	f01e 0f10 	tst.w	lr, #16
 8002c6a:	bf08      	it	eq
 8002c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c70:	f380 8809 	msr	PSP, r0
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	f3af 8000 	nop.w

08002c80 <pxCurrentTCBConst>:
 8002c80:	20000084 	.word	0x20000084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop

08002c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	607b      	str	r3, [r7, #4]
}
 8002ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ca2:	f7ff fc05 	bl	80024b0 <xTaskIncrementTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <SysTick_Handler+0x40>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f383 8811 	msr	BASEPRI, r3
}
 8002cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <vPortSetupTimerInterrupt+0x38>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <vPortSetupTimerInterrupt+0x3c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <vPortSetupTimerInterrupt+0x40>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <vPortSetupTimerInterrupt+0x44>)
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010
 8002d04:	e000e018 	.word	0xe000e018
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	10624dd3 	.word	0x10624dd3
 8002d10:	e000e014 	.word	0xe000e014

08002d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d24 <vPortEnableVFP+0x10>
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d1e:	6001      	str	r1, [r0, #0]
 8002d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d22:	bf00      	nop
 8002d24:	e000ed88 	.word	0xe000ed88

08002d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d34:	f7ff fb12 	bl	800235c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <pvPortMalloc+0x180>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d40:	f000 f920 	bl	8002f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <pvPortMalloc+0x184>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8093 	bne.w	8002e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01d      	beq.n	8002d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d58:	2208      	movs	r2, #8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	3308      	adds	r3, #8
 8002d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <pvPortMalloc+0x6c>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	617b      	str	r3, [r7, #20]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d06e      	beq.n	8002e78 <pvPortMalloc+0x150>
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <pvPortMalloc+0x188>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d869      	bhi.n	8002e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <pvPortMalloc+0x18c>)
 8002da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <pvPortMalloc+0x18c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dae:	e004      	b.n	8002dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d903      	bls.n	8002dcc <pvPortMalloc+0xa4>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f1      	bne.n	8002db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <pvPortMalloc+0x180>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d050      	beq.n	8002e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4413      	add	r3, r2
 8002dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	2308      	movs	r3, #8
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d91f      	bls.n	8002e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <pvPortMalloc+0xf8>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	613b      	str	r3, [r7, #16]
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e32:	69b8      	ldr	r0, [r7, #24]
 8002e34:	f000 f908 	bl	8003048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <pvPortMalloc+0x190>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d203      	bcs.n	8002e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <pvPortMalloc+0x188>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <pvPortMalloc+0x190>)
 8002e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <pvPortMalloc+0x184>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <pvPortMalloc+0x194>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <pvPortMalloc+0x194>)
 8002e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e78:	f7ff fa7e 	bl	8002378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <pvPortMalloc+0x174>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	60fb      	str	r3, [r7, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <pvPortMalloc+0x172>
	return pvReturn;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000dc0 	.word	0x20000dc0
 8002eac:	20000dd4 	.word	0x20000dd4
 8002eb0:	20000dc4 	.word	0x20000dc4
 8002eb4:	20000db8 	.word	0x20000db8
 8002eb8:	20000dc8 	.word	0x20000dc8
 8002ebc:	20000dcc 	.word	0x20000dcc

08002ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04d      	beq.n	8002f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	425b      	negs	r3, r3
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4413      	add	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <vPortFree+0xb8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <vPortFree+0x44>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60fb      	str	r3, [r7, #12]
}
 8002f00:	bf00      	nop
 8002f02:	e7fe      	b.n	8002f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <vPortFree+0x62>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	60bb      	str	r3, [r7, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <vPortFree+0xb8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01e      	beq.n	8002f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11a      	bne.n	8002f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <vPortFree+0xb8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f48:	f7ff fa08 	bl	800235c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <vPortFree+0xbc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <vPortFree+0xbc>)
 8002f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f5a:	6938      	ldr	r0, [r7, #16]
 8002f5c:	f000 f874 	bl	8003048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <vPortFree+0xc0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <vPortFree+0xc0>)
 8002f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002f6a:	f7ff fa05 	bl	8002378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000dd4 	.word	0x20000dd4
 8002f7c:	20000dc4 	.word	0x20000dc4
 8002f80:	20000dd0 	.word	0x20000dd0

08002f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <prvHeapInit+0xac>)
 8002f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <prvHeapInit+0xac>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <prvHeapInit+0xb0>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <prvHeapInit+0xb0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <prvHeapInit+0xb4>)
 8002fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <prvHeapInit+0xb4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <prvHeapInit+0xb4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <prvHeapInit+0xb4>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <prvHeapInit+0xb8>)
 8003012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <prvHeapInit+0xbc>)
 800301a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <prvHeapInit+0xc0>)
 800301e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200001b8 	.word	0x200001b8
 8003034:	20000db8 	.word	0x20000db8
 8003038:	20000dc0 	.word	0x20000dc0
 800303c:	20000dc8 	.word	0x20000dc8
 8003040:	20000dc4 	.word	0x20000dc4
 8003044:	20000dd4 	.word	0x20000dd4

08003048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <prvInsertBlockIntoFreeList+0xac>)
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e002      	b.n	800305c <prvInsertBlockIntoFreeList+0x14>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d8f7      	bhi.n	8003056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d108      	bne.n	800308a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d118      	bne.n	80030d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d00d      	beq.n	80030c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e008      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e003      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d002      	beq.n	80030e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000db8 	.word	0x20000db8
 80030f8:	20000dc0 	.word	0x20000dc0

080030fc <memset>:
 80030fc:	4402      	add	r2, r0
 80030fe:	4603      	mov	r3, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4d0d      	ldr	r5, [pc, #52]	; (8003144 <__libc_init_array+0x38>)
 8003110:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	2600      	movs	r6, #0
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	4d0b      	ldr	r5, [pc, #44]	; (800314c <__libc_init_array+0x40>)
 800311e:	4c0c      	ldr	r4, [pc, #48]	; (8003150 <__libc_init_array+0x44>)
 8003120:	f000 f818 	bl	8003154 <_init>
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	2600      	movs	r6, #0
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f855 3b04 	ldr.w	r3, [r5], #4
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f855 3b04 	ldr.w	r3, [r5], #4
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031cc 	.word	0x080031cc
 8003148:	080031cc 	.word	0x080031cc
 800314c:	080031cc 	.word	0x080031cc
 8003150:	080031d0 	.word	0x080031d0

08003154 <_init>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr

08003160 <_fini>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

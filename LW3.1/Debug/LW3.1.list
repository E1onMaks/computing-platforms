
LW3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004320  08004320  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004320  08004320  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f0c  20000060  08004388  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  08004388  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d2f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b48  00000000  00000000  00030e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d79  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000287c  00000000  00000000  00035851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124e3  00000000  00000000  000380cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcdf1  00000000  00000000  0004a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004be0  00000000  00000000  001473a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014bf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080042a0 	.word	0x080042a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080042a0 	.word	0x080042a0

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08c      	sub	sp, #48	; 0x30
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa3e 	bl	80006a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f841 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f88b 	bl	8000348 <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <main+0x78>)
 8000234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023c:	e883 0003 	stmia.w	r3, {r0, r1}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fe98 	bl	8001f7c <osMessageCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a13      	ldr	r2, [pc, #76]	; (800029c <main+0x7c>)
 8000250:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <main+0x80>)
 8000254:	f107 0414 	add.w	r4, r7, #20
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000262:	f107 0314 	add.w	r3, r7, #20
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fe60 	bl	8001f2e <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <main+0x88>)
 8000276:	463c      	mov	r4, r7
 8000278:	461d      	mov	r5, r3
 800027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027e:	682b      	ldr	r3, [r5, #0]
 8000280:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000282:	463b      	mov	r3, r7
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fe51 	bl	8001f2e <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <main+0x8c>)
 8000290:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000292:	f001 fe45 	bl	8001f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0x76>
 8000298:	080042b8 	.word	0x080042b8
 800029c:	20000084 	.word	0x20000084
 80002a0:	080042cc 	.word	0x080042cc
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	080042ec 	.word	0x080042ec
 80002ac:	20000080 	.word	0x20000080

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b094      	sub	sp, #80	; 0x50
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2238      	movs	r2, #56	; 0x38
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 ff04 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 fcb0 	bl	8000c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	2302      	movs	r3, #2
 80002da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2340      	movs	r3, #64	; 0x40
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002ee:	2304      	movs	r3, #4
 80002f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002f2:	2355      	movs	r3, #85	; 0x55
 80002f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fd4a 	bl	8000da0 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000312:	f000 f8d2 	bl	80004ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031a:	2303      	movs	r3, #3
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2104      	movs	r1, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f848 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800033a:	f000 f8be 	bl	80004ba <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3750      	adds	r7, #80	; 0x50
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_GPIO_Init+0x90>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x90>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	f003 0310 	and.w	r3, r3, #16
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2101      	movs	r1, #1
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <MX_GPIO_Init+0x94>)
 8000394:	f000 fc38 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	4619      	mov	r1, r3
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <MX_GPIO_Init+0x98>)
 80003ae:	f000 fa91 	bl	80008d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003be:	2303      	movs	r3, #3
 80003c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x94>)
 80003ca:	f000 fa83 	bl	80008d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48001000 	.word	0x48001000
 80003e0:	48000400 	.word	0x48000400

080003e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osEvent event = osMessageGet(myQueue01Handle, 10);
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <StartDefaultTask+0x3c>)
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	220a      	movs	r2, #10
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fe12 	bl	8002020 <osMessageGet>
    if(event.value.v == 2)
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d105      	bne.n	800040e <StartDefaultTask+0x2a>
    {
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <StartDefaultTask+0x40>)
 8000408:	f000 fbfe 	bl	8000c08 <HAL_GPIO_WritePin>
 800040c:	e7ee      	b.n	80003ec <StartDefaultTask+0x8>
    }
    else if(event.value.v == 1)
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d1eb      	bne.n	80003ec <StartDefaultTask+0x8>
    {
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <StartDefaultTask+0x40>)
 800041a:	f000 fbf5 	bl	8000c08 <HAL_GPIO_WritePin>
  {
 800041e:	e7e5      	b.n	80003ec <StartDefaultTask+0x8>
 8000420:	20000084 	.word	0x20000084
 8000424:	48001000 	.word	0x48001000

08000428 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  int count = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 8000434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000438:	4816      	ldr	r0, [pc, #88]	; (8000494 <StartTask02+0x6c>)
 800043a:	f000 fbcd 	bl	8000bd8 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f7      	bne.n	8000434 <StartTask02+0xc>
    {
      while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0);
 8000444:	bf00      	nop
 8000446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800044a:	4812      	ldr	r0, [pc, #72]	; (8000494 <StartTask02+0x6c>)
 800044c:	f000 fbc4 	bl	8000bd8 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f7      	beq.n	8000446 <StartTask02+0x1e>
      count = (count + 1) % 2;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	2b00      	cmp	r3, #0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	bfb8      	it	lt
 8000462:	425b      	neglt	r3, r3
 8000464:	60fb      	str	r3, [r7, #12]
      if(count == 0)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d107      	bne.n	800047c <StartTask02+0x54>
      {
        osMessagePut(myQueue01Handle, 1, 10);
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <StartTask02+0x70>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	220a      	movs	r2, #10
 8000472:	2101      	movs	r1, #1
 8000474:	4618      	mov	r0, r3
 8000476:	f001 fd93 	bl	8001fa0 <osMessagePut>
 800047a:	e7db      	b.n	8000434 <StartTask02+0xc>
      }
      else if(count == 1)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d1d8      	bne.n	8000434 <StartTask02+0xc>
      {
        osMessagePut(myQueue01Handle, 2, 10);
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <StartTask02+0x70>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	220a      	movs	r2, #10
 8000488:	2102      	movs	r1, #2
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fd88 	bl	8001fa0 <osMessagePut>
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 8000490:	e7d0      	b.n	8000434 <StartTask02+0xc>
 8000492:	bf00      	nop
 8000494:	48000400 	.word	0x48000400
 8000498:	20000084 	.word	0x20000084

0800049c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ac:	d101      	bne.n	80004b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ae:	f000 f913 	bl	80006d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004be:	b672      	cpsid	i
}
 80004c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <Error_Handler+0x8>

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_MspInit+0x50>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_MspInit+0x50>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x50>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x50>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <HAL_MspInit+0x50>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x50>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	210f      	movs	r1, #15
 80004fe:	f06f 0001 	mvn.w	r0, #1
 8000502:	f000 f9bf 	bl	8000884 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000506:	f000 fc3b 	bl	8000d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <HAL_InitTick+0xc8>)
 800052a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052c:	4a2c      	ldr	r2, [pc, #176]	; (80005e0 <HAL_InitTick+0xc8>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6593      	str	r3, [r2, #88]	; 0x58
 8000534:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <HAL_InitTick+0xc8>)
 8000536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000540:	f107 020c 	add.w	r2, r7, #12
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f001 f8fa 	bl	8001744 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000550:	f001 f8e2 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8000554:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <HAL_InitTick+0xcc>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0c9b      	lsrs	r3, r3, #18
 8000560:	3b01      	subs	r3, #1
 8000562:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <HAL_InitTick+0xd0>)
 8000566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_InitTick+0xd0>)
 800056e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000572:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_InitTick+0xd0>)
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_InitTick+0xd0>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <HAL_InitTick+0xd0>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000586:	4818      	ldr	r0, [pc, #96]	; (80005e8 <HAL_InitTick+0xd0>)
 8000588:	f001 f954 	bl	8001834 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000596:	2b00      	cmp	r3, #0
 8000598:	d11b      	bne.n	80005d2 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800059a:	4813      	ldr	r0, [pc, #76]	; (80005e8 <HAL_InitTick+0xd0>)
 800059c:	f001 f9ac 	bl	80018f8 <HAL_TIM_Base_Start_IT>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80005a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d111      	bne.n	80005d2 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005ae:	201c      	movs	r0, #28
 80005b0:	f000 f982 	bl	80008b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d808      	bhi.n	80005cc <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80005ba:	2200      	movs	r2, #0
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	201c      	movs	r0, #28
 80005c0:	f000 f960 	bl	8000884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_InitTick+0xd4>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	e002      	b.n	80005d2 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3730      	adds	r7, #48	; 0x30
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	431bde83 	.word	0x431bde83
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000004 	.word	0x20000004

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <TIM2_IRQHandler+0x10>)
 8000622:	f001 f9e1 	bl	80019e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000088 	.word	0x20000088

08000630 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <SystemInit+0x20>)
 8000636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <SystemInit+0x20>)
 800063c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff ffea 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	; (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f003 fd81 	bl	8004188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000686:	f7ff fdcb 	bl	8000220 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000698:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 800069c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006a0:	20000f6c 	.word	0x20000f6c

080006a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_2_IRQHandler>

080006a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f8dc 	bl	800086e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	200f      	movs	r0, #15
 80006b8:	f7ff ff2e 	bl	8000518 <HAL_InitTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e001      	b.n	80006cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c8:	f7ff fefc 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006cc:	79fb      	ldrb	r3, [r7, #7]

}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x1c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x20>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x1c>)
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	200000d4 	.word	0x200000d4
 80006f8:	20000008 	.word	0x20000008

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_GetTick+0x14>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	200000d4 	.word	0x200000d4

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <__NVIC_EnableIRQ+0x38>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff4c 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000892:	f7ff ff63 	bl	800075c <__NVIC_GetPriorityGrouping>
 8000896:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	6978      	ldr	r0, [r7, #20]
 800089e:	f7ff ffb3 	bl	8000808 <NVIC_EncodePriority>
 80008a2:	4602      	mov	r2, r0
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff82 	bl	80007b4 <__NVIC_SetPriority>
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff56 	bl	8000778 <__NVIC_EnableIRQ>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008e2:	e15a      	b.n	8000b9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	2101      	movs	r1, #1
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 814c 	beq.w	8000b94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0303 	and.w	r3, r3, #3
 8000904:	2b01      	cmp	r3, #1
 8000906:	d005      	beq.n	8000914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000910:	2b02      	cmp	r3, #2
 8000912:	d130      	bne.n	8000976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094a:	2201      	movs	r2, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	f003 0201 	and.w	r2, r3, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	2b03      	cmp	r3, #3
 8000980:	d017      	beq.n	80009b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d123      	bne.n	8000a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	08da      	lsrs	r2, r3, #3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3208      	adds	r2, #8
 80009c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	691a      	ldr	r2, [r3, #16]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	6939      	ldr	r1, [r7, #16]
 8000a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 0203 	and.w	r2, r3, #3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 80a6 	beq.w	8000b94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <HAL_GPIO_Init+0x2e4>)
 8000a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4c:	4a5a      	ldr	r2, [pc, #360]	; (8000bb8 <HAL_GPIO_Init+0x2e4>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6613      	str	r3, [r2, #96]	; 0x60
 8000a54:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <HAL_GPIO_Init+0x2e4>)
 8000a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a60:	4a56      	ldr	r2, [pc, #344]	; (8000bbc <HAL_GPIO_Init+0x2e8>)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	3302      	adds	r3, #2
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	220f      	movs	r2, #15
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a8a:	d01f      	beq.n	8000acc <HAL_GPIO_Init+0x1f8>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x2ec>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d019      	beq.n	8000ac8 <HAL_GPIO_Init+0x1f4>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x2f0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1f0>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x2f4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1ec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_GPIO_Init+0x2f8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1e8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x2fc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1e4>
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	e00a      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000ab8:	2306      	movs	r3, #6
 8000aba:	e008      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x1fa>
 8000acc:	2300      	movs	r3, #0
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ade:	4937      	ldr	r1, [pc, #220]	; (8000bbc <HAL_GPIO_Init+0x2e8>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b10:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b3a:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_GPIO_Init+0x300>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f ae9d 	bne.w	80008e4 <HAL_GPIO_Init+0x10>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48001000 	.word	0x48001000
 8000bd0:	48001400 	.word	0x48001400
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c24:	e002      	b.n	8000c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d141      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c52:	d131      	bne.n	8000cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c5a:	4a46      	ldr	r2, [pc, #280]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c6c:	4a41      	ldr	r2, [pc, #260]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2232      	movs	r2, #50	; 0x32
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	0c9b      	lsrs	r3, r3, #18
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c8a:	e002      	b.n	8000c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9e:	d102      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f2      	bne.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb2:	d158      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e057      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000cc8:	e04d      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cd0:	d141      	bne.n	8000d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cde:	d131      	bne.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2232      	movs	r2, #50	; 0x32
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d16:	e002      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2a:	d102      	bne.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f2      	bne.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3e:	d112      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e011      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d54:	e007      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40007000 	.word	0x40007000
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6093      	str	r3, [r2, #8]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40007000 	.word	0x40007000

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e2fe      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d075      	beq.n	8000eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbe:	4b97      	ldr	r3, [pc, #604]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc8:	4b94      	ldr	r3, [pc, #592]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x3e>
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d002      	beq.n	8000de4 <HAL_RCC_OscConfig+0x44>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d10b      	bne.n	8000dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4b8d      	ldr	r3, [pc, #564]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d05b      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x108>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d157      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e2d9      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x74>
 8000e06:	4b85      	ldr	r3, [pc, #532]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a84      	ldr	r2, [pc, #528]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7b      	ldr	r2, [pc, #492]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e38:	4b78      	ldr	r3, [pc, #480]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a77      	ldr	r2, [pc, #476]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b75      	ldr	r3, [pc, #468]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a74      	ldr	r2, [pc, #464]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc50 	bl	80006fc <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc4c 	bl	80006fc <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e29e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e72:	4b6a      	ldr	r3, [pc, #424]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc3c 	bl	80006fc <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc38 	bl	80006fc <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	; 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e28a      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	4b60      	ldr	r3, [pc, #384]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xe8>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x136>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_OscConfig+0x13c>
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d11f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000edc:	4b4f      	ldr	r3, [pc, #316]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x154>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e25d      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	4946      	ldr	r1, [pc, #280]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f08:	4b45      	ldr	r3, [pc, #276]	; (8001020 <HAL_RCC_OscConfig+0x280>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb03 	bl	8000518 <HAL_InitTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d043      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e249      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fbe4 	bl	80006fc <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbe0 	bl	80006fc <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e232      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	492d      	ldr	r1, [pc, #180]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e01a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2a      	ldr	r2, [pc, #168]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fbc0 	bl	80006fc <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbbc 	bl	80006fc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e20e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1e0>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d041      	beq.n	8001032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fb99 	bl	80006fc <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fce:	f7ff fb95 	bl	80006fc <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1e7      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ef      	beq.n	8000fce <HAL_RCC_OscConfig+0x22e>
 8000fee:	e020      	b.n	8001032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fb7c 	bl	80006fc <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001006:	e00d      	b.n	8001024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fb78 	bl	80006fc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d906      	bls.n	8001024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ca      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001024:	4b8c      	ldr	r3, [pc, #560]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1ea      	bne.n	8001008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a6 	beq.w	800118c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001044:	4b84      	ldr	r3, [pc, #528]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x2b4>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x2b6>
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a7e      	ldr	r2, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b7c      	ldr	r3, [pc, #496]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001076:	4b79      	ldr	r3, [pc, #484]	; (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a75      	ldr	r2, [pc, #468]	; (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb35 	bl	80006fc <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fb31 	bl	80006fc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e183      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b6c      	ldr	r3, [pc, #432]	; (800125c <HAL_RCC_OscConfig+0x4bc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_RCC_OscConfig+0x32e>
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c2:	4a65      	ldr	r2, [pc, #404]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010cc:	e024      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d110      	bne.n	80010f8 <HAL_RCC_OscConfig+0x358>
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010dc:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010fe:	4a56      	ldr	r2, [pc, #344]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110e:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d016      	beq.n	800114e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff faec 	bl	80006fc <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff fae8 	bl	80006fc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	; 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e138      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	4b46      	ldr	r3, [pc, #280]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ed      	beq.n	8001128 <HAL_RCC_OscConfig+0x388>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114e:	f7ff fad5 	bl	80006fc <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fad1 	bl	80006fc <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e121      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ed      	bne.n	8001156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a34      	ldr	r2, [pc, #208]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	2b00      	cmp	r3, #0
 8001196:	d03c      	beq.n	8001212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01c      	beq.n	80011da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff faa4 	bl	80006fc <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b8:	f7ff faa0 	bl	80006fc <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0f2      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <HAL_RCC_OscConfig+0x418>
 80011d8:	e01b      	b.n	8001212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa87 	bl	80006fc <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fa83 	bl	80006fc <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0d5      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ef      	bne.n	80011f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80c9 	beq.w	80013ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b0c      	cmp	r3, #12
 8001226:	f000 8083 	beq.w	8001330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d15e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fa5d 	bl	80006fc <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	e00c      	b.n	8001260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fa59 	bl	80006fc <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d905      	bls.n	8001260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0ab      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ec      	bne.n	8001246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_RCC_OscConfig+0x61c>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6a11      	ldr	r1, [r2, #32]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800127c:	3a01      	subs	r2, #1
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	3a01      	subs	r2, #1
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	4311      	orrs	r1, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	3a01      	subs	r2, #1
 800129e:	0652      	lsls	r2, r2, #25
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012a6:	06d2      	lsls	r2, r2, #27
 80012a8:	430a      	orrs	r2, r1
 80012aa:	4943      	ldr	r1, [pc, #268]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a3d      	ldr	r2, [pc, #244]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa18 	bl	80006fc <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa14 	bl	80006fc <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e066      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x530>
 80012ee:	e05e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff f9fe 	bl	80006fc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff f9fa 	bl	80006fc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04c      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4924      	ldr	r1, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_RCC_OscConfig+0x620>)
 800132a:	4013      	ands	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
 800132e:	e03e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e039      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_RCC_OscConfig+0x618>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	d12c      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d123      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d11b      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d113      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	019f800c 	.word	0x019f800c
 80013c0:	feeefffc 	.word	0xfeeefffc

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e11e      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b91      	ldr	r3, [pc, #580]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 020f 	bic.w	r2, r3, #15
 80013f2:	498c      	ldr	r1, [pc, #560]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b8a      	ldr	r3, [pc, #552]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e106      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d073      	beq.n	8001500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d129      	bne.n	8001474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001420:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0f4      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001430:	f000 f9ba 	bl	80017a8 <RCC_GetSysClockFreqFromPLLSource>
 8001434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4a7c      	ldr	r2, [pc, #496]	; (800162c <HAL_RCC_ClockConfig+0x268>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d93f      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800143e:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001452:	2b00      	cmp	r3, #0
 8001454:	d033      	beq.n	80014be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12f      	bne.n	80014be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001466:	4a70      	ldr	r2, [pc, #448]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e024      	b.n	80014be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d107      	bne.n	800148c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0c6      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0be      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800149c:	f000 f8ce 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4a61      	ldr	r2, [pc, #388]	; (800162c <HAL_RCC_ClockConfig+0x268>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d909      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4957      	ldr	r1, [pc, #348]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d0:	f7ff f914 	bl	80006fc <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff f910 	bl	80006fc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e095      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001538:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800153a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800153e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
 8001552:	e008      	b.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d105      	bne.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d21d      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 020f 	bic.w	r2, r3, #15
 800157c:	4929      	ldr	r1, [pc, #164]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001584:	f7ff f8ba 	bl	80006fc <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f8b6 	bl	80006fc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e03b      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1ed      	bne.n	800158c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4917      	ldr	r1, [pc, #92]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490f      	ldr	r1, [pc, #60]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 f825 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	490c      	ldr	r1, [pc, #48]	; (8001630 <HAL_RCC_ClockConfig+0x26c>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x270>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x274>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff80 	bl	8000518 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	40021000 	.word	0x40021000
 800162c:	04c4b400 	.word	0x04c4b400
 8001630:	08004308 	.word	0x08004308
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d102      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e047      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d102      	bne.n	8001666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e03e      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d136      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3301      	adds	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	68d2      	ldr	r2, [r2, #12]
 800169c:	0a12      	lsrs	r2, r2, #8
 800169e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
      break;
 80016a8:	e00c      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b4:	68d2      	ldr	r2, [r2, #12]
 80016b6:	0a12      	lsrs	r2, r2, #8
 80016b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
      break;
 80016c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0e5b      	lsrs	r3, r3, #25
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	3301      	adds	r3, #1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e001      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016e4:	693b      	ldr	r3, [r7, #16]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200

08001700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_GetHCLKFreq+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800171c:	f7ff fff0 	bl	8001700 <HAL_RCC_GetHCLKFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4904      	ldr	r1, [pc, #16]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	08004318 	.word	0x08004318

08001744 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	220f      	movs	r2, #15
 8001752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0203 	and.w	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_GetClockConfig+0x5c>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_RCC_GetClockConfig+0x60>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 020f 	and.w	r2, r3, #15
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	601a      	str	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40022000 	.word	0x40022000

080017a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d10c      	bne.n	80017e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017d6:	68d2      	ldr	r2, [r2, #12]
 80017d8:	0a12      	lsrs	r2, r2, #8
 80017da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
    break;
 80017e4:	e00c      	b.n	8001800 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017f0:	68d2      	ldr	r2, [r2, #12]
 80017f2:	0a12      	lsrs	r2, r2, #8
 80017f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    break;
 80017fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0e5b      	lsrs	r3, r3, #25
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	3301      	adds	r3, #1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200
 8001830:	00f42400 	.word	0x00f42400

08001834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e049      	b.n	80018da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f841 	bl	80018e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3304      	adds	r3, #4
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f000 fa30 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d001      	beq.n	8001910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e054      	b.n	80019ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d01d      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_TIM_Base_Start_IT+0xd4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_TIM_Base_Start_IT+0xe4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x80>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d115      	bne.n	80019a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_TIM_Base_Start_IT+0xec>)
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b06      	cmp	r3, #6
 8001988:	d015      	beq.n	80019b6 <HAL_TIM_Base_Start_IT+0xbe>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d011      	beq.n	80019b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a2:	e008      	b.n	80019b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e000      	b.n	80019b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40000800 	.word	0x40000800
 80019d4:	40000c00 	.word	0x40000c00
 80019d8:	40013400 	.word	0x40013400
 80019dc:	40014000 	.word	0x40014000
 80019e0:	40015000 	.word	0x40015000
 80019e4:	00010007 	.word	0x00010007

080019e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d020      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0202 	mvn.w	r2, #2
 8001a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f931 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001a38:	e005      	b.n	8001a46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f923 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f934 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0204 	mvn.w	r2, #4
 8001a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f90b 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001a84:	e005      	b.n	8001a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8fd 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f90e 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d020      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0208 	mvn.w	r2, #8
 8001ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8e5 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8d7 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8e8 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d020      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01b      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0210 	mvn.w	r2, #16
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2208      	movs	r2, #8
 8001b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8bf 	bl	8001c9a <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8b1 	bl	8001c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8c2 	bl	8001cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0201 	mvn.w	r2, #1
 8001b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fca4 	bl	800049c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00c      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8001b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f969 	bl	8001e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f961 	bl	8001e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00c      	beq.n	8001bca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f87c 	bl	8001cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00c      	beq.n	8001bee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0220 	mvn.w	r2, #32
 8001be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f929 	bl	8001e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f935 	bl	8001e7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f92d 	bl	8001e90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00c      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f925 	bl	8001ea4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f91d 	bl	8001eb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <TIM_Base_SetConfig+0x144>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d017      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d013      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <TIM_Base_SetConfig+0x148>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <TIM_Base_SetConfig+0x14c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <TIM_Base_SetConfig+0x150>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a46      	ldr	r2, [pc, #280]	; (8001e2c <TIM_Base_SetConfig+0x154>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x48>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a45      	ldr	r2, [pc, #276]	; (8001e30 <TIM_Base_SetConfig+0x158>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <TIM_Base_SetConfig+0x144>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d023      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d01f      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a36      	ldr	r2, [pc, #216]	; (8001e20 <TIM_Base_SetConfig+0x148>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01b      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <TIM_Base_SetConfig+0x14c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d017      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a34      	ldr	r2, [pc, #208]	; (8001e28 <TIM_Base_SetConfig+0x150>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <TIM_Base_SetConfig+0x154>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00f      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <TIM_Base_SetConfig+0x15c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00b      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <TIM_Base_SetConfig+0x160>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <TIM_Base_SetConfig+0x164>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d003      	beq.n	8001d82 <TIM_Base_SetConfig+0xaa>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <TIM_Base_SetConfig+0x158>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d108      	bne.n	8001d94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <TIM_Base_SetConfig+0x144>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <TIM_Base_SetConfig+0x110>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <TIM_Base_SetConfig+0x154>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00f      	beq.n	8001de8 <TIM_Base_SetConfig+0x110>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <TIM_Base_SetConfig+0x15c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00b      	beq.n	8001de8 <TIM_Base_SetConfig+0x110>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <TIM_Base_SetConfig+0x160>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <TIM_Base_SetConfig+0x110>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <TIM_Base_SetConfig+0x164>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0x110>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <TIM_Base_SetConfig+0x158>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f023 0201 	bic.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	40015000 	.word	0x40015000
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800

08001e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	2b84      	cmp	r3, #132	; 0x84
 8001ee0:	d005      	beq.n	8001eee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3303      	adds	r3, #3
 8001eec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f02:	f3ef 8305 	mrs	r3, IPSR
 8001f06:	607b      	str	r3, [r7, #4]
  return(result);
 8001f08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f24:	f000 ffb6 	bl	8002e94 <vTaskStartScheduler>
  
  return osOK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f30:	b087      	sub	sp, #28
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685c      	ldr	r4, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f44:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ffbd 	bl	8001ecc <makeFreeRtosPriority>
 8001f52:	4602      	mov	r2, r0
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4632      	mov	r2, r6
 8001f60:	4629      	mov	r1, r5
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 fe4c 	bl	8002c00 <xTaskCreate>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	f000 f9d5 	bl	8002340 <xQueueGenericCreate>
 8001f96:	4603      	mov	r3, r0
#endif
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <osMessagePut+0x1e>
    ticks = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001fbe:	f7ff ff9d 	bl	8001efc <inHandlerMode>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d018      	beq.n	8001ffa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001fc8:	f107 0210 	add.w	r2, r7, #16
 8001fcc:	f107 0108 	add.w	r1, r7, #8
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fb08 	bl	80025e8 <xQueueGenericSendFromISR>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <osMessagePut+0x42>
      return osErrorOS;
 8001fde:	23ff      	movs	r3, #255	; 0xff
 8001fe0:	e018      	b.n	8002014 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d014      	beq.n	8002012 <osMessagePut+0x72>
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <osMessagePut+0x7c>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	e00b      	b.n	8002012 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001ffa:	f107 0108 	add.w	r1, r7, #8
 8001ffe:	2300      	movs	r3, #0
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f9f2 	bl	80023ec <xQueueGenericSend>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <osMessagePut+0x72>
      return osErrorOS;
 800200e:	23ff      	movs	r3, #255	; 0xff
 8002010:	e000      	b.n	8002014 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b08b      	sub	sp, #44	; 0x2c
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	617b      	str	r3, [r7, #20]
    return event;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	461c      	mov	r4, r3
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800204a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800204e:	e054      	b.n	80020fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d103      	bne.n	8002068 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e009      	b.n	800207c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <osMessageGet+0x5c>
      ticks = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800207c:	f7ff ff3e 	bl	8001efc <inHandlerMode>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002086:	f107 0220 	add.w	r2, r7, #32
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	3304      	adds	r3, #4
 8002090:	4619      	mov	r1, r3
 8002092:	68b8      	ldr	r0, [r7, #8]
 8002094:	f000 fc24 	bl	80028e0 <xQueueReceiveFromISR>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800209e:	2310      	movs	r3, #16
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e001      	b.n	80020a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01d      	beq.n	80020ea <osMessageGet+0xca>
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <osMessageGet+0xe4>)
 80020b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	e014      	b.n	80020ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	3304      	adds	r3, #4
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	f000 fb28 	bl	8002720 <xQueueReceive>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80020d6:	2310      	movs	r3, #16
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e006      	b.n	80020ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <osMessageGet+0xc6>
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <osMessageGet+0xc8>
 80020e6:	2340      	movs	r3, #64	; 0x40
 80020e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	461c      	mov	r4, r3
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	372c      	adds	r7, #44	; 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	bf00      	nop
 8002104:	e000ed04 	.word	0xe000ed04

08002108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0208 	add.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0208 	add.w	r2, r3, #8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0208 	add.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d103      	bne.n	80021ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e00c      	b.n	80021e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3308      	adds	r3, #8
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e002      	b.n	80021d8 <vListInsert+0x2e>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d2f6      	bcs.n	80021d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6852      	ldr	r2, [r2, #4]
 800223c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d103      	bne.n	8002250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1e5a      	subs	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800229a:	f001 fc0b 	bl	8003ab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	3b01      	subs	r3, #1
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	441a      	add	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	22ff      	movs	r2, #255	; 0xff
 80022e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d114      	bne.n	800231a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01a      	beq.n	800232e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3310      	adds	r3, #16
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 f801 	bl	8003304 <xTaskRemoveFromEventList>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <xQueueGenericReset+0xcc>)
 800230a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	e009      	b.n	800232e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3310      	adds	r3, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fef2 	bl	8002108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3324      	adds	r3, #36	; 0x24
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff feed 	bl	8002108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800232e:	f001 fbf1 	bl	8003b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	613b      	str	r3, [r7, #16]
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3348      	adds	r3, #72	; 0x48
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fcbd 	bl	8003cf8 <pvPortMalloc>
 800237e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3348      	adds	r3, #72	; 0x48
 800238e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f805 	bl	80023ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023a2:	69bb      	ldr	r3, [r7, #24]
	}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e002      	b.n	80023ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023da:	2101      	movs	r1, #1
 80023dc:	69b8      	ldr	r0, [r7, #24]
 80023de:	f7ff ff47 	bl	8002270 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <xQueueGenericSend+0x32>
	__asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800241a:	bf00      	nop
 800241c:	e7fe      	b.n	800241c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <xQueueGenericSend+0x40>
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <xQueueGenericSend+0x44>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <xQueueGenericSend+0x46>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <xQueueGenericSend+0x60>
	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d103      	bne.n	800245a <xQueueGenericSend+0x6e>
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <xQueueGenericSend+0x72>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <xQueueGenericSend+0x74>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <xQueueGenericSend+0x8e>
	__asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	623b      	str	r3, [r7, #32]
}
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800247a:	f001 f8e5 	bl	8003648 <xTaskGetSchedulerState>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <xQueueGenericSend+0x9e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <xQueueGenericSend+0xa2>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueGenericSend+0xa4>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	61fb      	str	r3, [r7, #28]
}
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024aa:	f001 fb03 	bl	8003ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <xQueueGenericSend+0xd4>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d129      	bne.n	8002514 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c6:	f000 fa8b 	bl	80029e0 <prvCopyDataToQueue>
 80024ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3324      	adds	r3, #36	; 0x24
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 ff13 	bl	8003304 <xTaskRemoveFromEventList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <xQueueGenericSend+0x1f8>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	e00a      	b.n	800250c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <xQueueGenericSend+0x1f8>)
 80024fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800250c:	f001 fb02 	bl	8003b14 <vPortExitCritical>
				return pdPASS;
 8002510:	2301      	movs	r3, #1
 8002512:	e063      	b.n	80025dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800251a:	f001 fafb 	bl	8003b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800251e:	2300      	movs	r3, #0
 8002520:	e05c      	b.n	80025dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4618      	mov	r0, r3
 800252e:	f000 ff4b 	bl	80033c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002532:	2301      	movs	r3, #1
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002536:	f001 faed 	bl	8003b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800253a:	f000 fcfb 	bl	8002f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800253e:	f001 fab9 	bl	8003ab4 <vPortEnterCritical>
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002548:	b25b      	sxtb	r3, r3
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d103      	bne.n	8002558 <xQueueGenericSend+0x16c>
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d103      	bne.n	800256e <xQueueGenericSend+0x182>
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800256e:	f001 fad1 	bl	8003b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002572:	1d3a      	adds	r2, r7, #4
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 ff3a 	bl	80033f4 <xTaskCheckForTimeOut>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d124      	bne.n	80025d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002588:	f000 fb22 	bl	8002bd0 <prvIsQueueFull>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	3310      	adds	r3, #16
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fe8e 	bl	80032bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a2:	f000 faad 	bl	8002b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025a6:	f000 fcd3 	bl	8002f50 <xTaskResumeAll>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f af7c 	bne.w	80024aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <xQueueGenericSend+0x1f8>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	e772      	b.n	80024aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c6:	f000 fa9b 	bl	8002b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ca:	f000 fcc1 	bl	8002f50 <xTaskResumeAll>
 80025ce:	e76c      	b.n	80024aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d2:	f000 fa95 	bl	8002b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025d6:	f000 fcbb 	bl	8002f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3738      	adds	r7, #56	; 0x38
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b090      	sub	sp, #64	; 0x40
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <xQueueGenericSendFromISR+0x3c>
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <xQueueGenericSendFromISR+0x40>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <xQueueGenericSendFromISR+0x42>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d103      	bne.n	8002652 <xQueueGenericSendFromISR+0x6a>
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <xQueueGenericSendFromISR+0x6e>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueGenericSendFromISR+0x70>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	623b      	str	r3, [r7, #32]
}
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002672:	f001 fb01 	bl	8003c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002676:	f3ef 8211 	mrs	r2, BASEPRI
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800268e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <xQueueGenericSendFromISR+0xbc>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d12f      	bne.n	8002704 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026ba:	f000 f991 	bl	80029e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d112      	bne.n	80026ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fe15 	bl	8003304 <xTaskRemoveFromEventList>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	b25a      	sxtb	r2, r3
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026fe:	2301      	movs	r3, #1
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002702:	e001      	b.n	8002708 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002704:	2300      	movs	r3, #0
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002712:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002716:	4618      	mov	r0, r3
 8002718:	3740      	adds	r7, #64	; 0x40
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <xQueueReceive+0x30>
	__asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	623b      	str	r3, [r7, #32]
}
 800274c:	bf00      	nop
 800274e:	e7fe      	b.n	800274e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <xQueueReceive+0x3e>
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <xQueueReceive+0x42>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <xQueueReceive+0x44>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueReceive+0x5e>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61fb      	str	r3, [r7, #28]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800277e:	f000 ff63 	bl	8003648 <xTaskGetSchedulerState>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <xQueueReceive+0x6e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <xQueueReceive+0x72>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueReceive+0x74>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xQueueReceive+0x8e>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	61bb      	str	r3, [r7, #24]
}
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027ae:	f001 f981 	bl	8003ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01f      	beq.n	80027fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c2:	f000 f977 	bl	8002ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00f      	beq.n	80027f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	3310      	adds	r3, #16
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd92 	bl	8003304 <xTaskRemoveFromEventList>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <xQueueReceive+0x1bc>)
 80027e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027f6:	f001 f98d 	bl	8003b14 <vPortExitCritical>
				return pdPASS;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e069      	b.n	80028d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002804:	f001 f986 	bl	8003b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002808:	2300      	movs	r3, #0
 800280a:	e062      	b.n	80028d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fdd6 	bl	80033c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002820:	f001 f978 	bl	8003b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002824:	f000 fb86 	bl	8002f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002828:	f001 f944 	bl	8003ab4 <vPortEnterCritical>
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0x122>
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002848:	b25b      	sxtb	r3, r3
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d103      	bne.n	8002858 <xQueueReceive+0x138>
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002858:	f001 f95c 	bl	8003b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800285c:	1d3a      	adds	r2, r7, #4
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fdc5 	bl	80033f4 <xTaskCheckForTimeOut>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d123      	bne.n	80028b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002872:	f000 f997 	bl	8002ba4 <prvIsQueueEmpty>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd19 	bl	80032bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800288a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288c:	f000 f938 	bl	8002b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002890:	f000 fb5e 	bl	8002f50 <xTaskResumeAll>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d189      	bne.n	80027ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <xQueueReceive+0x1bc>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	e780      	b.n	80027ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ae:	f000 f927 	bl	8002b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028b2:	f000 fb4d 	bl	8002f50 <xTaskResumeAll>
 80028b6:	e77a      	b.n	80027ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ba:	f000 f921 	bl	8002b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028be:	f000 fb47 	bl	8002f50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c4:	f000 f96e 	bl	8002ba4 <prvIsQueueEmpty>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f43f af6f 	beq.w	80027ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3730      	adds	r7, #48	; 0x30
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	623b      	str	r3, [r7, #32]
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <xQueueReceiveFromISR+0x3a>
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueReceiveFromISR+0x3e>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueReceiveFromISR+0x40>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	61fb      	str	r3, [r7, #28]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800293a:	f001 f99d 	bl	8003c78 <vPortValidateInterruptPriority>
	__asm volatile
 800293e:	f3ef 8211 	mrs	r2, BASEPRI
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	61ba      	str	r2, [r7, #24]
 8002954:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002956:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d02f      	beq.n	80029c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800296c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002974:	f000 f89e 	bl	8002ab4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	1e5a      	subs	r2, r3, #1
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d112      	bne.n	80029b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	3310      	adds	r3, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fcb4 	bl	8003304 <xTaskRemoveFromEventList>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80029c0:	2301      	movs	r3, #1
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
 80029c4:	e001      	b.n	80029ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f383 8811 	msr	BASEPRI, r3
}
 80029d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3738      	adds	r7, #56	; 0x38
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d14d      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fe3a 	bl	8003684 <xTaskPriorityDisinherit>
 8002a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e043      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d119      	bne.n	8002a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6858      	ldr	r0, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	f001 fbd2 	bl	80041d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	441a      	add	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d32b      	bcc.n	8002aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e026      	b.n	8002aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68d8      	ldr	r0, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	f001 fbb8 	bl	80041d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	425b      	negs	r3, r3
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d105      	bne.n	8002aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aaa:	697b      	ldr	r3, [r7, #20]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d018      	beq.n	8002af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	441a      	add	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d303      	bcc.n	8002ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68d9      	ldr	r1, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	461a      	mov	r2, r3
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f001 fb6e 	bl	80041d4 <memcpy>
	}
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b08:	f000 ffd4 	bl	8003ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b14:	e011      	b.n	8002b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fbee 	bl	8003304 <xTaskRemoveFromEventList>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b2e:	f000 fcc3 	bl	80034b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dce9      	bgt.n	8002b16 <prvUnlockQueue+0x16>
 8002b42:	e000      	b.n	8002b46 <prvUnlockQueue+0x46>
					break;
 8002b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b4e:	f000 ffe1 	bl	8003b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b52:	f000 ffaf 	bl	8003ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5e:	e011      	b.n	8002b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fbc9 	bl	8003304 <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b78:	f000 fc9e 	bl	80034b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dce9      	bgt.n	8002b60 <prvUnlockQueue+0x60>
 8002b8c:	e000      	b.n	8002b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b98:	f000 ffbc 	bl	8003b14 <vPortExitCritical>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bac:	f000 ff82 	bl	8003ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bc2:	f000 ffa7 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bd8:	f000 ff6c 	bl	8003ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d102      	bne.n	8002bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e001      	b.n	8002bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bf2:	f000 ff8f 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af04      	add	r7, sp, #16
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f86f 	bl	8003cf8 <pvPortMalloc>
 8002c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c22:	20a0      	movs	r0, #160	; 0xa0
 8002c24:	f001 f868 	bl	8003cf8 <pvPortMalloc>
 8002c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	e005      	b.n	8002c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f001 f929 	bl	8003e90 <vPortFree>
 8002c3e:	e001      	b.n	8002c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d013      	beq.n	8002c72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f80f 	bl	8002c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c66:	69f8      	ldr	r0, [r7, #28]
 8002c68:	f000 f8aa 	bl	8002dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e002      	b.n	8002c78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c78:	69bb      	ldr	r3, [r7, #24]
	}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <prvInitialiseNewTask+0x48>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	617b      	str	r3, [r7, #20]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01f      	beq.n	8002d12 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e012      	b.n	8002cfe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	7819      	ldrb	r1, [r3, #0]
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3334      	adds	r3, #52	; 0x34
 8002ce8:	460a      	mov	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d9e9      	bls.n	8002cd8 <prvInitialiseNewTask+0x54>
 8002d04:	e000      	b.n	8002d08 <prvInitialiseNewTask+0x84>
			{
				break;
 8002d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	e003      	b.n	8002d1a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d901      	bls.n	8002d24 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d20:	2306      	movs	r3, #6
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	2200      	movs	r2, #0
 8002d34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fa04 	bl	8002148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	3318      	adds	r3, #24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f9ff 	bl	8002148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	f1c3 0207 	rsb	r2, r3, #7
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	334c      	adds	r3, #76	; 0x4c
 8002d74:	224c      	movs	r2, #76	; 0x4c
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f9a7 	bl	80040cc <memset>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <prvInitialiseNewTask+0x130>)
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <prvInitialiseNewTask+0x134>)
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <prvInitialiseNewTask+0x138>)
 8002d8e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	69b8      	ldr	r0, [r7, #24]
 8002d96:	f000 fd61 	bl	800385c <pxPortInitialiseStack>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000e2c 	.word	0x20000e2c
 8002db8:	20000e94 	.word	0x20000e94
 8002dbc:	20000efc 	.word	0x20000efc

08002dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dc8:	f000 fe74 	bl	8003ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002dd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <prvAddNewTaskToReadyList+0xb8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d110      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dec:	f000 fb88 	bl	8003500 <prvInitialiseTaskLists>
 8002df0:	e00d      	b.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <prvAddNewTaskToReadyList+0xc0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d802      	bhi.n	8002e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <prvAddNewTaskToReadyList+0xc4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <prvAddNewTaskToReadyList+0xc4>)
 8002e16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <prvAddNewTaskToReadyList+0xc8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <prvAddNewTaskToReadyList+0xc8>)
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <prvAddNewTaskToReadyList+0xcc>)
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f7ff f98e 	bl	8002162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e46:	f000 fe65 	bl	8003b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <prvAddNewTaskToReadyList+0xc0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <prvAddNewTaskToReadyList+0xbc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <prvAddNewTaskToReadyList+0xd0>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200001d8 	.word	0x200001d8
 8002e7c:	200000d8 	.word	0x200000d8
 8002e80:	200001e4 	.word	0x200001e4
 8002e84:	200001f4 	.word	0x200001f4
 8002e88:	200001e0 	.word	0x200001e0
 8002e8c:	200000dc 	.word	0x200000dc
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <vTaskStartScheduler+0x80>)
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	491c      	ldr	r1, [pc, #112]	; (8002f18 <vTaskStartScheduler+0x84>)
 8002ea8:	481c      	ldr	r0, [pc, #112]	; (8002f1c <vTaskStartScheduler+0x88>)
 8002eaa:	f7ff fea9 	bl	8002c00 <xTaskCreate>
 8002eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d11b      	bne.n	8002eee <vTaskStartScheduler+0x5a>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	60bb      	str	r3, [r7, #8]
}
 8002ec8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <vTaskStartScheduler+0x8c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	334c      	adds	r3, #76	; 0x4c
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <vTaskStartScheduler+0x90>)
 8002ed2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <vTaskStartScheduler+0x94>)
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <vTaskStartScheduler+0x98>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <vTaskStartScheduler+0x9c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ee8:	f000 fd42 	bl	8003970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002eec:	e00e      	b.n	8002f0c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d10a      	bne.n	8002f0c <vTaskStartScheduler+0x78>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	607b      	str	r3, [r7, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	e7fe      	b.n	8002f0a <vTaskStartScheduler+0x76>
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200001fc 	.word	0x200001fc
 8002f18:	08004300 	.word	0x08004300
 8002f1c:	080034d1 	.word	0x080034d1
 8002f20:	200000d8 	.word	0x200000d8
 8002f24:	2000005c 	.word	0x2000005c
 8002f28:	200001f8 	.word	0x200001f8
 8002f2c:	200001e4 	.word	0x200001e4
 8002f30:	200001dc 	.word	0x200001dc

08002f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20000200 	.word	0x20000200

08002f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <xTaskResumeAll+0x114>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <xTaskResumeAll+0x2c>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	603b      	str	r3, [r7, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f7c:	f000 fd9a 	bl	8003ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f80:	4b38      	ldr	r3, [pc, #224]	; (8003064 <xTaskResumeAll+0x114>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4a37      	ldr	r2, [pc, #220]	; (8003064 <xTaskResumeAll+0x114>)
 8002f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <xTaskResumeAll+0x114>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d161      	bne.n	8003056 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <xTaskResumeAll+0x118>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d05d      	beq.n	8003056 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9a:	e02e      	b.n	8002ffa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <xTaskResumeAll+0x11c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f937 	bl	800221c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f932 	bl	800221c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <xTaskResumeAll+0x124>)
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7ff f8be 	bl	8002162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <xTaskResumeAll+0x128>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <xTaskResumeAll+0x12c>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <xTaskResumeAll+0x11c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1cc      	bne.n	8002f9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003008:	f000 fafe 	bl	8003608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <xTaskResumeAll+0x130>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003018:	f000 f836 	bl	8003088 <xTaskIncrementTick>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <xTaskResumeAll+0x12c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f1      	bne.n	8003018 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <xTaskResumeAll+0x130>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <xTaskResumeAll+0x12c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003042:	2301      	movs	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <xTaskResumeAll+0x134>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003056:	f000 fd5d 	bl	8003b14 <vPortExitCritical>

	return xAlreadyYielded;
 800305a:	68bb      	ldr	r3, [r7, #8]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000200 	.word	0x20000200
 8003068:	200001d8 	.word	0x200001d8
 800306c:	20000198 	.word	0x20000198
 8003070:	200001e0 	.word	0x200001e0
 8003074:	200000dc 	.word	0x200000dc
 8003078:	200000d8 	.word	0x200000d8
 800307c:	200001ec 	.word	0x200001ec
 8003080:	200001e8 	.word	0x200001e8
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <xTaskIncrementTick+0x144>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 808e 	bne.w	80031b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <xTaskIncrementTick+0x148>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <xTaskIncrementTick+0x148>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d120      	bne.n	80030f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030b0:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	603b      	str	r3, [r7, #0]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskIncrementTick+0x46>
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <xTaskIncrementTick+0x150>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3e      	ldr	r2, [pc, #248]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4a3e      	ldr	r2, [pc, #248]	; (80031d8 <xTaskIncrementTick+0x150>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <xTaskIncrementTick+0x154>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <xTaskIncrementTick+0x154>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	f000 fa8b 	bl	8003608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <xTaskIncrementTick+0x158>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d348      	bcc.n	800318e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <xTaskIncrementTick+0x158>)
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	601a      	str	r2, [r3, #0]
					break;
 800310e:	e03e      	b.n	800318e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <xTaskIncrementTick+0x14c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d203      	bcs.n	8003130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <xTaskIncrementTick+0x158>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800312e:	e02e      	b.n	800318e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f871 	bl	800221c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3318      	adds	r3, #24
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f868 	bl	800221c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <xTaskIncrementTick+0x15c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <xTaskIncrementTick+0x15c>)
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <xTaskIncrementTick+0x160>)
 800316c:	441a      	add	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f7fe fff4 	bl	8002162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <xTaskIncrementTick+0x164>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d3b9      	bcc.n	80030fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318c:	e7b6      	b.n	80030fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <xTaskIncrementTick+0x164>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	4914      	ldr	r1, [pc, #80]	; (80031e8 <xTaskIncrementTick+0x160>)
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d901      	bls.n	80031aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <xTaskIncrementTick+0x168>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e004      	b.n	80031c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <xTaskIncrementTick+0x16c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <xTaskIncrementTick+0x16c>)
 80031c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000200 	.word	0x20000200
 80031d0:	200001dc 	.word	0x200001dc
 80031d4:	20000190 	.word	0x20000190
 80031d8:	20000194 	.word	0x20000194
 80031dc:	200001f0 	.word	0x200001f0
 80031e0:	200001f8 	.word	0x200001f8
 80031e4:	200001e0 	.word	0x200001e0
 80031e8:	200000dc 	.word	0x200000dc
 80031ec:	200000d8 	.word	0x200000d8
 80031f0:	200001ec 	.word	0x200001ec
 80031f4:	200001e8 	.word	0x200001e8

080031f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <vTaskSwitchContext+0xac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <vTaskSwitchContext+0xb0>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800320c:	e044      	b.n	8003298 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <vTaskSwitchContext+0xb0>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <vTaskSwitchContext+0xb4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f1c3 031f 	rsb	r3, r3, #31
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	4921      	ldr	r1, [pc, #132]	; (80032b0 <vTaskSwitchContext+0xb8>)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <vTaskSwitchContext+0x5c>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
 8003252:	e7fe      	b.n	8003252 <vTaskSwitchContext+0x5a>
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <vTaskSwitchContext+0xb8>)
 8003260:	4413      	add	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3308      	adds	r3, #8
 8003276:	429a      	cmp	r2, r3
 8003278:	d104      	bne.n	8003284 <vTaskSwitchContext+0x8c>
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <vTaskSwitchContext+0xbc>)
 800328c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <vTaskSwitchContext+0xbc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	334c      	adds	r3, #76	; 0x4c
 8003294:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <vTaskSwitchContext+0xc0>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000200 	.word	0x20000200
 80032a8:	200001ec 	.word	0x200001ec
 80032ac:	200001e0 	.word	0x200001e0
 80032b0:	200000dc 	.word	0x200000dc
 80032b4:	200000d8 	.word	0x200000d8
 80032b8:	2000005c 	.word	0x2000005c

080032bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	60fb      	str	r3, [r7, #12]
}
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <vTaskPlaceOnEventList+0x44>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3318      	adds	r3, #24
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe ff5d 	bl	80021aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032f0:	2101      	movs	r1, #1
 80032f2:	6838      	ldr	r0, [r7, #0]
 80032f4:	f000 fa4c 	bl	8003790 <prvAddCurrentTaskToDelayedList>
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200000d8 	.word	0x200000d8

08003304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60fb      	str	r3, [r7, #12]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3318      	adds	r3, #24
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ff71 	bl	800221c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <xTaskRemoveFromEventList+0xac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11c      	bne.n	800337c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	3304      	adds	r3, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff68 	bl	800221c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	2201      	movs	r2, #1
 8003352:	409a      	lsls	r2, r3
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <xTaskRemoveFromEventList+0xb0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <xTaskRemoveFromEventList+0xb0>)
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <xTaskRemoveFromEventList+0xb4>)
 800336c:	441a      	add	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3304      	adds	r3, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f7fe fef4 	bl	8002162 <vListInsertEnd>
 800337a:	e005      	b.n	8003388 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3318      	adds	r3, #24
 8003380:	4619      	mov	r1, r3
 8003382:	480e      	ldr	r0, [pc, #56]	; (80033bc <xTaskRemoveFromEventList+0xb8>)
 8003384:	f7fe feed 	bl	8002162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <xTaskRemoveFromEventList+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	429a      	cmp	r2, r3
 8003394:	d905      	bls.n	80033a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <xTaskRemoveFromEventList+0xc0>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e001      	b.n	80033a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80033a6:	697b      	ldr	r3, [r7, #20]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000200 	.word	0x20000200
 80033b4:	200001e0 	.word	0x200001e0
 80033b8:	200000dc 	.word	0x200000dc
 80033bc:	20000198 	.word	0x20000198
 80033c0:	200000d8 	.word	0x200000d8
 80033c4:	200001ec 	.word	0x200001ec

080033c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <vTaskInternalSetTimeOutState+0x24>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <vTaskInternalSetTimeOutState+0x28>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	200001f0 	.word	0x200001f0
 80033f0:	200001dc 	.word	0x200001dc

080033f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	613b      	str	r3, [r7, #16]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	60fb      	str	r3, [r7, #12]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003436:	f000 fb3d 	bl	8003ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <xTaskCheckForTimeOut+0xbc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d102      	bne.n	800345a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e023      	b.n	80034a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <xTaskCheckForTimeOut+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d007      	beq.n	8003476 <xTaskCheckForTimeOut+0x82>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e015      	b.n	80034a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d20b      	bcs.n	8003498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff9b 	bl	80033c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e004      	b.n	80034a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80034a2:	f000 fb37 	bl	8003b14 <vPortExitCritical>

	return xReturn;
 80034a6:	69fb      	ldr	r3, [r7, #28]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200001dc 	.word	0x200001dc
 80034b4:	200001f0 	.word	0x200001f0

080034b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <vTaskMissedYield+0x14>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	200001ec 	.word	0x200001ec

080034d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034d8:	f000 f852 	bl	8003580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <prvIdleTask+0x28>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d9f9      	bls.n	80034d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <prvIdleTask+0x2c>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034f4:	e7f0      	b.n	80034d8 <prvIdleTask+0x8>
 80034f6:	bf00      	nop
 80034f8:	200000dc 	.word	0x200000dc
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	e00c      	b.n	8003526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <prvInitialiseTaskLists+0x60>)
 8003518:	4413      	add	r3, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fdf4 	bl	8002108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d9ef      	bls.n	800350c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <prvInitialiseTaskLists+0x64>)
 800352e:	f7fe fdeb 	bl	8002108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003532:	480d      	ldr	r0, [pc, #52]	; (8003568 <prvInitialiseTaskLists+0x68>)
 8003534:	f7fe fde8 	bl	8002108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003538:	480c      	ldr	r0, [pc, #48]	; (800356c <prvInitialiseTaskLists+0x6c>)
 800353a:	f7fe fde5 	bl	8002108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800353e:	480c      	ldr	r0, [pc, #48]	; (8003570 <prvInitialiseTaskLists+0x70>)
 8003540:	f7fe fde2 	bl	8002108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003544:	480b      	ldr	r0, [pc, #44]	; (8003574 <prvInitialiseTaskLists+0x74>)
 8003546:	f7fe fddf 	bl	8002108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <prvInitialiseTaskLists+0x78>)
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <prvInitialiseTaskLists+0x64>)
 800354e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvInitialiseTaskLists+0x7c>)
 8003552:	4a05      	ldr	r2, [pc, #20]	; (8003568 <prvInitialiseTaskLists+0x68>)
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200000dc 	.word	0x200000dc
 8003564:	20000168 	.word	0x20000168
 8003568:	2000017c 	.word	0x2000017c
 800356c:	20000198 	.word	0x20000198
 8003570:	200001ac 	.word	0x200001ac
 8003574:	200001c4 	.word	0x200001c4
 8003578:	20000190 	.word	0x20000190
 800357c:	20000194 	.word	0x20000194

08003580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003586:	e019      	b.n	80035bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003588:	f000 fa94 	bl	8003ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <prvCheckTasksWaitingTermination+0x50>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fe3f 	bl	800221c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <prvCheckTasksWaitingTermination+0x54>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <prvCheckTasksWaitingTermination+0x54>)
 80035a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035b2:	f000 faaf 	bl	8003b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f810 	bl	80035dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e1      	bne.n	8003588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200001ac 	.word	0x200001ac
 80035d4:	200001d8 	.word	0x200001d8
 80035d8:	200001c0 	.word	0x200001c0

080035dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	334c      	adds	r3, #76	; 0x4c
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd77 	bl	80040dc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc4c 	bl	8003e90 <vPortFree>
			vPortFree( pxTCB );
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fc49 	bl	8003e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <prvResetNextTaskUnblockTime+0x38>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvResetNextTaskUnblockTime+0x3c>)
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003620:	e008      	b.n	8003634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <prvResetNextTaskUnblockTime+0x38>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <prvResetNextTaskUnblockTime+0x3c>)
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000190 	.word	0x20000190
 8003644:	200001f8 	.word	0x200001f8

08003648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <xTaskGetSchedulerState+0x34>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003656:	2301      	movs	r3, #1
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e008      	b.n	800366e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <xTaskGetSchedulerState+0x38>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003664:	2302      	movs	r3, #2
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	e001      	b.n	800366e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800366e:	687b      	ldr	r3, [r7, #4]
	}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	200001e4 	.word	0x200001e4
 8003680:	20000200 	.word	0x20000200

08003684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06e      	beq.n	8003778 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800369a:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <xTaskPriorityDisinherit+0x100>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d00a      	beq.n	80036ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	60fb      	str	r3, [r7, #12]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	60bb      	str	r3, [r7, #8]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d044      	beq.n	8003778 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d140      	bne.n	8003778 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fd8e 	bl	800221c <uxListRemove>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	491f      	ldr	r1, [pc, #124]	; (8003788 <xTaskPriorityDisinherit+0x104>)
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <xTaskPriorityDisinherit+0xae>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	2201      	movs	r2, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <xTaskPriorityDisinherit+0x108>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4013      	ands	r3, r2
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <xTaskPriorityDisinherit+0x108>)
 8003730:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f1c3 0207 	rsb	r2, r3, #7
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	2201      	movs	r2, #1
 800374c:	409a      	lsls	r2, r3
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <xTaskPriorityDisinherit+0x108>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <xTaskPriorityDisinherit+0x108>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <xTaskPriorityDisinherit+0x104>)
 8003766:	441a      	add	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe fcf7 	bl	8002162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003778:	697b      	ldr	r3, [r7, #20]
	}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200000d8 	.word	0x200000d8
 8003788:	200000dc 	.word	0x200000dc
 800378c:	200001e0 	.word	0x200001e0

08003790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fd38 	bl	800221c <uxListRemove>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	2201      	movs	r2, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4013      	ands	r3, r2
 80037c6:	4a20      	ldr	r2, [pc, #128]	; (8003848 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d10a      	bne.n	80037e8 <prvAddCurrentTaskToDelayedList+0x58>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	481a      	ldr	r0, [pc, #104]	; (800384c <prvAddCurrentTaskToDelayedList+0xbc>)
 80037e2:	f7fe fcbe 	bl	8002162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037e6:	e026      	b.n	8003836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d209      	bcs.n	8003814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7fe fccc 	bl	80021aa <vListInsert>
}
 8003812:	e010      	b.n	8003836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3304      	adds	r3, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7fe fcc2 	bl	80021aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	d202      	bcs.n	8003836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003830:	4a09      	ldr	r2, [pc, #36]	; (8003858 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200001dc 	.word	0x200001dc
 8003844:	200000d8 	.word	0x200000d8
 8003848:	200001e0 	.word	0x200001e0
 800384c:	200001c4 	.word	0x200001c4
 8003850:	20000194 	.word	0x20000194
 8003854:	20000190 	.word	0x20000190
 8003858:	200001f8 	.word	0x200001f8

0800385c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3b04      	subs	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3b04      	subs	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b04      	subs	r3, #4
 800388a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <pxPortInitialiseStack+0x64>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b14      	subs	r3, #20
 8003896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b04      	subs	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f06f 0202 	mvn.w	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b20      	subs	r3, #32
 80038b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	080038c5 	.word	0x080038c5

080038c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <prvTaskExitError+0x54>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d00a      	beq.n	80038ee <prvTaskExitError+0x2a>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <prvTaskExitError+0x28>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	60bb      	str	r3, [r7, #8]
}
 8003900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003902:	bf00      	nop
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0fc      	beq.n	8003904 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	2000000c 	.word	0x2000000c
 800391c:	00000000 	.word	0x00000000

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	200000d8 	.word	0x200000d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003948:	4808      	ldr	r0, [pc, #32]	; (800396c <prvPortStartFirstTask+0x24>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8814 	msr	CONTROL, r0
 800395a:	b662      	cpsie	i
 800395c:	b661      	cpsie	f
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	df00      	svc	0
 8003968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800396a:	bf00      	nop
 800396c:	e000ed08 	.word	0xe000ed08

08003970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <xPortStartScheduler+0x120>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <xPortStartScheduler+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10a      	bne.n	8003996 <xPortStartScheduler+0x26>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <xPortStartScheduler+0x120>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <xPortStartScheduler+0x128>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10a      	bne.n	80039b6 <xPortStartScheduler+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <xPortStartScheduler+0x12c>)
 80039b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <xPortStartScheduler+0x130>)
 80039dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e4:	e009      	b.n	80039fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <xPortStartScheduler+0x134>)
 80039ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d0ef      	beq.n	80039e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00a      	beq.n	8003a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60bb      	str	r3, [r7, #8]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <xPortStartScheduler+0x134>)
 8003a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <xPortStartScheduler+0x138>)
 8003a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a5e:	f000 f8dd 	bl	8003c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <xPortStartScheduler+0x13c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a68:	f000 f8fc 	bl	8003c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <xPortStartScheduler+0x140>)
 8003a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a78:	f7ff ff66 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a7c:	f7ff fbbc 	bl	80031f8 <vTaskSwitchContext>
	prvTaskExitError();
 8003a80:	f7ff ff20 	bl	80038c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000ed00 	.word	0xe000ed00
 8003a94:	410fc271 	.word	0x410fc271
 8003a98:	410fc270 	.word	0x410fc270
 8003a9c:	e000e400 	.word	0xe000e400
 8003aa0:	20000204 	.word	0x20000204
 8003aa4:	20000208 	.word	0x20000208
 8003aa8:	e000ed20 	.word	0xe000ed20
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	e000ef34 	.word	0xe000ef34

08003ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <vPortEnterCritical+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10f      	bne.n	8003b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <vPortEnterCritical+0x5c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vPortEnterCritical+0x4a>
	}
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <vPortExitCritical+0x50>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <vPortExitCritical+0x24>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	607b      	str	r3, [r7, #4]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vPortExitCritical+0x50>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <vPortExitCritical+0x50>)
 8003b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <vPortExitCritical+0x50>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <vPortExitCritical+0x42>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f383 8811 	msr	BASEPRI, r3
}
 8003b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
	...

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff fb2a 	bl	80031f8 <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	200000d8 	.word	0x200000d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7ff fa49 	bl	8003088 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SysTick_Handler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
}
 8003c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <vPortSetupTimerInterrupt+0x44>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010
 8003c54:	e000e018 	.word	0xe000e018
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	10624dd3 	.word	0x10624dd3
 8003c60:	e000e014 	.word	0xe000e014

08003c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c74 <vPortEnableVFP+0x10>
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c6e:	6001      	str	r1, [r0, #0]
 8003c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c72:	bf00      	nop
 8003c74:	e000ed88 	.word	0xe000ed88

08003c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c7e:	f3ef 8305 	mrs	r3, IPSR
 8003c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d914      	bls.n	8003cb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <vPortValidateInterruptPriority+0x70>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <vPortValidateInterruptPriority+0x74>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	7afa      	ldrb	r2, [r7, #11]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d20a      	bcs.n	8003cb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <vPortValidateInterruptPriority+0x78>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <vPortValidateInterruptPriority+0x7c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d90a      	bls.n	8003cda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	603b      	str	r3, [r7, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <vPortValidateInterruptPriority+0x60>
	}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000e3f0 	.word	0xe000e3f0
 8003cec:	20000204 	.word	0x20000204
 8003cf0:	e000ed0c 	.word	0xe000ed0c
 8003cf4:	20000208 	.word	0x20000208

08003cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d04:	f7ff f916 	bl	8002f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d08:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <pvPortMalloc+0x180>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d10:	f000 f920 	bl	8003f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <pvPortMalloc+0x184>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8093 	bne.w	8003e48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01d      	beq.n	8003d64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d28:	2208      	movs	r2, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f023 0307 	bic.w	r3, r3, #7
 8003d40:	3308      	adds	r3, #8
 8003d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <pvPortMalloc+0x6c>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	617b      	str	r3, [r7, #20]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06e      	beq.n	8003e48 <pvPortMalloc+0x150>
 8003d6a:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <pvPortMalloc+0x188>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d869      	bhi.n	8003e48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <pvPortMalloc+0x18c>)
 8003d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d78:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <pvPortMalloc+0x18c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d7e:	e004      	b.n	8003d8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <pvPortMalloc+0xa4>
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f1      	bne.n	8003d80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <pvPortMalloc+0x180>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d050      	beq.n	8003e48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	4413      	add	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d91f      	bls.n	8003e08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <pvPortMalloc+0xf8>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	613b      	str	r3, [r7, #16]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e02:	69b8      	ldr	r0, [r7, #24]
 8003e04:	f000 f908 	bl	8004018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <pvPortMalloc+0x188>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <pvPortMalloc+0x188>)
 8003e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <pvPortMalloc+0x188>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <pvPortMalloc+0x190>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d203      	bcs.n	8003e2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <pvPortMalloc+0x188>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <pvPortMalloc+0x190>)
 8003e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <pvPortMalloc+0x184>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <pvPortMalloc+0x194>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <pvPortMalloc+0x194>)
 8003e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e48:	f7ff f882 	bl	8002f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <pvPortMalloc+0x174>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60fb      	str	r3, [r7, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <pvPortMalloc+0x172>
	return pvReturn;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000e14 	.word	0x20000e14
 8003e7c:	20000e28 	.word	0x20000e28
 8003e80:	20000e18 	.word	0x20000e18
 8003e84:	20000e0c 	.word	0x20000e0c
 8003e88:	20000e1c 	.word	0x20000e1c
 8003e8c:	20000e20 	.word	0x20000e20

08003e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d04d      	beq.n	8003f3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <vPortFree+0xb8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <vPortFree+0x44>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <vPortFree+0x62>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60bb      	str	r3, [r7, #8]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <vPortFree+0xb8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01e      	beq.n	8003f3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11a      	bne.n	8003f3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <vPortFree+0xb8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f18:	f7ff f80c 	bl	8002f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <vPortFree+0xbc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <vPortFree+0xbc>)
 8003f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f2a:	6938      	ldr	r0, [r7, #16]
 8003f2c:	f000 f874 	bl	8004018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <vPortFree+0xc0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <vPortFree+0xc0>)
 8003f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f3a:	f7ff f809 	bl	8002f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000e28 	.word	0x20000e28
 8003f4c:	20000e18 	.word	0x20000e18
 8003f50:	20000e24 	.word	0x20000e24

08003f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <prvHeapInit+0xac>)
 8003f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3307      	adds	r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <prvHeapInit+0xac>)
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <prvHeapInit+0xb0>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <prvHeapInit+0xb0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <prvHeapInit+0xb4>)
 8003fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <prvHeapInit+0xb4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <prvHeapInit+0xb4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <prvHeapInit+0xb4>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <prvHeapInit+0xb8>)
 8003fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <prvHeapInit+0xbc>)
 8003fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <prvHeapInit+0xc0>)
 8003fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	2000020c 	.word	0x2000020c
 8004004:	20000e0c 	.word	0x20000e0c
 8004008:	20000e14 	.word	0x20000e14
 800400c:	20000e1c 	.word	0x20000e1c
 8004010:	20000e18 	.word	0x20000e18
 8004014:	20000e28 	.word	0x20000e28

08004018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <prvInsertBlockIntoFreeList+0xac>)
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e002      	b.n	800402c <prvInsertBlockIntoFreeList+0x14>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d8f7      	bhi.n	8004026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d108      	bne.n	800405a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	441a      	add	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d118      	bne.n	80040a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d00d      	beq.n	8004096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	441a      	add	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e008      	b.n	80040a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e003      	b.n	80040a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d002      	beq.n	80040b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000e0c 	.word	0x20000e0c
 80040c8:	20000e14 	.word	0x20000e14

080040cc <memset>:
 80040cc:	4402      	add	r2, r0
 80040ce:	4603      	mov	r3, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <_reclaim_reent>:
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <_reclaim_reent+0xa8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4283      	cmp	r3, r0
 80040e2:	b570      	push	{r4, r5, r6, lr}
 80040e4:	4604      	mov	r4, r0
 80040e6:	d04b      	beq.n	8004180 <_reclaim_reent+0xa4>
 80040e8:	69c3      	ldr	r3, [r0, #28]
 80040ea:	b143      	cbz	r3, 80040fe <_reclaim_reent+0x22>
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d144      	bne.n	800417c <_reclaim_reent+0xa0>
 80040f2:	69e3      	ldr	r3, [r4, #28]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	b111      	cbz	r1, 80040fe <_reclaim_reent+0x22>
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f879 	bl	80041f0 <_free_r>
 80040fe:	6961      	ldr	r1, [r4, #20]
 8004100:	b111      	cbz	r1, 8004108 <_reclaim_reent+0x2c>
 8004102:	4620      	mov	r0, r4
 8004104:	f000 f874 	bl	80041f0 <_free_r>
 8004108:	69e1      	ldr	r1, [r4, #28]
 800410a:	b111      	cbz	r1, 8004112 <_reclaim_reent+0x36>
 800410c:	4620      	mov	r0, r4
 800410e:	f000 f86f 	bl	80041f0 <_free_r>
 8004112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004114:	b111      	cbz	r1, 800411c <_reclaim_reent+0x40>
 8004116:	4620      	mov	r0, r4
 8004118:	f000 f86a 	bl	80041f0 <_free_r>
 800411c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800411e:	b111      	cbz	r1, 8004126 <_reclaim_reent+0x4a>
 8004120:	4620      	mov	r0, r4
 8004122:	f000 f865 	bl	80041f0 <_free_r>
 8004126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004128:	b111      	cbz	r1, 8004130 <_reclaim_reent+0x54>
 800412a:	4620      	mov	r0, r4
 800412c:	f000 f860 	bl	80041f0 <_free_r>
 8004130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004132:	b111      	cbz	r1, 800413a <_reclaim_reent+0x5e>
 8004134:	4620      	mov	r0, r4
 8004136:	f000 f85b 	bl	80041f0 <_free_r>
 800413a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800413c:	b111      	cbz	r1, 8004144 <_reclaim_reent+0x68>
 800413e:	4620      	mov	r0, r4
 8004140:	f000 f856 	bl	80041f0 <_free_r>
 8004144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004146:	b111      	cbz	r1, 800414e <_reclaim_reent+0x72>
 8004148:	4620      	mov	r0, r4
 800414a:	f000 f851 	bl	80041f0 <_free_r>
 800414e:	6a23      	ldr	r3, [r4, #32]
 8004150:	b1b3      	cbz	r3, 8004180 <_reclaim_reent+0xa4>
 8004152:	4620      	mov	r0, r4
 8004154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004158:	4718      	bx	r3
 800415a:	5949      	ldr	r1, [r1, r5]
 800415c:	b941      	cbnz	r1, 8004170 <_reclaim_reent+0x94>
 800415e:	3504      	adds	r5, #4
 8004160:	69e3      	ldr	r3, [r4, #28]
 8004162:	2d80      	cmp	r5, #128	; 0x80
 8004164:	68d9      	ldr	r1, [r3, #12]
 8004166:	d1f8      	bne.n	800415a <_reclaim_reent+0x7e>
 8004168:	4620      	mov	r0, r4
 800416a:	f000 f841 	bl	80041f0 <_free_r>
 800416e:	e7c0      	b.n	80040f2 <_reclaim_reent+0x16>
 8004170:	680e      	ldr	r6, [r1, #0]
 8004172:	4620      	mov	r0, r4
 8004174:	f000 f83c 	bl	80041f0 <_free_r>
 8004178:	4631      	mov	r1, r6
 800417a:	e7ef      	b.n	800415c <_reclaim_reent+0x80>
 800417c:	2500      	movs	r5, #0
 800417e:	e7ef      	b.n	8004160 <_reclaim_reent+0x84>
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	bf00      	nop
 8004184:	2000005c 	.word	0x2000005c

08004188 <__libc_init_array>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4d0d      	ldr	r5, [pc, #52]	; (80041c0 <__libc_init_array+0x38>)
 800418c:	4c0d      	ldr	r4, [pc, #52]	; (80041c4 <__libc_init_array+0x3c>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	2600      	movs	r6, #0
 8004194:	42a6      	cmp	r6, r4
 8004196:	d109      	bne.n	80041ac <__libc_init_array+0x24>
 8004198:	4d0b      	ldr	r5, [pc, #44]	; (80041c8 <__libc_init_array+0x40>)
 800419a:	4c0c      	ldr	r4, [pc, #48]	; (80041cc <__libc_init_array+0x44>)
 800419c:	f000 f880 	bl	80042a0 <_init>
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	2600      	movs	r6, #0
 80041a6:	42a6      	cmp	r6, r4
 80041a8:	d105      	bne.n	80041b6 <__libc_init_array+0x2e>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b0:	4798      	blx	r3
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7ee      	b.n	8004194 <__libc_init_array+0xc>
 80041b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ba:	4798      	blx	r3
 80041bc:	3601      	adds	r6, #1
 80041be:	e7f2      	b.n	80041a6 <__libc_init_array+0x1e>
 80041c0:	08004320 	.word	0x08004320
 80041c4:	08004320 	.word	0x08004320
 80041c8:	08004320 	.word	0x08004320
 80041cc:	08004324 	.word	0x08004324

080041d0 <__retarget_lock_acquire_recursive>:
 80041d0:	4770      	bx	lr

080041d2 <__retarget_lock_release_recursive>:
 80041d2:	4770      	bx	lr

080041d4 <memcpy>:
 80041d4:	440a      	add	r2, r1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041dc:	d100      	bne.n	80041e0 <memcpy+0xc>
 80041de:	4770      	bx	lr
 80041e0:	b510      	push	{r4, lr}
 80041e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ea:	4291      	cmp	r1, r2
 80041ec:	d1f9      	bne.n	80041e2 <memcpy+0xe>
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <_free_r>:
 80041f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d044      	beq.n	8004280 <_free_r+0x90>
 80041f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fa:	9001      	str	r0, [sp, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004202:	bfb8      	it	lt
 8004204:	18e4      	addlt	r4, r4, r3
 8004206:	f000 f83f 	bl	8004288 <__malloc_lock>
 800420a:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <_free_r+0x94>)
 800420c:	9801      	ldr	r0, [sp, #4]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	b933      	cbnz	r3, 8004220 <_free_r+0x30>
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	b003      	add	sp, #12
 8004218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800421c:	f000 b83a 	b.w	8004294 <__malloc_unlock>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d908      	bls.n	8004236 <_free_r+0x46>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	1961      	adds	r1, r4, r5
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1949      	addeq	r1, r1, r5
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	e7ed      	b.n	8004212 <_free_r+0x22>
 8004236:	461a      	mov	r2, r3
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b10b      	cbz	r3, 8004240 <_free_r+0x50>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d9fa      	bls.n	8004236 <_free_r+0x46>
 8004240:	6811      	ldr	r1, [r2, #0]
 8004242:	1855      	adds	r5, r2, r1
 8004244:	42a5      	cmp	r5, r4
 8004246:	d10b      	bne.n	8004260 <_free_r+0x70>
 8004248:	6824      	ldr	r4, [r4, #0]
 800424a:	4421      	add	r1, r4
 800424c:	1854      	adds	r4, r2, r1
 800424e:	42a3      	cmp	r3, r4
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	d1e0      	bne.n	8004216 <_free_r+0x26>
 8004254:	681c      	ldr	r4, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	440c      	add	r4, r1
 800425c:	6014      	str	r4, [r2, #0]
 800425e:	e7da      	b.n	8004216 <_free_r+0x26>
 8004260:	d902      	bls.n	8004268 <_free_r+0x78>
 8004262:	230c      	movs	r3, #12
 8004264:	6003      	str	r3, [r0, #0]
 8004266:	e7d6      	b.n	8004216 <_free_r+0x26>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	1961      	adds	r1, r4, r5
 800426c:	428b      	cmp	r3, r1
 800426e:	bf04      	itt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	bf04      	itt	eq
 8004278:	1949      	addeq	r1, r1, r5
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6054      	str	r4, [r2, #4]
 800427e:	e7ca      	b.n	8004216 <_free_r+0x26>
 8004280:	b003      	add	sp, #12
 8004282:	bd30      	pop	{r4, r5, pc}
 8004284:	20000f68 	.word	0x20000f68

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f7ff bfa1 	b.w	80041d0 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	20000f64 	.word	0x20000f64

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f7ff bf9c 	b.w	80041d2 <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	20000f64 	.word	0x20000f64

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

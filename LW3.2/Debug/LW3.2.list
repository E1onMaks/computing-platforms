
LW3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004278  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004500  08004500  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004500  08004500  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000060  08004568  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08004568  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e1b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b58  00000000  00000000  00030eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d86  00000000  00000000  00034be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028a7  00000000  00000000  00035966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125ab  00000000  00000000  0003820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcec5  00000000  00000000  0004a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c20  00000000  00000000  00147680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004440 	.word	0x08004440

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08004440 	.word	0x08004440

08000220 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 faea 	bl	80007fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f86b 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8b5 	bl	800039c <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000232:	4a2a      	ldr	r2, [pc, #168]	; (80002dc <main+0xbc>)
 8000234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023c:	e883 0003 	stmia.w	r3, {r0, r1}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 ff66 	bl	8002118 <osMessageCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <main+0xc0>)
 8000250:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0xc4>)
 8000254:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 ff2e 	bl	80020ca <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <main+0xc8>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTaskA */
  osThreadDef(buttonTaskA, StartButtonTaskA, osPriorityNormal, 0, 128);
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <main+0xcc>)
 8000276:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	6023      	str	r3, [r4, #0]
  buttonTaskAHandle = osThreadCreate(osThread(buttonTaskA), NULL);
 8000284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 ff1d 	bl	80020ca <osThreadCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <main+0xd0>)
 8000294:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTaskB */
  osThreadDef(buttonTaskB, StartButtonTaskB, osPriorityNormal, 0, 128);
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0xd4>)
 8000298:	f107 0414 	add.w	r4, r7, #20
 800029c:	461d      	mov	r5, r3
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	682b      	ldr	r3, [r5, #0]
 80002a4:	6023      	str	r3, [r4, #0]
  buttonTaskBHandle = osThreadCreate(osThread(buttonTaskB), NULL);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 ff0c 	bl	80020ca <osThreadCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <main+0xd8>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTaskC */
  osThreadDef(buttonTaskC, StartButtonTaskC, osPriorityNormal, 0, 128);
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <main+0xdc>)
 80002ba:	463c      	mov	r4, r7
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	682b      	ldr	r3, [r5, #0]
 80002c4:	6023      	str	r3, [r4, #0]
  buttonTaskCHandle = osThreadCreate(osThread(buttonTaskC), NULL);
 80002c6:	463b      	mov	r3, r7
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fefd 	bl	80020ca <osThreadCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <main+0xe0>)
 80002d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002d6:	f001 fef1 	bl	80020bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80002da:	e7fe      	b.n	80002da <main+0xba>
 80002dc:	08004458 	.word	0x08004458
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	0800446c 	.word	0x0800446c
 80002e8:	2000007c 	.word	0x2000007c
 80002ec:	0800448c 	.word	0x0800448c
 80002f0:	20000080 	.word	0x20000080
 80002f4:	080044ac 	.word	0x080044ac
 80002f8:	20000084 	.word	0x20000084
 80002fc:	080044cc 	.word	0x080044cc
 8000300:	20000088 	.word	0x20000088

08000304 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2238      	movs	r2, #56	; 0x38
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 ffaa 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 fd54 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	2340      	movs	r3, #64	; 0x40
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000342:	2304      	movs	r3, #4
 8000344:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000346:	2355      	movs	r3, #85	; 0x55
 8000348:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800034e:	2302      	movs	r3, #2
 8000350:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000352:	2302      	movs	r3, #2
 8000354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fdee 	bl	8000f3c <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x66>
    Error_Handler();
 8000366:	f000 f954 	bl	8000612 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2303      	movs	r3, #3
 8000370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2104      	movs	r1, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f8ec 	bl	8001560 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x8e>
    Error_Handler();
 800038e:	f000 f940 	bl	8000612 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3750      	adds	r7, #80	; 0x50
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0x90>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0x90>)
 80003b8:	f043 0310 	orr.w	r3, r3, #16
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0x90>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	f003 0310 	and.w	r3, r3, #16
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x90>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x90>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x90>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 80003e2:	2200      	movs	r2, #0
 80003e4:	21ff      	movs	r1, #255	; 0xff
 80003e6:	4812      	ldr	r0, [pc, #72]	; (8000430 <MX_GPIO_Init+0x94>)
 80003e8:	f000 fcdc 	bl	8000da4 <HAL_GPIO_WritePin>
                           | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 80003ec:	23ff      	movs	r3, #255	; 0xff
 80003ee:	60fb      	str	r3, [r7, #12]
                        | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4619      	mov	r1, r3
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <MX_GPIO_Init+0x94>)
 8000404:	f000 fb34 	bl	8000a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000408:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_GPIO_Init+0x98>)
 800041e:	f000 fb27 	bl	8000a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	48001000 	.word	0x48001000
 8000434:	48000400 	.word	0x48000400

08000438 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  bool flag = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	77fb      	strb	r3, [r7, #31]
  uint32_t ledDelay = 100;
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	61bb      	str	r3, [r7, #24]
  uint8_t i = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for (;;) {
    osEvent event = osMessageGet(myQueue01Handle, 10);
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <StartDefaultTask+0xb8>)
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	220a      	movs	r2, #10
 8000456:	4618      	mov	r0, r3
 8000458:	f001 feb0 	bl	80021bc <osMessageGet>

    if (event.status == osEventMessage) {
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	2b10      	cmp	r3, #16
 8000460:	d11b      	bne.n	800049a <StartDefaultTask+0x62>
      if (event.value.v == 0) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d102      	bne.n	800046e <StartDefaultTask+0x36>
        flag = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	77fb      	strb	r3, [r7, #31]
 800046c:	e015      	b.n	800049a <StartDefaultTask+0x62>
      } else if (event.value.v == 1) {
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d102      	bne.n	800047a <StartDefaultTask+0x42>
        flag = 1;
 8000474:	2301      	movs	r3, #1
 8000476:	77fb      	strb	r3, [r7, #31]
 8000478:	e00f      	b.n	800049a <StartDefaultTask+0x62>
      } else if (event.value.v == 2 && ledDelay > 25) {
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d106      	bne.n	800048e <StartDefaultTask+0x56>
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	2b19      	cmp	r3, #25
 8000484:	d903      	bls.n	800048e <StartDefaultTask+0x56>
        ledDelay -= 25;
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	3b19      	subs	r3, #25
 800048a:	61bb      	str	r3, [r7, #24]
 800048c:	e005      	b.n	800049a <StartDefaultTask+0x62>
      } else if (event.value.v == 3) {
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d102      	bne.n	800049a <StartDefaultTask+0x62>
        ledDelay += 25;
 8000494:	69bb      	ldr	r3, [r7, #24]
 8000496:	3319      	adds	r3, #25
 8000498:	61bb      	str	r3, [r7, #24]
      }
    }

    if (flag == 1) {
 800049a:	7ffb      	ldrb	r3, [r7, #31]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d020      	beq.n	80004e2 <StartDefaultTask+0xaa>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0 << i, GPIO_PIN_SET);
 80004a0:	7dfb      	ldrb	r3, [r7, #23]
 80004a2:	2201      	movs	r2, #1
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	2201      	movs	r2, #1
 80004ac:	4619      	mov	r1, r3
 80004ae:	4811      	ldr	r0, [pc, #68]	; (80004f4 <StartDefaultTask+0xbc>)
 80004b0:	f000 fc78 	bl	8000da4 <HAL_GPIO_WritePin>
      HAL_Delay(ledDelay);
 80004b4:	69b8      	ldr	r0, [r7, #24]
 80004b6:	f000 f9d9 	bl	800086c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0 << i, GPIO_PIN_RESET);
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
 80004bc:	2201      	movs	r2, #1
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <StartDefaultTask+0xbc>)
 80004ca:	f000 fc6b 	bl	8000da4 <HAL_GPIO_WritePin>
      if (i < 7) i++;
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
 80004d0:	2b06      	cmp	r3, #6
 80004d2:	d803      	bhi.n	80004dc <StartDefaultTask+0xa4>
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	3301      	adds	r3, #1
 80004d8:	75fb      	strb	r3, [r7, #23]
 80004da:	e7b7      	b.n	800044c <StartDefaultTask+0x14>
      else i = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	75fb      	strb	r3, [r7, #23]
 80004e0:	e7b4      	b.n	800044c <StartDefaultTask+0x14>
    } else HAL_GPIO_WritePin(GPIOE, (uint16_t) 0x00ff, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	21ff      	movs	r1, #255	; 0xff
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <StartDefaultTask+0xbc>)
 80004e8:	f000 fc5c 	bl	8000da4 <HAL_GPIO_WritePin>
  for (;;) {
 80004ec:	e7ae      	b.n	800044c <StartDefaultTask+0x14>
 80004ee:	bf00      	nop
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	48001000 	.word	0x48001000

080004f8 <StartButtonTaskA>:
* @brief Function implementing the buttonTaskA thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTaskA */
void StartButtonTaskA(void const *argument) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTaskA */
  uint8_t count = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;) {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0) {
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	4816      	ldr	r0, [pc, #88]	; (8000564 <StartButtonTaskA+0x6c>)
 800050a:	f000 fc33 	bl	8000d74 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f7      	bne.n	8000504 <StartButtonTaskA+0xc>
      while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0);
 8000514:	bf00      	nop
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <StartButtonTaskA+0x6c>)
 800051c:	f000 fc2a 	bl	8000d74 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f7      	beq.n	8000516 <StartButtonTaskA+0x1e>

      count = (count + 1) % 2;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	3301      	adds	r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	bfb8      	it	lt
 8000532:	425b      	neglt	r3, r3
 8000534:	73fb      	strb	r3, [r7, #15]

      if (count == 0) {
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d107      	bne.n	800054c <StartButtonTaskA+0x54>
        osMessagePut(myQueue01Handle, 0, 10);
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <StartButtonTaskA+0x70>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	220a      	movs	r2, #10
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f001 fdf9 	bl	800213c <osMessagePut>
 800054a:	e7db      	b.n	8000504 <StartButtonTaskA+0xc>
      } else if (count == 1) {
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d1d8      	bne.n	8000504 <StartButtonTaskA+0xc>
        osMessagePut(myQueue01Handle, 1, 10);
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <StartButtonTaskA+0x70>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	220a      	movs	r2, #10
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fdee 	bl	800213c <osMessagePut>
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0) {
 8000560:	e7d0      	b.n	8000504 <StartButtonTaskA+0xc>
 8000562:	bf00      	nop
 8000564:	48000400 	.word	0x48000400
 8000568:	2000008c 	.word	0x2000008c

0800056c <StartButtonTaskB>:
* @brief Function implementing the buttonTaskB thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTaskB */
void StartButtonTaskB(void const *argument) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTaskB */
  /* Infinite loop */
  for (;;) {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0) {
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <StartButtonTaskB+0x3c>)
 800057a:	f000 fbfb 	bl	8000d74 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f7      	bne.n	8000574 <StartButtonTaskB+0x8>
      while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0);
 8000584:	bf00      	nop
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <StartButtonTaskB+0x3c>)
 800058c:	f000 fbf2 	bl	8000d74 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f7      	beq.n	8000586 <StartButtonTaskB+0x1a>

      osMessagePut(myQueue01Handle, 2, 10);
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <StartButtonTaskB+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	220a      	movs	r2, #10
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fdcc 	bl	800213c <osMessagePut>
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0) {
 80005a4:	e7e6      	b.n	8000574 <StartButtonTaskB+0x8>
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <StartButtonTaskC>:
* @brief Function implementing the buttonTaskC thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTaskC */
void StartButtonTaskC(void const *argument) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTaskC */
  /* Infinite loop */
  for (;;) {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0) {
 80005b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <StartButtonTaskC+0x3c>)
 80005be:	f000 fbd9 	bl	8000d74 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <StartButtonTaskC+0x8>
      while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0);
 80005c8:	bf00      	nop
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <StartButtonTaskC+0x3c>)
 80005d0:	f000 fbd0 	bl	8000d74 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f7      	beq.n	80005ca <StartButtonTaskC+0x1a>

      osMessagePut(myQueue01Handle, 3, 10);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <StartButtonTaskC+0x40>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	220a      	movs	r2, #10
 80005e0:	2103      	movs	r1, #3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fdaa 	bl	800213c <osMessagePut>
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0) {
 80005e8:	e7e6      	b.n	80005b8 <StartButtonTaskC+0x8>
 80005ea:	bf00      	nop
 80005ec:	48000400 	.word	0x48000400
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000604:	d101      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000606:	f000 f913 	bl	8000830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000616:	b672      	cpsid	i
}
 8000618:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800061a:	e7fe      	b.n	800061a <Error_Handler+0x8>

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x50>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <HAL_MspInit+0x50>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6613      	str	r3, [r2, #96]	; 0x60
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x50>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x50>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <HAL_MspInit+0x50>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	6593      	str	r3, [r2, #88]	; 0x58
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x50>)
 8000648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	210f      	movs	r1, #15
 8000656:	f06f 0001 	mvn.w	r0, #1
 800065a:	f000 f9e1 	bl	8000a20 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800065e:	f000 fc5d 	bl	8000f1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <HAL_InitTick+0xc8>)
 8000682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000684:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <HAL_InitTick+0xc8>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6593      	str	r3, [r2, #88]	; 0x58
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <HAL_InitTick+0xc8>)
 800068e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000698:	f107 020c 	add.w	r2, r7, #12
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f91c 	bl	80018e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a8:	f001 f904 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 80006ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_InitTick+0xcc>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0c9b      	lsrs	r3, r3, #18
 80006b8:	3b01      	subs	r3, #1
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <HAL_InitTick+0xd0>)
 80006be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_InitTick+0xd0>)
 80006c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_InitTick+0xd0>)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_InitTick+0xd0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_InitTick+0xd0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <HAL_InitTick+0xd0>)
 80006e0:	f001 f976 	bl	80019d0 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80006ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11b      	bne.n	800072a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80006f2:	4813      	ldr	r0, [pc, #76]	; (8000740 <HAL_InitTick+0xd0>)
 80006f4:	f001 f9ce 	bl	8001a94 <HAL_TIM_Base_Start_IT>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000702:	2b00      	cmp	r3, #0
 8000704:	d111      	bne.n	800072a <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000706:	201c      	movs	r0, #28
 8000708:	f000 f9a4 	bl	8000a54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b0f      	cmp	r3, #15
 8000710:	d808      	bhi.n	8000724 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000712:	2200      	movs	r2, #0
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	201c      	movs	r0, #28
 8000718:	f000 f982 	bl	8000a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <HAL_InitTick+0xd4>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e002      	b.n	800072a <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800072a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800072e:	4618      	mov	r0, r3
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	431bde83 	.word	0x431bde83
 8000740:	20000090 	.word	0x20000090
 8000744:	20000004 	.word	0x20000004

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <TIM2_IRQHandler+0x10>)
 800077a:	f001 fa03 	bl	8001b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000090 	.word	0x20000090

08000788 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff ffea 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f003 fda5 	bl	8004328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fd1f 	bl	8000220 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007f0:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 80007f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007f8:	20001374 	.word	0x20001374

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>

080007fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f8fe 	bl	8000a0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff ff2e 	bl	8000670 <HAL_InitTick>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e001      	b.n	8000824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000820:	f7ff fefc 	bl	800061c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000824:	79fb      	ldrb	r3, [r7, #7]

}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x1c>)
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000dc 	.word	0x200000dc
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200000dc 	.word	0x200000dc

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ffee 	bl	8000854 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d004      	beq.n	8000890 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_Delay+0x40>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000890:	bf00      	nop
 8000892:	f7ff ffdf 	bl	8000854 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d8f7      	bhi.n	8000892 <HAL_Delay+0x26>
  {
  }
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff4c 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2e:	f7ff ff63 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	6978      	ldr	r0, [r7, #20]
 8000a3a:	f7ff ffb3 	bl	80009a4 <NVIC_EncodePriority>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff82 	bl	8000950 <__NVIC_SetPriority>
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff56 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a7e:	e15a      	b.n	8000d36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 814c 	beq.w	8000d30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d005      	beq.n	8000ab0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d130      	bne.n	8000b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0201 	and.w	r2, r3, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d017      	beq.n	8000b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d123      	bne.n	8000ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 80a6 	beq.w	8000d30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <HAL_GPIO_Init+0x2e4>)
 8000be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be8:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <HAL_GPIO_Init+0x2e4>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf0:	4b58      	ldr	r3, [pc, #352]	; (8000d54 <HAL_GPIO_Init+0x2e4>)
 8000bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfc:	4a56      	ldr	r2, [pc, #344]	; (8000d58 <HAL_GPIO_Init+0x2e8>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c26:	d01f      	beq.n	8000c68 <HAL_GPIO_Init+0x1f8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4c      	ldr	r2, [pc, #304]	; (8000d5c <HAL_GPIO_Init+0x2ec>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d019      	beq.n	8000c64 <HAL_GPIO_Init+0x1f4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d013      	beq.n	8000c60 <HAL_GPIO_Init+0x1f0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a4a      	ldr	r2, [pc, #296]	; (8000d64 <HAL_GPIO_Init+0x2f4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00d      	beq.n	8000c5c <HAL_GPIO_Init+0x1ec>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a49      	ldr	r2, [pc, #292]	; (8000d68 <HAL_GPIO_Init+0x2f8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x1e8>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a48      	ldr	r2, [pc, #288]	; (8000d6c <HAL_GPIO_Init+0x2fc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_GPIO_Init+0x1e4>
 8000c50:	2305      	movs	r3, #5
 8000c52:	e00a      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c54:	2306      	movs	r3, #6
 8000c56:	e008      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x1fa>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c7a:	4937      	ldr	r1, [pc, #220]	; (8000d58 <HAL_GPIO_Init+0x2e8>)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c88:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cac:	4a30      	ldr	r2, [pc, #192]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_GPIO_Init+0x300>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f ae9d 	bne.w	8000a80 <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	48001000 	.word	0x48001000
 8000d6c:	48001400 	.word	0x48001400
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e001      	b.n	8000d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
 8000db0:	4613      	mov	r3, r2
 8000db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	787b      	ldrb	r3, [r7, #1]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d141      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dee:	d131      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df6:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e08:	4a41      	ldr	r2, [pc, #260]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2232      	movs	r2, #50	; 0x32
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e26:	e002      	b.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3a:	d102      	bne.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f2      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4e:	d158      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e057      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e64:	e04d      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e6c:	d141      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d131      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e82:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2232      	movs	r2, #50	; 0x32
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	e002      	b.n	8000eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec6:	d102      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eda:	d112      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e011      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ef0:	e007      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40007000 	.word	0x40007000
 8000f14:	20000000 	.word	0x20000000
 8000f18:	431bde83 	.word	0x431bde83

08000f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40007000 	.word	0x40007000

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e2fe      	b.n	800154c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d075      	beq.n	8001046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4b97      	ldr	r3, [pc, #604]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f64:	4b94      	ldr	r3, [pc, #592]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d102      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3e>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d002      	beq.n	8000f80 <HAL_RCC_OscConfig+0x44>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b8d      	ldr	r3, [pc, #564]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d157      	bne.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e2d9      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x74>
 8000fa2:	4b85      	ldr	r3, [pc, #532]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a84      	ldr	r2, [pc, #528]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7b      	ldr	r2, [pc, #492]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fd4:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a77      	ldr	r2, [pc, #476]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b75      	ldr	r3, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a74      	ldr	r2, [pc, #464]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc2e 	bl	8000854 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fc2a 	bl	8000854 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e29e      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fc1a 	bl	8000854 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc16 	bl	8000854 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e28a      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4b60      	ldr	r3, [pc, #384]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0xe8>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d075      	beq.n	800113e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001052:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800105c:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x136>
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d002      	beq.n	8001078 <HAL_RCC_OscConfig+0x13c>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d11f      	bne.n	80010b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x154>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e25d      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	4946      	ldr	r1, [pc, #280]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <HAL_RCC_OscConfig+0x280>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fae1 	bl	8000670 <HAL_InitTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d043      	beq.n	800113c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e249      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d023      	beq.n	8001108 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fbc2 	bl	8000854 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fbbe 	bl	8000854 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e232      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	492d      	ldr	r1, [pc, #180]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]
 8001106:	e01a      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800110e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fb9e 	bl	8000854 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fb9a 	bl	8000854 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e20e      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x1e0>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d041      	beq.n	80011ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01c      	beq.n	800118c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fb77 	bl	8000854 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fb73 	bl	8000854 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1e7      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800117e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0ef      	beq.n	800116a <HAL_RCC_OscConfig+0x22e>
 800118a:	e020      	b.n	80011ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fb5a 	bl	8000854 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a2:	e00d      	b.n	80011c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fb56 	bl	8000854 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d906      	bls.n	80011c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1ca      	b.n	800154c <HAL_RCC_OscConfig+0x610>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c0:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ea      	bne.n	80011a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a6 	beq.w	8001328 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011e0:	4b84      	ldr	r3, [pc, #528]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2b4>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x2b6>
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00d      	beq.n	8001212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	4a7e      	ldr	r2, [pc, #504]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6593      	str	r3, [r2, #88]	; 0x58
 8001202:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001212:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb13 	bl	8000854 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fb0f 	bl	8000854 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e183      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001244:	4b6c      	ldr	r3, [pc, #432]	; (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_RCC_OscConfig+0x32e>
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001268:	e024      	b.n	80012b4 <HAL_RCC_OscConfig+0x378>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d110      	bne.n	8001294 <HAL_RCC_OscConfig+0x358>
 8001272:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001278:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001288:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001292:	e00f      	b.n	80012b4 <HAL_RCC_OscConfig+0x378>
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129a:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d016      	beq.n	80012ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff faca 	bl	8000854 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fac6 	bl	8000854 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e138      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ed      	beq.n	80012c4 <HAL_RCC_OscConfig+0x388>
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff fab3 	bl	8000854 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff faaf 	bl	8000854 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e121      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ed      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d03c      	beq.n	80013ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01c      	beq.n	8001376 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800133e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fa82 	bl	8000854 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001354:	f7ff fa7e 	bl	8000854 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e0f2      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ef      	beq.n	8001354 <HAL_RCC_OscConfig+0x418>
 8001374:	e01b      	b.n	80013ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fa65 	bl	8000854 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138e:	f7ff fa61 	bl	8000854 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0d5      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ef      	bne.n	800138e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80c9 	beq.w	800154a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	f000 8083 	beq.w	80014cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d15e      	bne.n	800148c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fa3b 	bl	8000854 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e0:	e00c      	b.n	80013fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fa37 	bl	8000854 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d905      	bls.n	80013fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0ab      	b.n	800154c <HAL_RCC_OscConfig+0x610>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ec      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b52      	ldr	r3, [pc, #328]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_RCC_OscConfig+0x61c>)
 800140e:	4013      	ands	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6a11      	ldr	r1, [r2, #32]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001418:	3a01      	subs	r2, #1
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800142a:	0852      	lsrs	r2, r2, #1
 800142c:	3a01      	subs	r2, #1
 800142e:	0552      	lsls	r2, r2, #21
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0652      	lsls	r2, r2, #25
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001442:	06d2      	lsls	r2, r2, #27
 8001444:	430a      	orrs	r2, r1
 8001446:	4943      	ldr	r1, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001458:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff f9f6 	bl	8000854 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f9f2 	bl	8000854 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e066      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x530>
 800148a:	e05e      	b.n	800154a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a30      	ldr	r2, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff f9dc 	bl	8000854 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff f9d8 	bl	8000854 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04c      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	4924      	ldr	r1, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x620>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
 80014ca:	e03e      	b.n	800154a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e039      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x618>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d12c      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d123      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11b      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d113      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d109      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	3b01      	subs	r3, #1
 8001540:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	019f800c 	.word	0x019f800c
 800155c:	feeefffc 	.word	0xfeeefffc

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e11e      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b8e      	ldr	r3, [pc, #568]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 020f 	bic.w	r2, r3, #15
 800158e:	498c      	ldr	r1, [pc, #560]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b8a      	ldr	r3, [pc, #552]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e106      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d073      	beq.n	800169c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d129      	bne.n	8001610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0f4      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015cc:	f000 f9ba 	bl	8001944 <RCC_GetSysClockFreqFromPLLSource>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_ClockConfig+0x268>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d93f      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d033      	beq.n	800165a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12f      	bne.n	800165a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fa:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001602:	4a70      	ldr	r2, [pc, #448]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e024      	b.n	800165a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0c6      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0be      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001638:	f000 f8ce 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800163c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4a61      	ldr	r2, [pc, #388]	; (80017c8 <HAL_RCC_ClockConfig+0x268>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d909      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4957      	ldr	r1, [pc, #348]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f8f2 	bl	8000854 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f8ee 	bl	8000854 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e095      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d023      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016cc:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4936      	ldr	r1, [pc, #216]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
 80016ee:	e008      	b.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b80      	cmp	r3, #128	; 0x80
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d21d      	bcs.n	800174c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 020f 	bic.w	r2, r3, #15
 8001718:	4929      	ldr	r1, [pc, #164]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001720:	f7ff f898 	bl	8000854 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f894 	bl	8000854 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03b      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d1ed      	bne.n	8001728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4917      	ldr	r1, [pc, #92]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490f      	ldr	r1, [pc, #60]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178a:	f000 f825 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490c      	ldr	r1, [pc, #48]	; (80017cc <HAL_RCC_ClockConfig+0x26c>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x270>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe ff5e 	bl	8000670 <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	04c4b400 	.word	0x04c4b400
 80017cc:	080044e8 	.word	0x080044e8
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e047      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e03e      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d136      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800182c:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	68d2      	ldr	r2, [r2, #12]
 8001838:	0a12      	lsrs	r2, r2, #8
 800183a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
      break;
 8001844:	e00c      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001850:	68d2      	ldr	r2, [r2, #12]
 8001852:	0a12      	lsrs	r2, r2, #8
 8001854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      break;
 800185e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0e5b      	lsrs	r3, r3, #25
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e001      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001880:	693b      	ldr	r3, [r7, #16]
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018b8:	f7ff fff0 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4904      	ldr	r1, [pc, #16]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	080044f8 	.word	0x080044f8

080018e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	220f      	movs	r2, #15
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_RCC_GetClockConfig+0x60>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 020f 	and.w	r2, r3, #15
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40022000 	.word	0x40022000

08001944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d10c      	bne.n	8001982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001972:	68d2      	ldr	r2, [r2, #12]
 8001974:	0a12      	lsrs	r2, r2, #8
 8001976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
    break;
 8001980:	e00c      	b.n	800199c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198c:	68d2      	ldr	r2, [r2, #12]
 800198e:	0a12      	lsrs	r2, r2, #8
 8001990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    break;
 800199a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0e5b      	lsrs	r3, r3, #25
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	007a1200 	.word	0x007a1200
 80019cc:	00f42400 	.word	0x00f42400

080019d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e049      	b.n	8001a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f841 	bl	8001a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 fa30 	bl	8001e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e054      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d022      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d01d      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d018      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d115      	bne.n	8001b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_TIM_Base_Start_IT+0xec>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d015      	beq.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d011      	beq.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3e:	e008      	b.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e000      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40012c00 	.word	0x40012c00
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40013400 	.word	0x40013400
 8001b78:	40014000 	.word	0x40014000
 8001b7c:	40015000 	.word	0x40015000
 8001b80:	00010007 	.word	0x00010007

08001b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d020      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0202 	mvn.w	r2, #2
 8001bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f931 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001bd4:	e005      	b.n	8001be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f923 	bl	8001e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f934 	bl	8001e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0204 	mvn.w	r2, #4
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f90b 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8fd 	bl	8001e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f90e 	bl	8001e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01b      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0208 	mvn.w	r2, #8
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2204      	movs	r2, #4
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8e5 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8d7 	bl	8001e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8e8 	bl	8001e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d020      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0210 	mvn.w	r2, #16
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8bf 	bl	8001e36 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8b1 	bl	8001e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8c2 	bl	8001e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0201 	mvn.w	r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fc82 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d104      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00c      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8001d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f969 	bl	8001ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00c      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f961 	bl	8002004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00c      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f87c 	bl	8001e5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00c      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0220 	mvn.w	r2, #32
 8001d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f929 	bl	8001fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00c      	beq.n	8001dae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f935 	bl	8002018 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f92d 	bl	800202c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f925 	bl	8002040 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f91d 	bl	8002054 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <TIM_Base_SetConfig+0x144>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d017      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d013      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <TIM_Base_SetConfig+0x148>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <TIM_Base_SetConfig+0x14c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00b      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <TIM_Base_SetConfig+0x150>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <TIM_Base_SetConfig+0x154>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <TIM_Base_SetConfig+0x48>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a45      	ldr	r2, [pc, #276]	; (8001fcc <TIM_Base_SetConfig+0x158>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <TIM_Base_SetConfig+0x144>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d023      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001edc:	d01f      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <TIM_Base_SetConfig+0x148>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01b      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <TIM_Base_SetConfig+0x14c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d017      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a34      	ldr	r2, [pc, #208]	; (8001fc4 <TIM_Base_SetConfig+0x150>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <TIM_Base_SetConfig+0x154>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <TIM_Base_SetConfig+0x15c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <TIM_Base_SetConfig+0x160>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <TIM_Base_SetConfig+0x164>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0xaa>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <TIM_Base_SetConfig+0x158>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <TIM_Base_SetConfig+0x144>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <TIM_Base_SetConfig+0x110>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <TIM_Base_SetConfig+0x154>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00f      	beq.n	8001f84 <TIM_Base_SetConfig+0x110>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <TIM_Base_SetConfig+0x15c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00b      	beq.n	8001f84 <TIM_Base_SetConfig+0x110>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <TIM_Base_SetConfig+0x160>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <TIM_Base_SetConfig+0x110>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <TIM_Base_SetConfig+0x164>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0x110>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <TIM_Base_SetConfig+0x158>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d103      	bne.n	8001f8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
  }
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40013400 	.word	0x40013400
 8001fcc:	40015000 	.word	0x40015000
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800

08001fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	2b84      	cmp	r3, #132	; 0x84
 800207c:	d005      	beq.n	800208a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800207e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	3303      	adds	r3, #3
 8002088:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800209e:	f3ef 8305 	mrs	r3, IPSR
 80020a2:	607b      	str	r3, [r7, #4]
  return(result);
 80020a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020c0:	f000 ffb6 	bl	8003030 <vTaskStartScheduler>
  
  return osOK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}

080020ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af02      	add	r7, sp, #8
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685c      	ldr	r4, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020e0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ffbd 	bl	8002068 <makeFreeRtosPriority>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4632      	mov	r2, r6
 80020fc:	4629      	mov	r1, r5
 80020fe:	4620      	mov	r0, r4
 8002100:	f000 fe4c 	bl	8002d9c <xTaskCreate>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002118 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f000 f9d5 	bl	80024dc <xQueueGenericCreate>
 8002132:	4603      	mov	r3, r0
#endif
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <osMessagePut+0x1e>
    ticks = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800215a:	f7ff ff9d 	bl	8002098 <inHandlerMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d018      	beq.n	8002196 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002164:	f107 0210 	add.w	r2, r7, #16
 8002168:	f107 0108 	add.w	r1, r7, #8
 800216c:	2300      	movs	r3, #0
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fb08 	bl	8002784 <xQueueGenericSendFromISR>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <osMessagePut+0x42>
      return osErrorOS;
 800217a:	23ff      	movs	r3, #255	; 0xff
 800217c:	e018      	b.n	80021b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <osMessagePut+0x72>
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <osMessagePut+0x7c>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	e00b      	b.n	80021ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002196:	f107 0108 	add.w	r1, r7, #8
 800219a:	2300      	movs	r3, #0
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f9f2 	bl	8002588 <xQueueGenericSend>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <osMessagePut+0x72>
      return osErrorOS;
 80021aa:	23ff      	movs	r3, #255	; 0xff
 80021ac:	e000      	b.n	80021b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08b      	sub	sp, #44	; 0x2c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	617b      	str	r3, [r7, #20]
    return event;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	461c      	mov	r4, r3
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ea:	e054      	b.n	8002296 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d103      	bne.n	8002204 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e009      	b.n	8002218 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <osMessageGet+0x5c>
      ticks = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002218:	f7ff ff3e 	bl	8002098 <inHandlerMode>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01c      	beq.n	800225c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002222:	f107 0220 	add.w	r2, r7, #32
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	68b8      	ldr	r0, [r7, #8]
 8002230:	f000 fc24 	bl	8002a7c <xQueueReceiveFromISR>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800223a:	2310      	movs	r3, #16
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e001      	b.n	8002244 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01d      	beq.n	8002286 <osMessageGet+0xca>
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <osMessageGet+0xe4>)
 800224c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	e014      	b.n	8002286 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	3304      	adds	r3, #4
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	f000 fb28 	bl	80028bc <xQueueReceive>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002272:	2310      	movs	r3, #16
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e006      	b.n	8002286 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <osMessageGet+0xc6>
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <osMessageGet+0xc8>
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	461c      	mov	r4, r3
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	372c      	adds	r7, #44	; 0x2c
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000ed04 	.word	0xe000ed04

080022a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 0208 	add.w	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0208 	add.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d103      	bne.n	8002366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00c      	b.n	8002380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3308      	adds	r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e002      	b.n	8002374 <vListInsert+0x2e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d2f6      	bcs.n	800236e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002436:	f001 fc0d 	bl	8003c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	441a      	add	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	3b01      	subs	r3, #1
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	441a      	add	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d114      	bne.n	80024b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01a      	beq.n	80024ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3310      	adds	r3, #16
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f801 	bl	80034a0 <xTaskRemoveFromEventList>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <xQueueGenericReset+0xcc>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	e009      	b.n	80024ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3310      	adds	r3, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fef2 	bl	80022a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3324      	adds	r3, #36	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff feed 	bl	80022a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024ca:	f001 fbf3 	bl	8003cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericCreate+0x2a>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	613b      	str	r3, [r7, #16]
}
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	3348      	adds	r3, #72	; 0x48
 8002514:	4618      	mov	r0, r3
 8002516:	f001 fcbf 	bl	8003e98 <pvPortMalloc>
 800251a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3348      	adds	r3, #72	; 0x48
 800252a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f805 	bl	8002548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800253e:	69bb      	ldr	r3, [r7, #24]
	}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e002      	b.n	800256a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002576:	2101      	movs	r1, #1
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f7ff ff47 	bl	800240c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericSend+0x32>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <xQueueGenericSend+0x40>
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueGenericSend+0x44>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueGenericSend+0x46>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <xQueueGenericSend+0x60>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025e4:	bf00      	nop
 80025e6:	e7fe      	b.n	80025e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSend+0x6e>
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <xQueueGenericSend+0x72>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <xQueueGenericSend+0x74>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSend+0x8e>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	623b      	str	r3, [r7, #32]
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002616:	f001 f8e5 	bl	80037e4 <xTaskGetSchedulerState>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <xQueueGenericSend+0x9e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <xQueueGenericSend+0xa2>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <xQueueGenericSend+0xa4>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSend+0xbe>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	61fb      	str	r3, [r7, #28]
}
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002646:	f001 fb05 	bl	8003c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <xQueueGenericSend+0xd4>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d129      	bne.n	80026b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002662:	f000 fa8b 	bl	8002b7c <prvCopyDataToQueue>
 8002666:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff13 	bl	80034a0 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <xQueueGenericSend+0x1f8>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e00a      	b.n	80026a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <xQueueGenericSend+0x1f8>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026a8:	f001 fb04 	bl	8003cb4 <vPortExitCritical>
				return pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e063      	b.n	8002778 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026b6:	f001 fafd 	bl	8003cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e05c      	b.n	8002778 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 ff4b 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026d2:	f001 faef 	bl	8003cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026d6:	f000 fcfb 	bl	80030d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026da:	f001 fabb 	bl	8003c54 <vPortEnterCritical>
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ea:	d103      	bne.n	80026f4 <xQueueGenericSend+0x16c>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d103      	bne.n	800270a <xQueueGenericSend+0x182>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270a:	f001 fad3 	bl	8003cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800270e:	1d3a      	adds	r2, r7, #4
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f000 ff3a 	bl	8003590 <xTaskCheckForTimeOut>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d124      	bne.n	800276c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002724:	f000 fb22 	bl	8002d6c <prvIsQueueFull>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	3310      	adds	r3, #16
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fe8e 	bl	8003458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800273c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800273e:	f000 faad 	bl	8002c9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002742:	f000 fcd3 	bl	80030ec <xTaskResumeAll>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f af7c 	bne.w	8002646 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <xQueueGenericSend+0x1f8>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	e772      	b.n	8002646 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 fa9b 	bl	8002c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002766:	f000 fcc1 	bl	80030ec <xTaskResumeAll>
 800276a:	e76c      	b.n	8002646 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800276c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276e:	f000 fa95 	bl	8002c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002772:	f000 fcbb 	bl	80030ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002778:	4618      	mov	r0, r3
 800277a:	3738      	adds	r7, #56	; 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	; 0x40
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <xQueueGenericSendFromISR+0x3c>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <xQueueGenericSendFromISR+0x40>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <xQueueGenericSendFromISR+0x42>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d103      	bne.n	80027ee <xQueueGenericSendFromISR+0x6a>
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <xQueueGenericSendFromISR+0x6e>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <xQueueGenericSendFromISR+0x70>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	623b      	str	r3, [r7, #32]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800280e:	f001 fb03 	bl	8003e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002812:	f3ef 8211 	mrs	r2, BASEPRI
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800282a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <xQueueGenericSendFromISR+0xbc>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d12f      	bne.n	80028a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002856:	f000 f991 	bl	8002b7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800285a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d112      	bne.n	800288a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	3324      	adds	r3, #36	; 0x24
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fe15 	bl	80034a0 <xTaskRemoveFromEventList>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e007      	b.n	800289a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800288a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800288e:	3301      	adds	r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	b25a      	sxtb	r2, r3
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800289a:	2301      	movs	r3, #1
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800289e:	e001      	b.n	80028a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3740      	adds	r7, #64	; 0x40
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <xQueueReceive+0x30>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	623b      	str	r3, [r7, #32]
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <xQueueReceive+0x3e>
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <xQueueReceive+0x42>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <xQueueReceive+0x44>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueReceive+0x5e>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61fb      	str	r3, [r7, #28]
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800291a:	f000 ff63 	bl	80037e4 <xTaskGetSchedulerState>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <xQueueReceive+0x6e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <xQueueReceive+0x72>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <xQueueReceive+0x74>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueReceive+0x8e>
	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	61bb      	str	r3, [r7, #24]
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800294a:	f001 f983 	bl	8003c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01f      	beq.n	800299a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295e:	f000 f977 	bl	8002c50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	3310      	adds	r3, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fd92 	bl	80034a0 <xTaskRemoveFromEventList>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002982:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <xQueueReceive+0x1bc>)
 8002984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002992:	f001 f98f 	bl	8003cb4 <vPortExitCritical>
				return pdPASS;
 8002996:	2301      	movs	r3, #1
 8002998:	e069      	b.n	8002a6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029a0:	f001 f988 	bl	8003cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e062      	b.n	8002a6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fdd6 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029bc:	f001 f97a 	bl	8003cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c0:	f000 fb86 	bl	80030d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029c4:	f001 f946 	bl	8003c54 <vPortEnterCritical>
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d103      	bne.n	80029de <xQueueReceive+0x122>
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d103      	bne.n	80029f4 <xQueueReceive+0x138>
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f4:	f001 f95e 	bl	8003cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fdc5 	bl	8003590 <xTaskCheckForTimeOut>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d123      	bne.n	8002a54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f997 	bl	8002d40 <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fd19 	bl	8003458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a28:	f000 f938 	bl	8002c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a2c:	f000 fb5e 	bl	80030ec <xTaskResumeAll>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d189      	bne.n	800294a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <xQueueReceive+0x1bc>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	e780      	b.n	800294a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f927 	bl	8002c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a4e:	f000 fb4d 	bl	80030ec <xTaskResumeAll>
 8002a52:	e77a      	b.n	800294a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a56:	f000 f921 	bl	8002c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a5a:	f000 fb47 	bl	80030ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a60:	f000 f96e 	bl	8002d40 <prvIsQueueEmpty>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f43f af6f 	beq.w	800294a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	; 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	623b      	str	r3, [r7, #32]
}
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <xQueueReceiveFromISR+0x3a>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <xQueueReceiveFromISR+0x3e>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueReceiveFromISR+0x40>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	61fb      	str	r3, [r7, #28]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ad6:	f001 f99f 	bl	8003e18 <vPortValidateInterruptPriority>
	__asm volatile
 8002ada:	f3ef 8211 	mrs	r2, BASEPRI
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	61ba      	str	r2, [r7, #24]
 8002af0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002af2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02f      	beq.n	8002b62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b10:	f000 f89e 	bl	8002c50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d112      	bne.n	8002b4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	3310      	adds	r3, #16
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fcb4 	bl	80034a0 <xTaskRemoveFromEventList>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b50:	3301      	adds	r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	e001      	b.n	8002b66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f383 8811 	msr	BASEPRI, r3
}
 8002b70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3738      	adds	r7, #56	; 0x38
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14d      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fe3a 	bl	8003820 <xTaskPriorityDisinherit>
 8002bac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e043      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d119      	bne.n	8002bf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6858      	ldr	r0, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	f001 fbd4 	bl	8004374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d32b      	bcc.n	8002c3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e026      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68d8      	ldr	r0, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	f001 fbba 	bl	8004374 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	425b      	negs	r3, r3
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	425b      	negs	r3, r3
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d105      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c46:	697b      	ldr	r3, [r7, #20]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d303      	bcc.n	8002c84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f001 fb70 	bl	8004374 <memcpy>
	}
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ca4:	f000 ffd6 	bl	8003c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cb0:	e011      	b.n	8002cd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3324      	adds	r3, #36	; 0x24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fbee 	bl	80034a0 <xTaskRemoveFromEventList>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cca:	f000 fcc3 	bl	8003654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dce9      	bgt.n	8002cb2 <prvUnlockQueue+0x16>
 8002cde:	e000      	b.n	8002ce2 <prvUnlockQueue+0x46>
					break;
 8002ce0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cea:	f000 ffe3 	bl	8003cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cee:	f000 ffb1 	bl	8003c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cfa:	e011      	b.n	8002d20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3310      	adds	r3, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fbc9 	bl	80034a0 <xTaskRemoveFromEventList>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d14:	f000 fc9e 	bl	8003654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dce9      	bgt.n	8002cfc <prvUnlockQueue+0x60>
 8002d28:	e000      	b.n	8002d2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d34:	f000 ffbe 	bl	8003cb4 <vPortExitCritical>
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d48:	f000 ff84 	bl	8003c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e001      	b.n	8002d5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d5e:	f000 ffa9 	bl	8003cb4 <vPortExitCritical>

	return xReturn;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d74:	f000 ff6e 	bl	8003c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d102      	bne.n	8002d8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e001      	b.n	8002d8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d8e:	f000 ff91 	bl	8003cb4 <vPortExitCritical>

	return xReturn;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af04      	add	r7, sp, #16
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 f871 	bl	8003e98 <pvPortMalloc>
 8002db6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dbe:	20a0      	movs	r0, #160	; 0xa0
 8002dc0:	f001 f86a 	bl	8003e98 <pvPortMalloc>
 8002dc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd2:	e005      	b.n	8002de0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f001 f92b 	bl	8004030 <vPortFree>
 8002dda:	e001      	b.n	8002de0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d013      	beq.n	8002e0e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f80f 	bl	8002e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e02:	69f8      	ldr	r0, [r7, #28]
 8002e04:	f000 f8aa 	bl	8002f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e002      	b.n	8002e14 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e14:	69bb      	ldr	r3, [r7, #24]
	}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f023 0307 	bic.w	r3, r3, #7
 8002e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	617b      	str	r3, [r7, #20]
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01f      	beq.n	8002eae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e012      	b.n	8002e9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	7819      	ldrb	r1, [r3, #0]
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	3334      	adds	r3, #52	; 0x34
 8002e84:	460a      	mov	r2, r1
 8002e86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3301      	adds	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d9e9      	bls.n	8002e74 <prvInitialiseNewTask+0x54>
 8002ea0:	e000      	b.n	8002ea4 <prvInitialiseNewTask+0x84>
			{
				break;
 8002ea2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eac:	e003      	b.n	8002eb6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d901      	bls.n	8002ec0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	2200      	movs	r2, #0
 8002ed0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fa04 	bl	80022e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	3318      	adds	r3, #24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f9ff 	bl	80022e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	f1c3 0207 	rsb	r2, r3, #7
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	334c      	adds	r3, #76	; 0x4c
 8002f10:	224c      	movs	r2, #76	; 0x4c
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 f9a9 	bl	800426c <memset>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <prvInitialiseNewTask+0x130>)
 8002f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <prvInitialiseNewTask+0x134>)
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <prvInitialiseNewTask+0x138>)
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	69b8      	ldr	r0, [r7, #24]
 8002f32:	f000 fd61 	bl	80039f8 <pxPortInitialiseStack>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f48:	bf00      	nop
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20001234 	.word	0x20001234
 8002f54:	2000129c 	.word	0x2000129c
 8002f58:	20001304 	.word	0x20001304

08002f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f64:	f000 fe76 	bl	8003c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f68:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <prvAddNewTaskToReadyList+0xb8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	4a29      	ldr	r2, [pc, #164]	; (8003014 <prvAddNewTaskToReadyList+0xb8>)
 8002f70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <prvAddNewTaskToReadyList+0xbc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f7a:	4a27      	ldr	r2, [pc, #156]	; (8003018 <prvAddNewTaskToReadyList+0xbc>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <prvAddNewTaskToReadyList+0xb8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d110      	bne.n	8002faa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f88:	f000 fb88 	bl	800369c <prvInitialiseTaskLists>
 8002f8c:	e00d      	b.n	8002faa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <prvAddNewTaskToReadyList+0xc0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <prvAddNewTaskToReadyList+0xbc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d802      	bhi.n	8002faa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <prvAddNewTaskToReadyList+0xbc>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <prvAddNewTaskToReadyList+0xc4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <prvAddNewTaskToReadyList+0xc4>)
 8002fb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <prvAddNewTaskToReadyList+0xc8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <prvAddNewTaskToReadyList+0xc8>)
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <prvAddNewTaskToReadyList+0xcc>)
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7ff f98e 	bl	80022fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fe2:	f000 fe67 	bl	8003cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <prvAddNewTaskToReadyList+0xc0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <prvAddNewTaskToReadyList+0xbc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <prvAddNewTaskToReadyList+0xd0>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200001e0 	.word	0x200001e0
 8003018:	200000e0 	.word	0x200000e0
 800301c:	200001ec 	.word	0x200001ec
 8003020:	200001fc 	.word	0x200001fc
 8003024:	200001e8 	.word	0x200001e8
 8003028:	200000e4 	.word	0x200000e4
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <vTaskStartScheduler+0x80>)
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2300      	movs	r3, #0
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	491c      	ldr	r1, [pc, #112]	; (80030b4 <vTaskStartScheduler+0x84>)
 8003044:	481c      	ldr	r0, [pc, #112]	; (80030b8 <vTaskStartScheduler+0x88>)
 8003046:	f7ff fea9 	bl	8002d9c <xTaskCreate>
 800304a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d11b      	bne.n	800308a <vTaskStartScheduler+0x5a>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	60bb      	str	r3, [r7, #8]
}
 8003064:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <vTaskStartScheduler+0x8c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	334c      	adds	r3, #76	; 0x4c
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <vTaskStartScheduler+0x90>)
 800306e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <vTaskStartScheduler+0x94>)
 8003072:	f04f 32ff 	mov.w	r2, #4294967295
 8003076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <vTaskStartScheduler+0x98>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <vTaskStartScheduler+0x9c>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003084:	f000 fd44 	bl	8003b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003088:	e00e      	b.n	80030a8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d10a      	bne.n	80030a8 <vTaskStartScheduler+0x78>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vTaskStartScheduler+0x76>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000204 	.word	0x20000204
 80030b4:	080044e0 	.word	0x080044e0
 80030b8:	0800366d 	.word	0x0800366d
 80030bc:	200000e0 	.word	0x200000e0
 80030c0:	2000005c 	.word	0x2000005c
 80030c4:	20000200 	.word	0x20000200
 80030c8:	200001ec 	.word	0x200001ec
 80030cc:	200001e4 	.word	0x200001e4

080030d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <vTaskSuspendAll+0x18>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <vTaskSuspendAll+0x18>)
 80030dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	20000208 	.word	0x20000208

080030ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <xTaskResumeAll+0x114>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <xTaskResumeAll+0x2c>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	603b      	str	r3, [r7, #0]
}
 8003114:	bf00      	nop
 8003116:	e7fe      	b.n	8003116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003118:	f000 fd9c 	bl	8003c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800311c:	4b38      	ldr	r3, [pc, #224]	; (8003200 <xTaskResumeAll+0x114>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	4a37      	ldr	r2, [pc, #220]	; (8003200 <xTaskResumeAll+0x114>)
 8003124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <xTaskResumeAll+0x114>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d161      	bne.n	80031f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800312e:	4b35      	ldr	r3, [pc, #212]	; (8003204 <xTaskResumeAll+0x118>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d05d      	beq.n	80031f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003136:	e02e      	b.n	8003196 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003138:	4b33      	ldr	r3, [pc, #204]	; (8003208 <xTaskResumeAll+0x11c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3318      	adds	r3, #24
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f937 	bl	80023b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3304      	adds	r3, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f932 	bl	80023b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <xTaskResumeAll+0x120>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	4a2a      	ldr	r2, [pc, #168]	; (800320c <xTaskResumeAll+0x120>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4a27      	ldr	r2, [pc, #156]	; (8003210 <xTaskResumeAll+0x124>)
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7ff f8be 	bl	80022fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <xTaskResumeAll+0x128>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <xTaskResumeAll+0x12c>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <xTaskResumeAll+0x11c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1cc      	bne.n	8003138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031a4:	f000 fafe 	bl	80037a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <xTaskResumeAll+0x130>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031b4:	f000 f836 	bl	8003224 <xTaskIncrementTick>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <xTaskResumeAll+0x12c>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f1      	bne.n	80031b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <xTaskResumeAll+0x130>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <xTaskResumeAll+0x12c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031de:	2301      	movs	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <xTaskResumeAll+0x134>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031f2:	f000 fd5f 	bl	8003cb4 <vPortExitCritical>

	return xAlreadyYielded;
 80031f6:	68bb      	ldr	r3, [r7, #8]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000208 	.word	0x20000208
 8003204:	200001e0 	.word	0x200001e0
 8003208:	200001a0 	.word	0x200001a0
 800320c:	200001e8 	.word	0x200001e8
 8003210:	200000e4 	.word	0x200000e4
 8003214:	200000e0 	.word	0x200000e0
 8003218:	200001f4 	.word	0x200001f4
 800321c:	200001f0 	.word	0x200001f0
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <xTaskIncrementTick+0x144>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 808e 	bne.w	8003354 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <xTaskIncrementTick+0x148>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003240:	4a4a      	ldr	r2, [pc, #296]	; (800336c <xTaskIncrementTick+0x148>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d120      	bne.n	800328e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800324c:	4b48      	ldr	r3, [pc, #288]	; (8003370 <xTaskIncrementTick+0x14c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <xTaskIncrementTick+0x48>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	603b      	str	r3, [r7, #0]
}
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <xTaskIncrementTick+0x46>
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <xTaskIncrementTick+0x14c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b40      	ldr	r3, [pc, #256]	; (8003374 <xTaskIncrementTick+0x150>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a3e      	ldr	r2, [pc, #248]	; (8003370 <xTaskIncrementTick+0x14c>)
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <xTaskIncrementTick+0x150>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <xTaskIncrementTick+0x154>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <xTaskIncrementTick+0x154>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	f000 fa8b 	bl	80037a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <xTaskIncrementTick+0x158>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	429a      	cmp	r2, r3
 8003296:	d348      	bcc.n	800332a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <xTaskIncrementTick+0x14c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <xTaskIncrementTick+0x158>)
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	601a      	str	r2, [r3, #0]
					break;
 80032aa:	e03e      	b.n	800332a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <xTaskIncrementTick+0x14c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d203      	bcs.n	80032cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032c4:	4a2d      	ldr	r2, [pc, #180]	; (800337c <xTaskIncrementTick+0x158>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032ca:	e02e      	b.n	800332a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f871 	bl	80023b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3318      	adds	r3, #24
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f868 	bl	80023b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <xTaskIncrementTick+0x15c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	4a22      	ldr	r2, [pc, #136]	; (8003380 <xTaskIncrementTick+0x15c>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <xTaskIncrementTick+0x160>)
 8003308:	441a      	add	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7fe fff4 	bl	80022fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <xTaskIncrementTick+0x164>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d3b9      	bcc.n	8003298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003328:	e7b6      	b.n	8003298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <xTaskIncrementTick+0x164>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	4914      	ldr	r1, [pc, #80]	; (8003384 <xTaskIncrementTick+0x160>)
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d901      	bls.n	8003346 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003342:	2301      	movs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <xTaskIncrementTick+0x168>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e004      	b.n	800335e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <xTaskIncrementTick+0x16c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <xTaskIncrementTick+0x16c>)
 800335c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000208 	.word	0x20000208
 800336c:	200001e4 	.word	0x200001e4
 8003370:	20000198 	.word	0x20000198
 8003374:	2000019c 	.word	0x2000019c
 8003378:	200001f8 	.word	0x200001f8
 800337c:	20000200 	.word	0x20000200
 8003380:	200001e8 	.word	0x200001e8
 8003384:	200000e4 	.word	0x200000e4
 8003388:	200000e0 	.word	0x200000e0
 800338c:	200001f4 	.word	0x200001f4
 8003390:	200001f0 	.word	0x200001f0

08003394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <vTaskSwitchContext+0xac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <vTaskSwitchContext+0xb0>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033a8:	e044      	b.n	8003434 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <vTaskSwitchContext+0xb0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <vTaskSwitchContext+0xb4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	f1c3 031f 	rsb	r3, r3, #31
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	4921      	ldr	r1, [pc, #132]	; (800344c <vTaskSwitchContext+0xb8>)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	607b      	str	r3, [r7, #4]
}
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <vTaskSwitchContext+0x5a>
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <vTaskSwitchContext+0xb8>)
 80033fc:	4413      	add	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3308      	adds	r3, #8
 8003412:	429a      	cmp	r2, r3
 8003414:	d104      	bne.n	8003420 <vTaskSwitchContext+0x8c>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <vTaskSwitchContext+0xbc>)
 8003428:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <vTaskSwitchContext+0xbc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	334c      	adds	r3, #76	; 0x4c
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <vTaskSwitchContext+0xc0>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000208 	.word	0x20000208
 8003444:	200001f4 	.word	0x200001f4
 8003448:	200001e8 	.word	0x200001e8
 800344c:	200000e4 	.word	0x200000e4
 8003450:	200000e0 	.word	0x200000e0
 8003454:	2000005c 	.word	0x2000005c

08003458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <vTaskPlaceOnEventList+0x44>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3318      	adds	r3, #24
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe ff5d 	bl	8002346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800348c:	2101      	movs	r1, #1
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f000 fa4c 	bl	800392c <prvAddCurrentTaskToDelayedList>
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200000e0 	.word	0x200000e0

080034a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60fb      	str	r3, [r7, #12]
}
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3318      	adds	r3, #24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe ff71 	bl	80023b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <xTaskRemoveFromEventList+0xac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11c      	bne.n	8003518 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff68 	bl	80023b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <xTaskRemoveFromEventList+0xb0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <xTaskRemoveFromEventList+0xb0>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <xTaskRemoveFromEventList+0xb4>)
 8003508:	441a      	add	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fef4 	bl	80022fe <vListInsertEnd>
 8003516:	e005      	b.n	8003524 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3318      	adds	r3, #24
 800351c:	4619      	mov	r1, r3
 800351e:	480e      	ldr	r0, [pc, #56]	; (8003558 <xTaskRemoveFromEventList+0xb8>)
 8003520:	f7fe feed 	bl	80022fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <xTaskRemoveFromEventList+0xbc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d905      	bls.n	800353e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <xTaskRemoveFromEventList+0xc0>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e001      	b.n	8003542 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003542:	697b      	ldr	r3, [r7, #20]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000208 	.word	0x20000208
 8003550:	200001e8 	.word	0x200001e8
 8003554:	200000e4 	.word	0x200000e4
 8003558:	200001a0 	.word	0x200001a0
 800355c:	200000e0 	.word	0x200000e0
 8003560:	200001f4 	.word	0x200001f4

08003564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <vTaskInternalSetTimeOutState+0x24>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <vTaskInternalSetTimeOutState+0x28>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	200001f8 	.word	0x200001f8
 800358c:	200001e4 	.word	0x200001e4

08003590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035d2:	f000 fb3f 	bl	8003c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <xTaskCheckForTimeOut+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d102      	bne.n	80035f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e023      	b.n	800363e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <xTaskCheckForTimeOut+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d007      	beq.n	8003612 <xTaskCheckForTimeOut+0x82>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e015      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d20b      	bcs.n	8003634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff9b 	bl	8003564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e004      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f000 fb39 	bl	8003cb4 <vPortExitCritical>

	return xReturn;
 8003642:	69fb      	ldr	r3, [r7, #28]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200001e4 	.word	0x200001e4
 8003650:	200001f8 	.word	0x200001f8

08003654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <vTaskMissedYield+0x14>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	200001f4 	.word	0x200001f4

0800366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003674:	f000 f852 	bl	800371c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <prvIdleTask+0x28>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d9f9      	bls.n	8003674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <prvIdleTask+0x2c>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003690:	e7f0      	b.n	8003674 <prvIdleTask+0x8>
 8003692:	bf00      	nop
 8003694:	200000e4 	.word	0x200000e4
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	e00c      	b.n	80036c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <prvInitialiseTaskLists+0x60>)
 80036b4:	4413      	add	r3, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fdf4 	bl	80022a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d9ef      	bls.n	80036a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ca:	f7fe fdeb 	bl	80022a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036d0:	f7fe fde8 	bl	80022a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <prvInitialiseTaskLists+0x6c>)
 80036d6:	f7fe fde5 	bl	80022a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <prvInitialiseTaskLists+0x70>)
 80036dc:	f7fe fde2 	bl	80022a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <prvInitialiseTaskLists+0x74>)
 80036e2:	f7fe fddf 	bl	80022a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <prvInitialiseTaskLists+0x78>)
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <prvInitialiseTaskLists+0x7c>)
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200000e4 	.word	0x200000e4
 8003700:	20000170 	.word	0x20000170
 8003704:	20000184 	.word	0x20000184
 8003708:	200001a0 	.word	0x200001a0
 800370c:	200001b4 	.word	0x200001b4
 8003710:	200001cc 	.word	0x200001cc
 8003714:	20000198 	.word	0x20000198
 8003718:	2000019c 	.word	0x2000019c

0800371c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003722:	e019      	b.n	8003758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003724:	f000 fa96 	bl	8003c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <prvCheckTasksWaitingTermination+0x50>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fe3f 	bl	80023b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3b01      	subs	r3, #1
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 8003742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800374c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800374e:	f000 fab1 	bl	8003cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f810 	bl	8003778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e1      	bne.n	8003724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200001b4 	.word	0x200001b4
 8003770:	200001e0 	.word	0x200001e0
 8003774:	200001c8 	.word	0x200001c8

08003778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fd79 	bl	800427c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fc4e 	bl	8004030 <vPortFree>
			vPortFree( pxTCB );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fc4b 	bl	8004030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <prvResetNextTaskUnblockTime+0x38>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvResetNextTaskUnblockTime+0x3c>)
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037bc:	e008      	b.n	80037d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <prvResetNextTaskUnblockTime+0x38>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <prvResetNextTaskUnblockTime+0x3c>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000198 	.word	0x20000198
 80037e0:	20000200 	.word	0x20000200

080037e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <xTaskGetSchedulerState+0x34>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037f2:	2301      	movs	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e008      	b.n	800380a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <xTaskGetSchedulerState+0x38>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003800:	2302      	movs	r3, #2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e001      	b.n	800380a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800380a:	687b      	ldr	r3, [r7, #4]
	}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	200001ec 	.word	0x200001ec
 800381c:	20000208 	.word	0x20000208

08003820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06e      	beq.n	8003914 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003836:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <xTaskPriorityDisinherit+0x100>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d00a      	beq.n	8003856 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60bb      	str	r3, [r7, #8]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	429a      	cmp	r2, r3
 8003888:	d044      	beq.n	8003914 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d140      	bne.n	8003914 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3304      	adds	r3, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fd8e 	bl	80023b8 <uxListRemove>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d115      	bne.n	80038ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	491f      	ldr	r1, [pc, #124]	; (8003924 <xTaskPriorityDisinherit+0x104>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xTaskPriorityDisinherit+0xae>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2201      	movs	r2, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <xTaskPriorityDisinherit+0x108>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4013      	ands	r3, r2
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <xTaskPriorityDisinherit+0x108>)
 80038cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f1c3 0207 	rsb	r2, r3, #7
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2201      	movs	r2, #1
 80038e8:	409a      	lsls	r2, r3
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <xTaskPriorityDisinherit+0x108>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <xTaskPriorityDisinherit+0x108>)
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <xTaskPriorityDisinherit+0x104>)
 8003902:	441a      	add	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7fe fcf7 	bl	80022fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003914:	697b      	ldr	r3, [r7, #20]
	}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200000e0 	.word	0x200000e0
 8003924:	200000e4 	.word	0x200000e4
 8003928:	200001e8 	.word	0x200001e8

0800392c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800393c:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fd38 	bl	80023b8 <uxListRemove>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2201      	movs	r2, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4013      	ands	r3, r2
 8003962:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003964:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d10a      	bne.n	8003984 <prvAddCurrentTaskToDelayedList+0x58>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	481a      	ldr	r0, [pc, #104]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800397e:	f7fe fcbe 	bl	80022fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003982:	e026      	b.n	80039d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d209      	bcs.n	80039b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe fccc 	bl	8002346 <vListInsert>
}
 80039ae:	e010      	b.n	80039d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f7fe fcc2 	bl	8002346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d202      	bcs.n	80039d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039cc:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6013      	str	r3, [r2, #0]
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200001e4 	.word	0x200001e4
 80039e0:	200000e0 	.word	0x200000e0
 80039e4:	200001e8 	.word	0x200001e8
 80039e8:	200001cc 	.word	0x200001cc
 80039ec:	2000019c 	.word	0x2000019c
 80039f0:	20000198 	.word	0x20000198
 80039f4:	20000200 	.word	0x20000200

080039f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b04      	subs	r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b04      	subs	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a28:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <pxPortInitialiseStack+0x64>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b14      	subs	r3, #20
 8003a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b04      	subs	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f06f 0202 	mvn.w	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b20      	subs	r3, #32
 8003a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	08003a61 	.word	0x08003a61

08003a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <prvTaskExitError+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d00a      	beq.n	8003a8a <prvTaskExitError+0x2a>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <prvTaskExitError+0x28>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60bb      	str	r3, [r7, #8]
}
 8003a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a9e:	bf00      	nop
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0fc      	beq.n	8003aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	2000000c 	.word	0x2000000c
	...

08003ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <pxCurrentTCBConst2>)
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	6808      	ldr	r0, [r1, #0]
 8003ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aca:	f380 8809 	msr	PSP, r0
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8811 	msr	BASEPRI, r0
 8003ada:	4770      	bx	lr
 8003adc:	f3af 8000 	nop.w

08003ae0 <pxCurrentTCBConst2>:
 8003ae0:	200000e0 	.word	0x200000e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ae8:	4808      	ldr	r0, [pc, #32]	; (8003b0c <prvPortStartFirstTask+0x24>)
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f380 8808 	msr	MSP, r0
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f380 8814 	msr	CONTROL, r0
 8003afa:	b662      	cpsie	i
 8003afc:	b661      	cpsie	f
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	df00      	svc	0
 8003b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed08 	.word	0xe000ed08

08003b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b16:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <xPortStartScheduler+0x120>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a46      	ldr	r2, [pc, #280]	; (8003c34 <xPortStartScheduler+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10a      	bne.n	8003b36 <xPortStartScheduler+0x26>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	613b      	str	r3, [r7, #16]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <xPortStartScheduler+0x120>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3f      	ldr	r2, [pc, #252]	; (8003c38 <xPortStartScheduler+0x128>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10a      	bne.n	8003b56 <xPortStartScheduler+0x46>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b56:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <xPortStartScheduler+0x12c>)
 8003b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <xPortStartScheduler+0x130>)
 8003b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <xPortStartScheduler+0x134>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b84:	e009      	b.n	8003b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003b86:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <xPortStartScheduler+0x134>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <xPortStartScheduler+0x134>)
 8003b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d0ef      	beq.n	8003b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ba6:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <xPortStartScheduler+0x134>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1c3 0307 	rsb	r3, r3, #7
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d00a      	beq.n	8003bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60bb      	str	r3, [r7, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <xPortStartScheduler+0x134>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <xPortStartScheduler+0x134>)
 8003bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <xPortStartScheduler+0x134>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <xPortStartScheduler+0x134>)
 8003bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <xPortStartScheduler+0x138>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <xPortStartScheduler+0x138>)
 8003bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <xPortStartScheduler+0x138>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <xPortStartScheduler+0x138>)
 8003bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bfe:	f000 f8dd 	bl	8003dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <xPortStartScheduler+0x13c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c08:	f000 f8fc 	bl	8003e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <xPortStartScheduler+0x140>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <xPortStartScheduler+0x140>)
 8003c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c18:	f7ff ff66 	bl	8003ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c1c:	f7ff fbba 	bl	8003394 <vTaskSwitchContext>
	prvTaskExitError();
 8003c20:	f7ff ff1e 	bl	8003a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00
 8003c34:	410fc271 	.word	0x410fc271
 8003c38:	410fc270 	.word	0x410fc270
 8003c3c:	e000e400 	.word	0xe000e400
 8003c40:	2000020c 	.word	0x2000020c
 8003c44:	20000210 	.word	0x20000210
 8003c48:	e000ed20 	.word	0xe000ed20
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	e000ef34 	.word	0xe000ef34

08003c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	607b      	str	r3, [r7, #4]
}
 8003c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <vPortEnterCritical+0x58>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <vPortEnterCritical+0x58>)
 8003c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <vPortEnterCritical+0x58>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10f      	bne.n	8003ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <vPortEnterCritical+0x5c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	603b      	str	r3, [r7, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <vPortEnterCritical+0x4a>
	}
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	2000000c 	.word	0x2000000c
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <vPortExitCritical+0x50>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <vPortExitCritical+0x24>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	607b      	str	r3, [r7, #4]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <vPortExitCritical+0x50>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <vPortExitCritical+0x50>)
 8003ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <vPortExitCritical+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <vPortExitCritical+0x42>
 8003cea:	2300      	movs	r3, #0
 8003cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f383 8811 	msr	BASEPRI, r3
}
 8003cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c
	...

08003d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f01e 0f10 	tst.w	lr, #16
 8003d20:	bf08      	it	eq
 8003d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d34:	f380 8811 	msr	BASEPRI, r0
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f7ff fb28 	bl	8003394 <vTaskSwitchContext>
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f380 8811 	msr	BASEPRI, r0
 8003d4c:	bc09      	pop	{r0, r3}
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	f01e 0f10 	tst.w	lr, #16
 8003d5a:	bf08      	it	eq
 8003d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d60:	f380 8809 	msr	PSP, r0
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst>:
 8003d70:	200000e0 	.word	0x200000e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
}
 8003d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d92:	f7ff fa47 	bl	8003224 <xTaskIncrementTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <SysTick_Handler+0x40>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f383 8811 	msr	BASEPRI, r3
}
 8003dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <vPortSetupTimerInterrupt+0x34>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <vPortSetupTimerInterrupt+0x38>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <vPortSetupTimerInterrupt+0x3c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <vPortSetupTimerInterrupt+0x40>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <vPortSetupTimerInterrupt+0x44>)
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <vPortSetupTimerInterrupt+0x34>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010
 8003df4:	e000e018 	.word	0xe000e018
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	10624dd3 	.word	0x10624dd3
 8003e00:	e000e014 	.word	0xe000e014

08003e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e14 <vPortEnableVFP+0x10>
 8003e08:	6801      	ldr	r1, [r0, #0]
 8003e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e0e:	6001      	str	r1, [r0, #0]
 8003e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e12:	bf00      	nop
 8003e14:	e000ed88 	.word	0xe000ed88

08003e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e1e:	f3ef 8305 	mrs	r3, IPSR
 8003e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d914      	bls.n	8003e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <vPortValidateInterruptPriority+0x70>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <vPortValidateInterruptPriority+0x74>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	7afa      	ldrb	r2, [r7, #11]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20a      	bcs.n	8003e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <vPortValidateInterruptPriority+0x78>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <vPortValidateInterruptPriority+0x7c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d90a      	bls.n	8003e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	603b      	str	r3, [r7, #0]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <vPortValidateInterruptPriority+0x60>
	}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000e3f0 	.word	0xe000e3f0
 8003e8c:	2000020c 	.word	0x2000020c
 8003e90:	e000ed0c 	.word	0xe000ed0c
 8003e94:	20000210 	.word	0x20000210

08003e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ea4:	f7ff f914 	bl	80030d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ea8:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <pvPortMalloc+0x180>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003eb0:	f000 f920 	bl	80040f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <pvPortMalloc+0x184>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 8093 	bne.w	8003fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01d      	beq.n	8003f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ec8:	2208      	movs	r2, #8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d014      	beq.n	8003f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f023 0307 	bic.w	r3, r3, #7
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <pvPortMalloc+0x6c>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	617b      	str	r3, [r7, #20]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06e      	beq.n	8003fe8 <pvPortMalloc+0x150>
 8003f0a:	4b45      	ldr	r3, [pc, #276]	; (8004020 <pvPortMalloc+0x188>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d869      	bhi.n	8003fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f14:	4b43      	ldr	r3, [pc, #268]	; (8004024 <pvPortMalloc+0x18c>)
 8003f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <pvPortMalloc+0x18c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f1e:	e004      	b.n	8003f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d903      	bls.n	8003f3c <pvPortMalloc+0xa4>
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f1      	bne.n	8003f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <pvPortMalloc+0x180>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d050      	beq.n	8003fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	2308      	movs	r3, #8
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d91f      	bls.n	8003fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <pvPortMalloc+0xf8>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	613b      	str	r3, [r7, #16]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fa2:	69b8      	ldr	r0, [r7, #24]
 8003fa4:	f000 f908 	bl	80041b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <pvPortMalloc+0x188>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <pvPortMalloc+0x188>)
 8003fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <pvPortMalloc+0x188>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <pvPortMalloc+0x190>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d203      	bcs.n	8003fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <pvPortMalloc+0x188>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <pvPortMalloc+0x190>)
 8003fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <pvPortMalloc+0x184>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <pvPortMalloc+0x194>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a11      	ldr	r2, [pc, #68]	; (800402c <pvPortMalloc+0x194>)
 8003fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fe8:	f7ff f880 	bl	80030ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <pvPortMalloc+0x174>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60fb      	str	r3, [r7, #12]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <pvPortMalloc+0x172>
	return pvReturn;
 800400c:	69fb      	ldr	r3, [r7, #28]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000121c 	.word	0x2000121c
 800401c:	20001230 	.word	0x20001230
 8004020:	20001220 	.word	0x20001220
 8004024:	20001214 	.word	0x20001214
 8004028:	20001224 	.word	0x20001224
 800402c:	20001228 	.word	0x20001228

08004030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04d      	beq.n	80040de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004042:	2308      	movs	r3, #8
 8004044:	425b      	negs	r3, r3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <vPortFree+0xb8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <vPortFree+0x44>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60fb      	str	r3, [r7, #12]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <vPortFree+0x62>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	60bb      	str	r3, [r7, #8]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <vPortFree+0xb8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01e      	beq.n	80040de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11a      	bne.n	80040de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <vPortFree+0xb8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040b8:	f7ff f80a 	bl	80030d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <vPortFree+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <vPortFree+0xbc>)
 80040c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f000 f874 	bl	80041b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <vPortFree+0xc0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <vPortFree+0xc0>)
 80040d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040da:	f7ff f807 	bl	80030ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20001230 	.word	0x20001230
 80040ec:	20001220 	.word	0x20001220
 80040f0:	2000122c 	.word	0x2000122c

080040f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <prvHeapInit+0xac>)
 8004102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3307      	adds	r3, #7
 8004112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <prvHeapInit+0xac>)
 8004124:	4413      	add	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <prvHeapInit+0xb0>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <prvHeapInit+0xb0>)
 8004134:	2200      	movs	r2, #0
 8004136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004140:	2208      	movs	r2, #8
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <prvHeapInit+0xb4>)
 8004154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <prvHeapInit+0xb4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <prvHeapInit+0xb4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <prvHeapInit+0xb4>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <prvHeapInit+0xb8>)
 8004182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <prvHeapInit+0xbc>)
 800418a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <prvHeapInit+0xc0>)
 800418e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000214 	.word	0x20000214
 80041a4:	20001214 	.word	0x20001214
 80041a8:	2000121c 	.word	0x2000121c
 80041ac:	20001224 	.word	0x20001224
 80041b0:	20001220 	.word	0x20001220
 80041b4:	20001230 	.word	0x20001230

080041b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041c0:	4b28      	ldr	r3, [pc, #160]	; (8004264 <prvInsertBlockIntoFreeList+0xac>)
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e002      	b.n	80041cc <prvInsertBlockIntoFreeList+0x14>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d8f7      	bhi.n	80041c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4413      	add	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d108      	bne.n	80041fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	441a      	add	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d118      	bne.n	8004240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <prvInsertBlockIntoFreeList+0xb0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d00d      	beq.n	8004236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e008      	b.n	8004248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <prvInsertBlockIntoFreeList+0xb0>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e003      	b.n	8004248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d002      	beq.n	8004256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20001214 	.word	0x20001214
 8004268:	2000121c 	.word	0x2000121c

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <_reclaim_reent>:
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <_reclaim_reent+0xa8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4283      	cmp	r3, r0
 8004282:	b570      	push	{r4, r5, r6, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	d04b      	beq.n	8004320 <_reclaim_reent+0xa4>
 8004288:	69c3      	ldr	r3, [r0, #28]
 800428a:	b143      	cbz	r3, 800429e <_reclaim_reent+0x22>
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d144      	bne.n	800431c <_reclaim_reent+0xa0>
 8004292:	69e3      	ldr	r3, [r4, #28]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	b111      	cbz	r1, 800429e <_reclaim_reent+0x22>
 8004298:	4620      	mov	r0, r4
 800429a:	f000 f879 	bl	8004390 <_free_r>
 800429e:	6961      	ldr	r1, [r4, #20]
 80042a0:	b111      	cbz	r1, 80042a8 <_reclaim_reent+0x2c>
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 f874 	bl	8004390 <_free_r>
 80042a8:	69e1      	ldr	r1, [r4, #28]
 80042aa:	b111      	cbz	r1, 80042b2 <_reclaim_reent+0x36>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 f86f 	bl	8004390 <_free_r>
 80042b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042b4:	b111      	cbz	r1, 80042bc <_reclaim_reent+0x40>
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f86a 	bl	8004390 <_free_r>
 80042bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042be:	b111      	cbz	r1, 80042c6 <_reclaim_reent+0x4a>
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f865 	bl	8004390 <_free_r>
 80042c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042c8:	b111      	cbz	r1, 80042d0 <_reclaim_reent+0x54>
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 f860 	bl	8004390 <_free_r>
 80042d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80042d2:	b111      	cbz	r1, 80042da <_reclaim_reent+0x5e>
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f85b 	bl	8004390 <_free_r>
 80042da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042dc:	b111      	cbz	r1, 80042e4 <_reclaim_reent+0x68>
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f856 	bl	8004390 <_free_r>
 80042e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042e6:	b111      	cbz	r1, 80042ee <_reclaim_reent+0x72>
 80042e8:	4620      	mov	r0, r4
 80042ea:	f000 f851 	bl	8004390 <_free_r>
 80042ee:	6a23      	ldr	r3, [r4, #32]
 80042f0:	b1b3      	cbz	r3, 8004320 <_reclaim_reent+0xa4>
 80042f2:	4620      	mov	r0, r4
 80042f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042f8:	4718      	bx	r3
 80042fa:	5949      	ldr	r1, [r1, r5]
 80042fc:	b941      	cbnz	r1, 8004310 <_reclaim_reent+0x94>
 80042fe:	3504      	adds	r5, #4
 8004300:	69e3      	ldr	r3, [r4, #28]
 8004302:	2d80      	cmp	r5, #128	; 0x80
 8004304:	68d9      	ldr	r1, [r3, #12]
 8004306:	d1f8      	bne.n	80042fa <_reclaim_reent+0x7e>
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f841 	bl	8004390 <_free_r>
 800430e:	e7c0      	b.n	8004292 <_reclaim_reent+0x16>
 8004310:	680e      	ldr	r6, [r1, #0]
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f83c 	bl	8004390 <_free_r>
 8004318:	4631      	mov	r1, r6
 800431a:	e7ef      	b.n	80042fc <_reclaim_reent+0x80>
 800431c:	2500      	movs	r5, #0
 800431e:	e7ef      	b.n	8004300 <_reclaim_reent+0x84>
 8004320:	bd70      	pop	{r4, r5, r6, pc}
 8004322:	bf00      	nop
 8004324:	2000005c 	.word	0x2000005c

08004328 <__libc_init_array>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	4d0d      	ldr	r5, [pc, #52]	; (8004360 <__libc_init_array+0x38>)
 800432c:	4c0d      	ldr	r4, [pc, #52]	; (8004364 <__libc_init_array+0x3c>)
 800432e:	1b64      	subs	r4, r4, r5
 8004330:	10a4      	asrs	r4, r4, #2
 8004332:	2600      	movs	r6, #0
 8004334:	42a6      	cmp	r6, r4
 8004336:	d109      	bne.n	800434c <__libc_init_array+0x24>
 8004338:	4d0b      	ldr	r5, [pc, #44]	; (8004368 <__libc_init_array+0x40>)
 800433a:	4c0c      	ldr	r4, [pc, #48]	; (800436c <__libc_init_array+0x44>)
 800433c:	f000 f880 	bl	8004440 <_init>
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	2600      	movs	r6, #0
 8004346:	42a6      	cmp	r6, r4
 8004348:	d105      	bne.n	8004356 <__libc_init_array+0x2e>
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004350:	4798      	blx	r3
 8004352:	3601      	adds	r6, #1
 8004354:	e7ee      	b.n	8004334 <__libc_init_array+0xc>
 8004356:	f855 3b04 	ldr.w	r3, [r5], #4
 800435a:	4798      	blx	r3
 800435c:	3601      	adds	r6, #1
 800435e:	e7f2      	b.n	8004346 <__libc_init_array+0x1e>
 8004360:	08004500 	.word	0x08004500
 8004364:	08004500 	.word	0x08004500
 8004368:	08004500 	.word	0x08004500
 800436c:	08004504 	.word	0x08004504

08004370 <__retarget_lock_acquire_recursive>:
 8004370:	4770      	bx	lr

08004372 <__retarget_lock_release_recursive>:
 8004372:	4770      	bx	lr

08004374 <memcpy>:
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	f100 33ff 	add.w	r3, r0, #4294967295
 800437c:	d100      	bne.n	8004380 <memcpy+0xc>
 800437e:	4770      	bx	lr
 8004380:	b510      	push	{r4, lr}
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800438a:	4291      	cmp	r1, r2
 800438c:	d1f9      	bne.n	8004382 <memcpy+0xe>
 800438e:	bd10      	pop	{r4, pc}

08004390 <_free_r>:
 8004390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004392:	2900      	cmp	r1, #0
 8004394:	d044      	beq.n	8004420 <_free_r+0x90>
 8004396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800439a:	9001      	str	r0, [sp, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f1a1 0404 	sub.w	r4, r1, #4
 80043a2:	bfb8      	it	lt
 80043a4:	18e4      	addlt	r4, r4, r3
 80043a6:	f000 f83f 	bl	8004428 <__malloc_lock>
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <_free_r+0x94>)
 80043ac:	9801      	ldr	r0, [sp, #4]
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	b933      	cbnz	r3, 80043c0 <_free_r+0x30>
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6014      	str	r4, [r2, #0]
 80043b6:	b003      	add	sp, #12
 80043b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043bc:	f000 b83a 	b.w	8004434 <__malloc_unlock>
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	d908      	bls.n	80043d6 <_free_r+0x46>
 80043c4:	6825      	ldr	r5, [r4, #0]
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	428b      	cmp	r3, r1
 80043ca:	bf01      	itttt	eq
 80043cc:	6819      	ldreq	r1, [r3, #0]
 80043ce:	685b      	ldreq	r3, [r3, #4]
 80043d0:	1949      	addeq	r1, r1, r5
 80043d2:	6021      	streq	r1, [r4, #0]
 80043d4:	e7ed      	b.n	80043b2 <_free_r+0x22>
 80043d6:	461a      	mov	r2, r3
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b10b      	cbz	r3, 80043e0 <_free_r+0x50>
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d9fa      	bls.n	80043d6 <_free_r+0x46>
 80043e0:	6811      	ldr	r1, [r2, #0]
 80043e2:	1855      	adds	r5, r2, r1
 80043e4:	42a5      	cmp	r5, r4
 80043e6:	d10b      	bne.n	8004400 <_free_r+0x70>
 80043e8:	6824      	ldr	r4, [r4, #0]
 80043ea:	4421      	add	r1, r4
 80043ec:	1854      	adds	r4, r2, r1
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	d1e0      	bne.n	80043b6 <_free_r+0x26>
 80043f4:	681c      	ldr	r4, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6053      	str	r3, [r2, #4]
 80043fa:	440c      	add	r4, r1
 80043fc:	6014      	str	r4, [r2, #0]
 80043fe:	e7da      	b.n	80043b6 <_free_r+0x26>
 8004400:	d902      	bls.n	8004408 <_free_r+0x78>
 8004402:	230c      	movs	r3, #12
 8004404:	6003      	str	r3, [r0, #0]
 8004406:	e7d6      	b.n	80043b6 <_free_r+0x26>
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	1961      	adds	r1, r4, r5
 800440c:	428b      	cmp	r3, r1
 800440e:	bf04      	itt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	6063      	str	r3, [r4, #4]
 8004416:	bf04      	itt	eq
 8004418:	1949      	addeq	r1, r1, r5
 800441a:	6021      	streq	r1, [r4, #0]
 800441c:	6054      	str	r4, [r2, #4]
 800441e:	e7ca      	b.n	80043b6 <_free_r+0x26>
 8004420:	b003      	add	sp, #12
 8004422:	bd30      	pop	{r4, r5, pc}
 8004424:	20001370 	.word	0x20001370

08004428 <__malloc_lock>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__malloc_lock+0x8>)
 800442a:	f7ff bfa1 	b.w	8004370 <__retarget_lock_acquire_recursive>
 800442e:	bf00      	nop
 8004430:	2000136c 	.word	0x2000136c

08004434 <__malloc_unlock>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__malloc_unlock+0x8>)
 8004436:	f7ff bf9c 	b.w	8004372 <__retarget_lock_release_recursive>
 800443a:	bf00      	nop
 800443c:	2000136c 	.word	0x2000136c

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr


LW3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080044f0  080044f0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f0  080044f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001318  20000060  08004558  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001378  08004558  00021378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e5d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9a  00000000  00000000  00030f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d93  00000000  00000000  00034c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000287c  00000000  00000000  00035a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001259f  00000000  00000000  00038287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fce69  00000000  00000000  0004a826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c58  00000000  00000000  00147690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0014c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004430 	.word	0x08004430

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08004430 	.word	0x08004430

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa9a 	bl	800075e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f86b 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8b5 	bl	800039c <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000232:	4a2a      	ldr	r2, [pc, #168]	; (80002dc <main+0xbc>)
 8000234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023c:	e883 0003 	stmia.w	r3, {r0, r1}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 ff2a 	bl	80020a0 <osMessageCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a24      	ldr	r2, [pc, #144]	; (80002e0 <main+0xc0>)
 8000250:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0xc4>)
 8000254:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fede 	bl	800202a <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <main+0xc8>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <main+0xcc>)
 8000276:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fecd 	bl	800202a <osThreadCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <main+0xd0>)
 8000294:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0xd4>)
 8000298:	f107 0414 	add.w	r4, r7, #20
 800029c:	461d      	mov	r5, r3
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	682b      	ldr	r3, [r5, #0]
 80002a4:	6023      	str	r3, [r4, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 febc 	bl	800202a <osThreadCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <main+0xd8>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <main+0xdc>)
 80002ba:	463c      	mov	r4, r7
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	682b      	ldr	r3, [r5, #0]
 80002c4:	6023      	str	r3, [r4, #0]
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80002c6:	463b      	mov	r3, r7
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fead 	bl	800202a <osThreadCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <main+0xe0>)
 80002d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002d6:	f001 fea1 	bl	800201c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002da:	e7fe      	b.n	80002da <main+0xba>
 80002dc:	08004448 	.word	0x08004448
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	0800445c 	.word	0x0800445c
 80002e8:	2000007c 	.word	0x2000007c
 80002ec:	0800447c 	.word	0x0800447c
 80002f0:	20000080 	.word	0x20000080
 80002f4:	0800449c 	.word	0x0800449c
 80002f8:	20000084 	.word	0x20000084
 80002fc:	080044bc 	.word	0x080044bc
 8000300:	20000088 	.word	0x20000088

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2238      	movs	r2, #56	; 0x38
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 ffa2 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 fd04 	bl	8000d34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	2340      	movs	r3, #64	; 0x40
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000342:	2304      	movs	r3, #4
 8000344:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000346:	2355      	movs	r3, #85	; 0x55
 8000348:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800034e:	2302      	movs	r3, #2
 8000350:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000352:	2302      	movs	r3, #2
 8000354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fd9e 	bl	8000e9c <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000366:	f000 f903 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2303      	movs	r3, #3
 8000370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2104      	movs	r1, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f89c 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800038e:	f000 f8ef 	bl	8000570 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3750      	adds	r7, #80	; 0x50
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0x90>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0x90>)
 80003b8:	f043 0310 	orr.w	r3, r3, #16
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0x90>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	f003 0310 	and.w	r3, r3, #16
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x90>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x90>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x90>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80003e2:	2200      	movs	r2, #0
 80003e4:	21ff      	movs	r1, #255	; 0xff
 80003e6:	4812      	ldr	r0, [pc, #72]	; (8000430 <MX_GPIO_Init+0x94>)
 80003e8:	f000 fc8c 	bl	8000d04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80003ec:	23ff      	movs	r3, #255	; 0xff
 80003ee:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4619      	mov	r1, r3
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <MX_GPIO_Init+0x94>)
 8000404:	f000 fae4 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000408:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_GPIO_Init+0x98>)
 800041e:	f000 fad7 	bl	80009d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	48001000 	.word	0x48001000
 8000434:	48000400 	.word	0x48000400

08000438 <StartDefaultTask>:

}

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osEvent event = osMessageGet(myQueue01Handle, 10);
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <StartDefaultTask+0x78>)
 8000442:	6819      	ldr	r1, [r3, #0]
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	220a      	movs	r2, #10
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fe7a 	bl	8002144 <osMessageGet>
	  if (event.value.v == 1){
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d123      	bne.n	800049e <StartDefaultTask+0x66>
		  for(int i = 0; i<0; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e01c      	b.n	8000496 <StartDefaultTask+0x5e>
			  HAL_Delay(200);
 800045c:	20c8      	movs	r0, #200	; 0xc8
 800045e:	f000 f9b5 	bl	80007cc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0<<i, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	b29b      	uxth	r3, r3
 800046c:	2201      	movs	r2, #1
 800046e:	4619      	mov	r1, r3
 8000470:	4810      	ldr	r0, [pc, #64]	; (80004b4 <StartDefaultTask+0x7c>)
 8000472:	f000 fc47 	bl	8000d04 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 8000476:	20c8      	movs	r0, #200	; 0xc8
 8000478:	f000 f9a8 	bl	80007cc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0<<i, GPIO_PIN_RESET);
 800047c:	2201      	movs	r2, #1
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	b29b      	uxth	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <StartDefaultTask+0x7c>)
 800048c:	f000 fc3a 	bl	8000d04 <HAL_GPIO_WritePin>
		  for(int i = 0; i<0; i++){
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3301      	adds	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dbdf      	blt.n	800045c <StartDefaultTask+0x24>
 800049c:	e7d0      	b.n	8000440 <StartDefaultTask+0x8>
		  }
		  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
	  }
	  else if (event.value.v == 0){
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1cd      	bne.n	8000440 <StartDefaultTask+0x8>

		  HAL_GPIO_WritePin(GPIOE, (uint16_t)0x00ff, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	21ff      	movs	r1, #255	; 0xff
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <StartDefaultTask+0x7c>)
 80004aa:	f000 fc2b 	bl	8000d04 <HAL_GPIO_WritePin>
  {
 80004ae:	e7c7      	b.n	8000440 <StartDefaultTask+0x8>
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	48001000 	.word	0x48001000

080004b8 <StartTask02>:
* @retval None
*/
int count = 0;
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==0){
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	4819      	ldr	r0, [pc, #100]	; (800052c <StartTask02+0x74>)
 80004c6:	f000 fc05 	bl	8000cd4 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d129      	bne.n	8000524 <StartTask02+0x6c>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==0);
 80004d0:	bf00      	nop
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4815      	ldr	r0, [pc, #84]	; (800052c <StartTask02+0x74>)
 80004d8:	f000 fbfc 	bl	8000cd4 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f7      	beq.n	80004d2 <StartTask02+0x1a>
		count = (count+1)%2;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <StartTask02+0x78>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3301      	adds	r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	bfb8      	it	lt
 80004f0:	425b      	neglt	r3, r3
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <StartTask02+0x78>)
 80004f4:	6013      	str	r3, [r2, #0]
		if (count == 0){
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <StartTask02+0x78>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d107      	bne.n	800050e <StartTask02+0x56>
			osMessagePut (myQueue01Handle, 0, 10);
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <StartTask02+0x7c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	220a      	movs	r2, #10
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fddc 	bl	80020c4 <osMessagePut>
 800050c:	e00a      	b.n	8000524 <StartTask02+0x6c>
		}
		else if (count == 1) {
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <StartTask02+0x78>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d106      	bne.n	8000524 <StartTask02+0x6c>
			osMessagePut (myQueue01Handle, 1, 10);
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <StartTask02+0x7c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	220a      	movs	r2, #10
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fdd0 	bl	80020c4 <osMessagePut>
		}
	}
    osDelay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fda7 	bl	8002078 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==0){
 800052a:	e7c9      	b.n	80004c0 <StartTask02+0x8>
 800052c:	48000400 	.word	0x48000400
 8000530:	20000090 	.word	0x20000090
 8000534:	2000008c 	.word	0x2000008c

08000538 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
 8000540:	e7fe      	b.n	8000540 <StartTask03+0x8>

08000542 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f001 fd94 	bl	8002078 <osDelay>
 8000550:	e7fb      	b.n	800054a <StartTask04+0x8>

08000552 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000562:	d101      	bne.n	8000568 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000564:	f000 f914 	bl	8000790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_MspInit+0x50>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_MspInit+0x50>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6613      	str	r3, [r2, #96]	; 0x60
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x50>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x50>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <HAL_MspInit+0x50>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	6593      	str	r3, [r2, #88]	; 0x58
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x50>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	210f      	movs	r1, #15
 80005b6:	f06f 0001 	mvn.w	r0, #1
 80005ba:	f000 f9e1 	bl	8000980 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005be:	f000 fc5d 	bl	8000e7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <HAL_InitTick+0xc8>)
 80005e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e4:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <HAL_InitTick+0xc8>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6593      	str	r3, [r2, #88]	; 0x58
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <HAL_InitTick+0xc8>)
 80005ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005f8:	f107 020c 	add.w	r2, r7, #12
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f91c 	bl	8001840 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000608:	f001 f904 	bl	8001814 <HAL_RCC_GetPCLK1Freq>
 800060c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <HAL_InitTick+0xcc>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	0c9b      	lsrs	r3, r3, #18
 8000618:	3b01      	subs	r3, #1
 800061a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <HAL_InitTick+0xd0>)
 800061e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <HAL_InitTick+0xd0>)
 8000626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800062a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <HAL_InitTick+0xd0>)
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <HAL_InitTick+0xd0>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_InitTick+0xd0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800063e:	4818      	ldr	r0, [pc, #96]	; (80006a0 <HAL_InitTick+0xd0>)
 8000640:	f001 f976 	bl	8001930 <HAL_TIM_Base_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800064a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800064e:	2b00      	cmp	r3, #0
 8000650:	d11b      	bne.n	800068a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <HAL_InitTick+0xd0>)
 8000654:	f001 f9ce 	bl	80019f4 <HAL_TIM_Base_Start_IT>
 8000658:	4603      	mov	r3, r0
 800065a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800065e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000662:	2b00      	cmp	r3, #0
 8000664:	d111      	bne.n	800068a <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000666:	201c      	movs	r0, #28
 8000668:	f000 f9a4 	bl	80009b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d808      	bhi.n	8000684 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000672:	2200      	movs	r2, #0
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	201c      	movs	r0, #28
 8000678:	f000 f982 	bl	8000980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_InitTick+0xd4>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	e002      	b.n	800068a <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800068a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800068e:	4618      	mov	r0, r3
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	431bde83 	.word	0x431bde83
 80006a0:	20000094 	.word	0x20000094
 80006a4:	20000004 	.word	0x20000004

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <TIM2_IRQHandler+0x10>)
 80006da:	f001 fa03 	bl	8001ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000094 	.word	0x20000094

080006e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffea 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f003 fded 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fd6f 	bl	8000220 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000750:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 8000754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000758:	20001378 	.word	0x20001378

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>

0800075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f8fe 	bl	800096a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076e:	200f      	movs	r0, #15
 8000770:	f7ff ff2e 	bl	80005d0 <HAL_InitTick>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e001      	b.n	8000784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000780:	f7ff fefc 	bl	800057c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000784:	79fb      	ldrb	r3, [r7, #7]

}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4413      	add	r3, r2
 800079e:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_IncTick+0x1c>)
 80007a0:	6013      	str	r3, [r2, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200000e0 	.word	0x200000e0
 80007b0:	20000008 	.word	0x20000008

080007b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_GetTick+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200000e0 	.word	0x200000e0

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff ffee 	bl	80007b4 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d004      	beq.n	80007f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_Delay+0x40>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f0:	bf00      	nop
 80007f2:	f7ff ffdf 	bl	80007b4 <HAL_GetTick>
 80007f6:	4602      	mov	r2, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d8f7      	bhi.n	80007f2 <HAL_Delay+0x26>
  {
  }
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000008 	.word	0x20000008

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <__NVIC_EnableIRQ+0x38>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff4c 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098e:	f7ff ff63 	bl	8000858 <__NVIC_GetPriorityGrouping>
 8000992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f7ff ffb3 	bl	8000904 <NVIC_EncodePriority>
 800099e:	4602      	mov	r2, r0
 80009a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff82 	bl	80008b0 <__NVIC_SetPriority>
}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff56 	bl	8000874 <__NVIC_EnableIRQ>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009de:	e15a      	b.n	8000c96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 814c 	beq.w	8000c90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d005      	beq.n	8000a10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d130      	bne.n	8000a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	f003 0201 	and.w	r2, r3, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d017      	beq.n	8000aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d123      	bne.n	8000b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	6939      	ldr	r1, [r7, #16]
 8000afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0203 	and.w	r2, r3, #3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 80a6 	beq.w	8000c90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4b5b      	ldr	r3, [pc, #364]	; (8000cb4 <HAL_GPIO_Init+0x2e4>)
 8000b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b48:	4a5a      	ldr	r2, [pc, #360]	; (8000cb4 <HAL_GPIO_Init+0x2e4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <HAL_GPIO_Init+0x2e4>)
 8000b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b5c:	4a56      	ldr	r2, [pc, #344]	; (8000cb8 <HAL_GPIO_Init+0x2e8>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b86:	d01f      	beq.n	8000bc8 <HAL_GPIO_Init+0x1f8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4c      	ldr	r2, [pc, #304]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d019      	beq.n	8000bc4 <HAL_GPIO_Init+0x1f4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4b      	ldr	r2, [pc, #300]	; (8000cc0 <HAL_GPIO_Init+0x2f0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a4a      	ldr	r2, [pc, #296]	; (8000cc4 <HAL_GPIO_Init+0x2f4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1ec>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <HAL_GPIO_Init+0x2f8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a48      	ldr	r2, [pc, #288]	; (8000ccc <HAL_GPIO_Init+0x2fc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	e00a      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	e008      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x1fa>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bda:	4937      	ldr	r1, [pc, #220]	; (8000cb8 <HAL_GPIO_Init+0x2e8>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c0c:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_GPIO_Init+0x300>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f47f ae9d 	bne.w	80009e0 <HAL_GPIO_Init+0x10>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	48001400 	.word	0x48001400
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e001      	b.n	8000cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d141      	bne.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d42:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4e:	d131      	bne.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d56:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d68:	4a41      	ldr	r2, [pc, #260]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d70:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2232      	movs	r2, #50	; 0x32
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	0c9b      	lsrs	r3, r3, #18
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d86:	e002      	b.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d9a:	d102      	bne.n	8000da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f2      	bne.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d158      	bne.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e057      	b.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dba:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dc4:	e04d      	b.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dcc:	d141      	bne.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dda:	d131      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2232      	movs	r2, #50	; 0x32
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	0c9b      	lsrs	r3, r3, #18
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e12:	e002      	b.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e26:	d102      	bne.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f2      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3a:	d112      	bne.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e011      	b.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e50:	e007      	b.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40007000 	.word	0x40007000
 8000e74:	20000000 	.word	0x20000000
 8000e78:	431bde83 	.word	0x431bde83

08000e7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8a:	6093      	str	r3, [r2, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40007000 	.word	0x40007000

08000e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e2fe      	b.n	80014ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d075      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eba:	4b97      	ldr	r3, [pc, #604]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec4:	4b94      	ldr	r3, [pc, #592]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	2b0c      	cmp	r3, #12
 8000ed2:	d102      	bne.n	8000eda <HAL_RCC_OscConfig+0x3e>
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d002      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x44>
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d10b      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4b8d      	ldr	r3, [pc, #564]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d05b      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x108>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d157      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e2d9      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d106      	bne.n	8000f10 <HAL_RCC_OscConfig+0x74>
 8000f02:	4b85      	ldr	r3, [pc, #532]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a84      	ldr	r2, [pc, #528]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xb0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x98>
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a7e      	ldr	r2, [pc, #504]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b7c      	ldr	r3, [pc, #496]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7b      	ldr	r2, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xb0>
 8000f34:	4b78      	ldr	r3, [pc, #480]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a77      	ldr	r2, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b75      	ldr	r3, [pc, #468]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a74      	ldr	r2, [pc, #464]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc2e 	bl	80007b4 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc2a 	bl	80007b4 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e29e      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6e:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xc0>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc1a 	bl	80007b4 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fc16 	bl	80007b4 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e28a      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0xe8>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d075      	beq.n	800109e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb2:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fbc:	4b56      	ldr	r3, [pc, #344]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2b0c      	cmp	r3, #12
 8000fca:	d102      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x136>
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d002      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x13c>
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d11f      	bne.n	8001018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x154>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e25d      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	061b      	lsls	r3, r3, #24
 8000ffe:	4946      	ldr	r1, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <HAL_RCC_OscConfig+0x280>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fae1 	bl	80005d0 <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d043      	beq.n	800109c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e249      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d023      	beq.n	8001068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fbc2 	bl	80007b4 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fbbe 	bl	80007b4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e232      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	061b      	lsls	r3, r3, #24
 8001060:	492d      	ldr	r1, [pc, #180]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001062:	4313      	orrs	r3, r2
 8001064:	604b      	str	r3, [r1, #4]
 8001066:	e01a      	b.n	800109e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 800106e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fb9e 	bl	80007b4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fb9a 	bl	80007b4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e20e      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e0>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d041      	beq.n	800112e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01c      	beq.n	80010ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c2:	f7ff fb77 	bl	80007b4 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fb73 	bl	80007b4 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e1e7      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0ef      	beq.n	80010ca <HAL_RCC_OscConfig+0x22e>
 80010ea:	e020      	b.n	800112e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fb5a 	bl	80007b4 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001102:	e00d      	b.n	8001120 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fb56 	bl	80007b4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d906      	bls.n	8001120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1ca      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001120:	4b8c      	ldr	r3, [pc, #560]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1ea      	bne.n	8001104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80a6 	beq.w	8001288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001140:	4b84      	ldr	r3, [pc, #528]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_OscConfig+0x2b4>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x2b6>
 8001150:	2300      	movs	r3, #0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00d      	beq.n	8001172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6593      	str	r3, [r2, #88]	; 0x58
 8001162:	4b7c      	ldr	r3, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001172:	4b79      	ldr	r3, [pc, #484]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118a:	f7ff fb13 	bl	80007b4 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fb0f 	bl	80007b4 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e183      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x4bc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d108      	bne.n	80011ca <HAL_RCC_OscConfig+0x32e>
 80011b8:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011be:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011c8:	e024      	b.n	8001214 <HAL_RCC_OscConfig+0x378>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d110      	bne.n	80011f4 <HAL_RCC_OscConfig+0x358>
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d8:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e8:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f2:	e00f      	b.n	8001214 <HAL_RCC_OscConfig+0x378>
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fa:	4a56      	ldr	r2, [pc, #344]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d016      	beq.n	800124a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121c:	f7ff faca 	bl	80007b4 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001224:	f7ff fac6 	bl	80007b4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e138      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800123c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ed      	beq.n	8001224 <HAL_RCC_OscConfig+0x388>
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fab3 	bl	80007b4 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff faaf 	bl	80007b4 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e121      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ed      	bne.n	8001252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	4a34      	ldr	r2, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03c      	beq.n	800130e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800129e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a2:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fa82 	bl	80007b4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b4:	f7ff fa7e 	bl	80007b4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0f2      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80012c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ef      	beq.n	80012b4 <HAL_RCC_OscConfig+0x418>
 80012d4:	e01b      	b.n	800130e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80012d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012dc:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e6:	f7ff fa65 	bl	80007b4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ee:	f7ff fa61 	bl	80007b4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0d5      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ef      	bne.n	80012ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80c9 	beq.w	80014aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b0c      	cmp	r3, #12
 8001322:	f000 8083 	beq.w	800142c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d15e      	bne.n	80013ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_RCC_OscConfig+0x4b8>)
 8001334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fa3b 	bl	80007b4 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001340:	e00c      	b.n	800135c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fa37 	bl	80007b4 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d905      	bls.n	800135c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0ab      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
 8001354:	40021000 	.word	0x40021000
 8001358:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ec      	bne.n	8001342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <HAL_RCC_OscConfig+0x61c>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6a11      	ldr	r1, [r2, #32]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001378:	3a01      	subs	r2, #1
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	4311      	orrs	r1, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001382:	0212      	lsls	r2, r2, #8
 8001384:	4311      	orrs	r1, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800138a:	0852      	lsrs	r2, r2, #1
 800138c:	3a01      	subs	r2, #1
 800138e:	0552      	lsls	r2, r2, #21
 8001390:	4311      	orrs	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001396:	0852      	lsrs	r2, r2, #1
 8001398:	3a01      	subs	r2, #1
 800139a:	0652      	lsls	r2, r2, #25
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013a2:	06d2      	lsls	r2, r2, #27
 80013a4:	430a      	orrs	r2, r1
 80013a6:	4943      	ldr	r1, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a40      	ldr	r2, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b8:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff f9f6 	bl	80007b4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f9f2 	bl	80007b4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e066      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x530>
 80013ea:	e05e      	b.n	80014aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 80013f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff f9dc 	bl	80007b4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff f9d8 	bl	80007b4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e04c      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	4924      	ldr	r1, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_RCC_OscConfig+0x620>)
 8001426:	4013      	ands	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]
 800142a:	e03e      	b.n	80014aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e039      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x618>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	429a      	cmp	r2, r3
 800144a:	d12c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d123      	bne.n	80014a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d11b      	bne.n	80014a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d113      	bne.n	80014a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	3b01      	subs	r3, #1
 800148c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	019f800c 	.word	0x019f800c
 80014bc:	feeefffc 	.word	0xfeeefffc

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e11e      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b91      	ldr	r3, [pc, #580]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d910      	bls.n	8001508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b8e      	ldr	r3, [pc, #568]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 020f 	bic.w	r2, r3, #15
 80014ee:	498c      	ldr	r1, [pc, #560]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e106      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d073      	beq.n	80015fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d129      	bne.n	8001570 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151c:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0f4      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800152c:	f000 f9ba 	bl	80018a4 <RCC_GetSysClockFreqFromPLLSource>
 8001530:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_ClockConfig+0x268>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d93f      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800154e:	2b00      	cmp	r3, #0
 8001550:	d033      	beq.n	80015ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d12f      	bne.n	80015ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800155a:	4b72      	ldr	r3, [pc, #456]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e024      	b.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0c6      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0be      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001598:	f000 f8ce 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 800159c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_RCC_ClockConfig+0x268>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d909      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ae:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4957      	ldr	r1, [pc, #348]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015cc:	f7ff f8f2 	bl	80007b4 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff f8ee 	bl	80007b4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e095      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d023      	beq.n	8001650 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800161a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001634:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4936      	ldr	r1, [pc, #216]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
 800164e:	e008      	b.n	8001662 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b80      	cmp	r3, #128	; 0x80
 8001654:	d105      	bne.n	8001662 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4a32      	ldr	r2, [pc, #200]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 800165c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001660:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d21d      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 020f 	bic.w	r2, r3, #15
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001680:	f7ff f898 	bl	80007b4 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff f894 	bl	80007b4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e03b      	b.n	8001716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x260>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1ed      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4917      	ldr	r1, [pc, #92]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490f      	ldr	r1, [pc, #60]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ea:	f000 f825 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <HAL_RCC_ClockConfig+0x26c>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x270>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff5e 	bl	80005d0 <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	04c4b400 	.word	0x04c4b400
 800172c:	080044d8 	.word	0x080044d8
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d102      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e047      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d102      	bne.n	8001762 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e03e      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d136      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001796:	68d2      	ldr	r2, [r2, #12]
 8001798:	0a12      	lsrs	r2, r2, #8
 800179a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
      break;
 80017a4:	e00c      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	0a12      	lsrs	r2, r2, #8
 80017b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
      break;
 80017be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0e5b      	lsrs	r3, r3, #25
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e001      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017e0:	693b      	ldr	r3, [r7, #16]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	00f42400 	.word	0x00f42400
 80017f8:	007a1200 	.word	0x007a1200

080017fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCC_GetHCLKFreq+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000

08001814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001818:	f7ff fff0 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4904      	ldr	r1, [pc, #16]	; (800183c <HAL_RCC_GetPCLK1Freq+0x28>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	080044e8 	.word	0x080044e8

08001840 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	220f      	movs	r2, #15
 800184e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_RCC_GetClockConfig+0x60>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 020f 	and.w	r2, r3, #15
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40022000 	.word	0x40022000

080018a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d10c      	bne.n	80018e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	0a12      	lsrs	r2, r2, #8
 80018d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
    break;
 80018e0:	e00c      	b.n	80018fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ec:	68d2      	ldr	r2, [r2, #12]
 80018ee:	0a12      	lsrs	r2, r2, #8
 80018f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    break;
 80018fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0e5b      	lsrs	r3, r3, #25
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200
 800192c:	00f42400 	.word	0x00f42400

08001930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e049      	b.n	80019d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f841 	bl	80019de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f000 fa30 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d001      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e054      	b.n	8001ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d022      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d01d      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d018      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_TIM_Base_Start_IT+0xd8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00e      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d009      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d004      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x80>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_TIM_Base_Start_IT+0xe8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d115      	bne.n	8001aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d015      	beq.n	8001ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d011      	beq.n	8001ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	e008      	b.n	8001ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e000      	b.n	8001ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00
 8001ad4:	40013400 	.word	0x40013400
 8001ad8:	40014000 	.word	0x40014000
 8001adc:	40015000 	.word	0x40015000
 8001ae0:	00010007 	.word	0x00010007

08001ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d020      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0202 	mvn.w	r2, #2
 8001b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f931 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f923 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f934 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d020      	beq.n	8001b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0204 	mvn.w	r2, #4
 8001b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f90b 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8fd 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f90e 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d020      	beq.n	8001be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0208 	mvn.w	r2, #8
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8e5 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8d7 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8e8 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d020      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01b      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0210 	mvn.w	r2, #16
 8001bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2208      	movs	r2, #8
 8001c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8bf 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001c18:	e005      	b.n	8001c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8b1 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f8c2 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0201 	mvn.w	r2, #1
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fc81 	bl	8000552 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8001c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f969 	bl	8001f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f961 	bl	8001f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f87c 	bl	8001dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00c      	beq.n	8001cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0220 	mvn.w	r2, #32
 8001ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f929 	bl	8001f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f935 	bl	8001f78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f92d 	bl	8001f8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f925 	bl	8001fa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00c      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f91d 	bl	8001fb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <TIM_Base_SetConfig+0x144>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d017      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d013      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <TIM_Base_SetConfig+0x148>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00f      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <TIM_Base_SetConfig+0x14c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00b      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <TIM_Base_SetConfig+0x150>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d007      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <TIM_Base_SetConfig+0x154>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d003      	beq.n	8001e1c <TIM_Base_SetConfig+0x48>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <TIM_Base_SetConfig+0x158>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d108      	bne.n	8001e2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a39      	ldr	r2, [pc, #228]	; (8001f18 <TIM_Base_SetConfig+0x144>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d023      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d01f      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <TIM_Base_SetConfig+0x148>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01b      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <TIM_Base_SetConfig+0x14c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d017      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a34      	ldr	r2, [pc, #208]	; (8001f24 <TIM_Base_SetConfig+0x150>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <TIM_Base_SetConfig+0x154>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00f      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <TIM_Base_SetConfig+0x15c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00b      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <TIM_Base_SetConfig+0x160>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <TIM_Base_SetConfig+0x164>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d003      	beq.n	8001e7e <TIM_Base_SetConfig+0xaa>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <TIM_Base_SetConfig+0x158>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d108      	bne.n	8001e90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <TIM_Base_SetConfig+0x144>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0x110>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <TIM_Base_SetConfig+0x154>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x110>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <TIM_Base_SetConfig+0x15c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x110>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <TIM_Base_SetConfig+0x160>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x110>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <TIM_Base_SetConfig+0x164>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x110>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <TIM_Base_SetConfig+0x158>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f023 0201 	bic.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40013400 	.word	0x40013400
 8001f2c:	40015000 	.word	0x40015000
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800

08001f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fda:	2b84      	cmp	r3, #132	; 0x84
 8001fdc:	d005      	beq.n	8001fea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ffe:	f3ef 8305 	mrs	r3, IPSR
 8002002:	607b      	str	r3, [r7, #4]
  return(result);
 8002004:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002020:	f000 fffe 	bl	8003020 <vTaskStartScheduler>
  
  return osOK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}

0800202a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800202a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202c:	b087      	sub	sp, #28
 800202e:	af02      	add	r7, sp, #8
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685c      	ldr	r4, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002040:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ffbd 	bl	8001fc8 <makeFreeRtosPriority>
 800204e:	4602      	mov	r2, r0
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4632      	mov	r2, r6
 800205c:	4629      	mov	r1, r5
 800205e:	4620      	mov	r0, r4
 8002060:	f000 fe60 	bl	8002d24 <xTaskCreate>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002078 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <osDelay+0x16>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	e000      	b.n	8002090 <osDelay+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f000 ff91 	bl	8002fb8 <vTaskDelay>
  
  return osOK;
 8002096:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 f9d5 	bl	8002464 <xQueueGenericCreate>
 80020ba:	4603      	mov	r3, r0
#endif
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <osMessagePut+0x1e>
    ticks = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80020e2:	f7ff ff89 	bl	8001ff8 <inHandlerMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80020ec:	f107 0210 	add.w	r2, r7, #16
 80020f0:	f107 0108 	add.w	r1, r7, #8
 80020f4:	2300      	movs	r3, #0
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fb08 	bl	800270c <xQueueGenericSendFromISR>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <osMessagePut+0x42>
      return osErrorOS;
 8002102:	23ff      	movs	r3, #255	; 0xff
 8002104:	e018      	b.n	8002138 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d014      	beq.n	8002136 <osMessagePut+0x72>
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <osMessagePut+0x7c>)
 800210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	e00b      	b.n	8002136 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800211e:	f107 0108 	add.w	r1, r7, #8
 8002122:	2300      	movs	r3, #0
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f9f2 	bl	8002510 <xQueueGenericSend>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <osMessagePut+0x72>
      return osErrorOS;
 8002132:	23ff      	movs	r3, #255	; 0xff
 8002134:	e000      	b.n	8002138 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	e000ed04 	.word	0xe000ed04

08002144 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b08b      	sub	sp, #44	; 0x2c
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	617b      	str	r3, [r7, #20]
    return event;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	461c      	mov	r4, r3
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800216e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002172:	e054      	b.n	800221e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d103      	bne.n	800218c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	e009      	b.n	80021a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <osMessageGet+0x5c>
      ticks = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80021a0:	f7ff ff2a 	bl	8001ff8 <inHandlerMode>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01c      	beq.n	80021e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80021aa:	f107 0220 	add.w	r2, r7, #32
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f000 fc24 	bl	8002a04 <xQueueReceiveFromISR>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80021c2:	2310      	movs	r3, #16
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e001      	b.n	80021cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <osMessageGet+0xca>
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <osMessageGet+0xe4>)
 80021d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	e014      	b.n	800220e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	3304      	adds	r3, #4
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f000 fb28 	bl	8002844 <xQueueReceive>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80021fa:	2310      	movs	r3, #16
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e006      	b.n	800220e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <osMessageGet+0xc6>
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <osMessageGet+0xc8>
 800220a:	2340      	movs	r3, #64	; 0x40
 800220c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	461c      	mov	r4, r3
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800221a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	372c      	adds	r7, #44	; 0x2c
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0208 	add.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0208 	add.w	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 0208 	add.w	r2, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d103      	bne.n	80022ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e00c      	b.n	8002308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3308      	adds	r3, #8
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e002      	b.n	80022fc <vListInsert+0x2e>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	d2f6      	bcs.n	80022f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6852      	ldr	r2, [r2, #4]
 8002360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d103      	bne.n	8002374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023be:	f001 fc41 	bl	8003c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	3b01      	subs	r3, #1
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	441a      	add	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d114      	bne.n	800243e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01a      	beq.n	8002452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3310      	adds	r3, #16
 8002420:	4618      	mov	r0, r3
 8002422:	f001 f835 	bl	8003490 <xTaskRemoveFromEventList>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <xQueueGenericReset+0xcc>)
 800242e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	e009      	b.n	8002452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3310      	adds	r3, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fef2 	bl	800222c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3324      	adds	r3, #36	; 0x24
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff feed 	bl	800222c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002452:	f001 fc27 	bl	8003ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	613b      	str	r3, [r7, #16]
}
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	3348      	adds	r3, #72	; 0x48
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fcf3 	bl	8003e88 <pvPortMalloc>
 80024a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3348      	adds	r3, #72	; 0x48
 80024b2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f805 	bl	80024d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024c6:	69bb      	ldr	r3, [r7, #24]
	}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e002      	b.n	80024f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024fe:	2101      	movs	r1, #1
 8002500:	69b8      	ldr	r0, [r7, #24]
 8002502:	f7ff ff47 	bl	8002394 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08e      	sub	sp, #56	; 0x38
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <xQueueGenericSend+0x32>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <xQueueGenericSend+0x40>
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <xQueueGenericSend+0x44>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <xQueueGenericSend+0x46>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <xQueueGenericSend+0x60>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800256c:	bf00      	nop
 800256e:	e7fe      	b.n	800256e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d103      	bne.n	800257e <xQueueGenericSend+0x6e>
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <xQueueGenericSend+0x72>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <xQueueGenericSend+0x74>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericSend+0x8e>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	623b      	str	r3, [r7, #32]
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800259e:	f001 f919 	bl	80037d4 <xTaskGetSchedulerState>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <xQueueGenericSend+0x9e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <xQueueGenericSend+0xa2>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <xQueueGenericSend+0xa4>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <xQueueGenericSend+0xbe>
	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	61fb      	str	r3, [r7, #28]
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ce:	f001 fb39 	bl	8003c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <xQueueGenericSend+0xd4>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d129      	bne.n	8002638 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ea:	f000 fa8b 	bl	8002b04 <prvCopyDataToQueue>
 80025ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3324      	adds	r3, #36	; 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 ff47 	bl	8003490 <xTaskRemoveFromEventList>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <xQueueGenericSend+0x1f8>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	e00a      	b.n	8002630 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <xQueueGenericSend+0x1f8>)
 8002622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002630:	f001 fb38 	bl	8003ca4 <vPortExitCritical>
				return pdPASS;
 8002634:	2301      	movs	r3, #1
 8002636:	e063      	b.n	8002700 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800263e:	f001 fb31 	bl	8003ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002642:	2300      	movs	r3, #0
 8002644:	e05c      	b.n	8002700 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4618      	mov	r0, r3
 8002652:	f000 ff7f 	bl	8003554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800265a:	f001 fb23 	bl	8003ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800265e:	f000 fd2f 	bl	80030c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002662:	f001 faef 	bl	8003c44 <vPortEnterCritical>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <xQueueGenericSend+0x16c>
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x182>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002692:	f001 fb07 	bl	8003ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 ff6e 	bl	8003580 <xTaskCheckForTimeOut>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d124      	bne.n	80026f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ac:	f000 fb22 	bl	8002cf4 <prvIsQueueFull>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fec2 	bl	8003448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c6:	f000 faad 	bl	8002c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026ca:	f000 fd07 	bl	80030dc <xTaskResumeAll>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f af7c 	bne.w	80025ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <xQueueGenericSend+0x1f8>)
 80026d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	e772      	b.n	80025ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fa9b 	bl	8002c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ee:	f000 fcf5 	bl	80030dc <xTaskResumeAll>
 80026f2:	e76c      	b.n	80025ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f6:	f000 fa95 	bl	8002c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026fa:	f000 fcef 	bl	80030dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002700:	4618      	mov	r0, r3
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b090      	sub	sp, #64	; 0x40
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <xQueueGenericSendFromISR+0x3c>
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <xQueueGenericSendFromISR+0x40>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <xQueueGenericSendFromISR+0x42>
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002764:	bf00      	nop
 8002766:	e7fe      	b.n	8002766 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d103      	bne.n	8002776 <xQueueGenericSendFromISR+0x6a>
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <xQueueGenericSendFromISR+0x6e>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <xQueueGenericSendFromISR+0x70>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	623b      	str	r3, [r7, #32]
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002796:	f001 fb37 	bl	8003e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800279a:	f3ef 8211 	mrs	r2, BASEPRI
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	61fa      	str	r2, [r7, #28]
 80027b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <xQueueGenericSendFromISR+0xbc>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d12f      	bne.n	8002828 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027de:	f000 f991 	bl	8002b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d112      	bne.n	8002812 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fe49 	bl	8003490 <xTaskRemoveFromEventList>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e007      	b.n	8002822 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	b25a      	sxtb	r2, r3
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002822:	2301      	movs	r3, #1
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002826:	e001      	b.n	800282c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002828:	2300      	movs	r3, #0
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002836:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800283a:	4618      	mov	r0, r3
 800283c:	3740      	adds	r7, #64	; 0x40
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <xQueueReceive+0x30>
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	623b      	str	r3, [r7, #32]
}
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <xQueueReceive+0x3e>
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <xQueueReceive+0x42>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <xQueueReceive+0x44>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <xQueueReceive+0x5e>
	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61fb      	str	r3, [r7, #28]
}
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028a2:	f000 ff97 	bl	80037d4 <xTaskGetSchedulerState>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <xQueueReceive+0x6e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <xQueueReceive+0x72>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueReceive+0x74>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueReceive+0x8e>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	61bb      	str	r3, [r7, #24]
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028d2:	f001 f9b7 	bl	8003c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01f      	beq.n	8002922 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e6:	f000 f977 	bl	8002bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00f      	beq.n	800291a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	3310      	adds	r3, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fdc6 	bl	8003490 <xTaskRemoveFromEventList>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <xQueueReceive+0x1bc>)
 800290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800291a:	f001 f9c3 	bl	8003ca4 <vPortExitCritical>
				return pdPASS;
 800291e:	2301      	movs	r3, #1
 8002920:	e069      	b.n	80029f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002928:	f001 f9bc 	bl	8003ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800292c:	2300      	movs	r3, #0
 800292e:	e062      	b.n	80029f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe0a 	bl	8003554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002944:	f001 f9ae 	bl	8003ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002948:	f000 fbba 	bl	80030c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800294c:	f001 f97a 	bl	8003c44 <vPortEnterCritical>
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <xQueueReceive+0x122>
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <xQueueReceive+0x138>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297c:	f001 f992 	bl	8003ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002980:	1d3a      	adds	r2, r7, #4
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fdf9 	bl	8003580 <xTaskCheckForTimeOut>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d123      	bne.n	80029dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002996:	f000 f997 	bl	8002cc8 <prvIsQueueEmpty>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d017      	beq.n	80029d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd4d 	bl	8003448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b0:	f000 f938 	bl	8002c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029b4:	f000 fb92 	bl	80030dc <xTaskResumeAll>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d189      	bne.n	80028d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <xQueueReceive+0x1bc>)
 80029c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	e780      	b.n	80028d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d2:	f000 f927 	bl	8002c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029d6:	f000 fb81 	bl	80030dc <xTaskResumeAll>
 80029da:	e77a      	b.n	80028d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029de:	f000 f921 	bl	8002c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029e2:	f000 fb7b 	bl	80030dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e8:	f000 f96e 	bl	8002cc8 <prvIsQueueEmpty>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f43f af6f 	beq.w	80028d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	; 0x38
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	623b      	str	r3, [r7, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <xQueueReceiveFromISR+0x3a>
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <xQueueReceiveFromISR+0x3e>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <xQueueReceiveFromISR+0x40>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	61fb      	str	r3, [r7, #28]
}
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a5e:	f001 f9d3 	bl	8003e08 <vPortValidateInterruptPriority>
	__asm volatile
 8002a62:	f3ef 8211 	mrs	r2, BASEPRI
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	61ba      	str	r2, [r7, #24]
 8002a78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02f      	beq.n	8002aea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a98:	f000 f89e 	bl	8002bd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d112      	bne.n	8002ad4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	3310      	adds	r3, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fce8 	bl	8003490 <xTaskRemoveFromEventList>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e007      	b.n	8002ae4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	b25a      	sxtb	r2, r3
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae8:	e001      	b.n	8002aee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f383 8811 	msr	BASEPRI, r3
}
 8002af8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3738      	adds	r7, #56	; 0x38
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14d      	bne.n	8002bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fe6e 	bl	8003810 <xTaskPriorityDisinherit>
 8002b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	e043      	b.n	8002bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d119      	bne.n	8002b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6858      	ldr	r0, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	f001 fc08 	bl	8004364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	441a      	add	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d32b      	bcc.n	8002bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e026      	b.n	8002bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68d8      	ldr	r0, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	461a      	mov	r2, r3
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	f001 fbee 	bl	8004364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	425b      	negs	r3, r3
 8002b92:	441a      	add	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	425b      	negs	r3, r3
 8002bae:	441a      	add	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d105      	bne.n	8002bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bce:	697b      	ldr	r3, [r7, #20]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d018      	beq.n	8002c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d303      	bcc.n	8002c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68d9      	ldr	r1, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	461a      	mov	r2, r3
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f001 fba4 	bl	8004364 <memcpy>
	}
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c2c:	f001 f80a 	bl	8003c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c38:	e011      	b.n	8002c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3324      	adds	r3, #36	; 0x24
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fc22 	bl	8003490 <xTaskRemoveFromEventList>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c52:	f000 fcf7 	bl	8003644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	dce9      	bgt.n	8002c3a <prvUnlockQueue+0x16>
 8002c66:	e000      	b.n	8002c6a <prvUnlockQueue+0x46>
					break;
 8002c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c72:	f001 f817 	bl	8003ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c76:	f000 ffe5 	bl	8003c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c82:	e011      	b.n	8002ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fbfd 	bl	8003490 <xTaskRemoveFromEventList>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c9c:	f000 fcd2 	bl	8003644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ca0:	7bbb      	ldrb	r3, [r7, #14]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	dce9      	bgt.n	8002c84 <prvUnlockQueue+0x60>
 8002cb0:	e000      	b.n	8002cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	22ff      	movs	r2, #255	; 0xff
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cbc:	f000 fff2 	bl	8003ca4 <vPortExitCritical>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd0:	f000 ffb8 	bl	8003c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e001      	b.n	8002ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ce6:	f000 ffdd 	bl	8003ca4 <vPortExitCritical>

	return xReturn;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cfc:	f000 ffa2 	bl	8003c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d102      	bne.n	8002d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e001      	b.n	8002d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d16:	f000 ffc5 	bl	8003ca4 <vPortExitCritical>

	return xReturn;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af04      	add	r7, sp, #16
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f8a5 	bl	8003e88 <pvPortMalloc>
 8002d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d46:	20a0      	movs	r0, #160	; 0xa0
 8002d48:	f001 f89e 	bl	8003e88 <pvPortMalloc>
 8002d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5a:	e005      	b.n	8002d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d5c:	6978      	ldr	r0, [r7, #20]
 8002d5e:	f001 f95f 	bl	8004020 <vPortFree>
 8002d62:	e001      	b.n	8002d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d013      	beq.n	8002d96 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9303      	str	r3, [sp, #12]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	9302      	str	r3, [sp, #8]
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f80f 	bl	8002da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d8a:	69f8      	ldr	r0, [r7, #28]
 8002d8c:	f000 f8aa 	bl	8002ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e002      	b.n	8002d9c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	617b      	str	r3, [r7, #20]
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01f      	beq.n	8002e36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e012      	b.n	8002e22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	7819      	ldrb	r1, [r3, #0]
 8002e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3334      	adds	r3, #52	; 0x34
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d9e9      	bls.n	8002dfc <prvInitialiseNewTask+0x54>
 8002e28:	e000      	b.n	8002e2c <prvInitialiseNewTask+0x84>
			{
				break;
 8002e2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e34:	e003      	b.n	8002e3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d901      	bls.n	8002e48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e44:	2306      	movs	r3, #6
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fa04 	bl	800226c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	3318      	adds	r3, #24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f9ff 	bl	800226c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	f1c3 0207 	rsb	r2, r3, #7
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	334c      	adds	r3, #76	; 0x4c
 8002e98:	224c      	movs	r2, #76	; 0x4c
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f9dd 	bl	800425c <memset>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <prvInitialiseNewTask+0x130>)
 8002ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <prvInitialiseNewTask+0x134>)
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <prvInitialiseNewTask+0x138>)
 8002eb2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	69b8      	ldr	r0, [r7, #24]
 8002eba:	f000 fd95 	bl	80039e8 <pxPortInitialiseStack>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20001238 	.word	0x20001238
 8002edc:	200012a0 	.word	0x200012a0
 8002ee0:	20001308 	.word	0x20001308

08002ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eec:	f000 feaa 	bl	8003c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <prvAddNewTaskToReadyList+0xb8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <prvAddNewTaskToReadyList+0xb8>)
 8002ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <prvAddNewTaskToReadyList+0xbc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f02:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <prvAddNewTaskToReadyList+0xbc>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <prvAddNewTaskToReadyList+0xb8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d110      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f10:	f000 fbbc 	bl	800368c <prvInitialiseTaskLists>
 8002f14:	e00d      	b.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <prvAddNewTaskToReadyList+0xc0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <prvAddNewTaskToReadyList+0xbc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d802      	bhi.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <prvAddNewTaskToReadyList+0xbc>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <prvAddNewTaskToReadyList+0xc4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <prvAddNewTaskToReadyList+0xc4>)
 8002f3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <prvAddNewTaskToReadyList+0xc8>)
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <prvAddNewTaskToReadyList+0xcc>)
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f7ff f98e 	bl	8002286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f6a:	f000 fe9b 	bl	8003ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <prvAddNewTaskToReadyList+0xc0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <prvAddNewTaskToReadyList+0xbc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <prvAddNewTaskToReadyList+0xd0>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200001e4 	.word	0x200001e4
 8002fa0:	200000e4 	.word	0x200000e4
 8002fa4:	200001f0 	.word	0x200001f0
 8002fa8:	20000200 	.word	0x20000200
 8002fac:	200001ec 	.word	0x200001ec
 8002fb0:	200000e8 	.word	0x200000e8
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d017      	beq.n	8002ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <vTaskDelay+0x60>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <vTaskDelay+0x30>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	60bb      	str	r3, [r7, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fe8:	f000 f86a 	bl	80030c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fec:	2100      	movs	r1, #0
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fc94 	bl	800391c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ff4:	f000 f872 	bl	80030dc <xTaskResumeAll>
 8002ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <vTaskDelay+0x64>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000020c 	.word	0x2000020c
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <vTaskStartScheduler+0x80>)
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	491c      	ldr	r1, [pc, #112]	; (80030a4 <vTaskStartScheduler+0x84>)
 8003034:	481c      	ldr	r0, [pc, #112]	; (80030a8 <vTaskStartScheduler+0x88>)
 8003036:	f7ff fe75 	bl	8002d24 <xTaskCreate>
 800303a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d11b      	bne.n	800307a <vTaskStartScheduler+0x5a>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60bb      	str	r3, [r7, #8]
}
 8003054:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <vTaskStartScheduler+0x8c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	334c      	adds	r3, #76	; 0x4c
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <vTaskStartScheduler+0x90>)
 800305e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <vTaskStartScheduler+0x94>)
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <vTaskStartScheduler+0x98>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800306e:	4b13      	ldr	r3, [pc, #76]	; (80030bc <vTaskStartScheduler+0x9c>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003074:	f000 fd44 	bl	8003b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003078:	e00e      	b.n	8003098 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d10a      	bne.n	8003098 <vTaskStartScheduler+0x78>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	607b      	str	r3, [r7, #4]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vTaskStartScheduler+0x76>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000208 	.word	0x20000208
 80030a4:	080044d0 	.word	0x080044d0
 80030a8:	0800365d 	.word	0x0800365d
 80030ac:	200000e4 	.word	0x200000e4
 80030b0:	2000005c 	.word	0x2000005c
 80030b4:	20000204 	.word	0x20000204
 80030b8:	200001f0 	.word	0x200001f0
 80030bc:	200001e8 	.word	0x200001e8

080030c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <vTaskSuspendAll+0x18>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <vTaskSuspendAll+0x18>)
 80030cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	2000020c 	.word	0x2000020c

080030dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <xTaskResumeAll+0x114>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <xTaskResumeAll+0x2c>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	603b      	str	r3, [r7, #0]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003108:	f000 fd9c 	bl	8003c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800310c:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <xTaskResumeAll+0x114>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <xTaskResumeAll+0x114>)
 8003114:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <xTaskResumeAll+0x114>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d161      	bne.n	80031e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <xTaskResumeAll+0x118>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d05d      	beq.n	80031e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003126:	e02e      	b.n	8003186 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <xTaskResumeAll+0x11c>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3318      	adds	r3, #24
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f903 	bl	8002340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3304      	adds	r3, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff f8fe 	bl	8002340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <xTaskResumeAll+0x120>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <xTaskResumeAll+0x120>)
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4a27      	ldr	r2, [pc, #156]	; (8003200 <xTaskResumeAll+0x124>)
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f7ff f88a 	bl	8002286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <xTaskResumeAll+0x128>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	429a      	cmp	r2, r3
 800317e:	d302      	bcc.n	8003186 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <xTaskResumeAll+0x12c>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <xTaskResumeAll+0x11c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1cc      	bne.n	8003128 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003194:	f000 fafe 	bl	8003794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003198:	4b1c      	ldr	r3, [pc, #112]	; (800320c <xTaskResumeAll+0x130>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031a4:	f000 f836 	bl	8003214 <xTaskIncrementTick>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <xTaskResumeAll+0x12c>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f1      	bne.n	80031a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <xTaskResumeAll+0x130>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <xTaskResumeAll+0x12c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <xTaskResumeAll+0x134>)
 80031d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031e2:	f000 fd5f 	bl	8003ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80031e6:	68bb      	ldr	r3, [r7, #8]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	2000020c 	.word	0x2000020c
 80031f4:	200001e4 	.word	0x200001e4
 80031f8:	200001a4 	.word	0x200001a4
 80031fc:	200001ec 	.word	0x200001ec
 8003200:	200000e8 	.word	0x200000e8
 8003204:	200000e4 	.word	0x200000e4
 8003208:	200001f8 	.word	0x200001f8
 800320c:	200001f4 	.word	0x200001f4
 8003210:	e000ed04 	.word	0xe000ed04

08003214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <xTaskIncrementTick+0x144>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 808e 	bne.w	8003344 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003228:	4b4c      	ldr	r3, [pc, #304]	; (800335c <xTaskIncrementTick+0x148>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003230:	4a4a      	ldr	r2, [pc, #296]	; (800335c <xTaskIncrementTick+0x148>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d120      	bne.n	800327e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800323c:	4b48      	ldr	r3, [pc, #288]	; (8003360 <xTaskIncrementTick+0x14c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <xTaskIncrementTick+0x48>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	603b      	str	r3, [r7, #0]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <xTaskIncrementTick+0x46>
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <xTaskIncrementTick+0x14c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b40      	ldr	r3, [pc, #256]	; (8003364 <xTaskIncrementTick+0x150>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a3e      	ldr	r2, [pc, #248]	; (8003360 <xTaskIncrementTick+0x14c>)
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4a3e      	ldr	r2, [pc, #248]	; (8003364 <xTaskIncrementTick+0x150>)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <xTaskIncrementTick+0x154>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <xTaskIncrementTick+0x154>)
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	f000 fa8b 	bl	8003794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <xTaskIncrementTick+0x158>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	429a      	cmp	r2, r3
 8003286:	d348      	bcc.n	800331a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <xTaskIncrementTick+0x14c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <xTaskIncrementTick+0x158>)
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	601a      	str	r2, [r3, #0]
					break;
 800329a:	e03e      	b.n	800331a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329c:	4b30      	ldr	r3, [pc, #192]	; (8003360 <xTaskIncrementTick+0x14c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d203      	bcs.n	80032bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <xTaskIncrementTick+0x158>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032ba:	e02e      	b.n	800331a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3304      	adds	r3, #4
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f83d 	bl	8002340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3318      	adds	r3, #24
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f834 	bl	8002340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <xTaskIncrementTick+0x15c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <xTaskIncrementTick+0x15c>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <xTaskIncrementTick+0x160>)
 80032f8:	441a      	add	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7fe ffc0 	bl	8002286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <xTaskIncrementTick+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	429a      	cmp	r2, r3
 8003312:	d3b9      	bcc.n	8003288 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003318:	e7b6      	b.n	8003288 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <xTaskIncrementTick+0x164>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	4914      	ldr	r1, [pc, #80]	; (8003374 <xTaskIncrementTick+0x160>)
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d901      	bls.n	8003336 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <xTaskIncrementTick+0x168>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e004      	b.n	800334e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <xTaskIncrementTick+0x16c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <xTaskIncrementTick+0x16c>)
 800334c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800334e:	697b      	ldr	r3, [r7, #20]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	2000020c 	.word	0x2000020c
 800335c:	200001e8 	.word	0x200001e8
 8003360:	2000019c 	.word	0x2000019c
 8003364:	200001a0 	.word	0x200001a0
 8003368:	200001fc 	.word	0x200001fc
 800336c:	20000204 	.word	0x20000204
 8003370:	200001ec 	.word	0x200001ec
 8003374:	200000e8 	.word	0x200000e8
 8003378:	200000e4 	.word	0x200000e4
 800337c:	200001f8 	.word	0x200001f8
 8003380:	200001f4 	.word	0x200001f4

08003384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <vTaskSwitchContext+0xac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <vTaskSwitchContext+0xb0>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003398:	e044      	b.n	8003424 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <vTaskSwitchContext+0xb0>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <vTaskSwitchContext+0xb4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	f1c3 031f 	rsb	r3, r3, #31
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	4921      	ldr	r1, [pc, #132]	; (800343c <vTaskSwitchContext+0xb8>)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	607b      	str	r3, [r7, #4]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <vTaskSwitchContext+0x5a>
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <vTaskSwitchContext+0xb8>)
 80033ec:	4413      	add	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3308      	adds	r3, #8
 8003402:	429a      	cmp	r2, r3
 8003404:	d104      	bne.n	8003410 <vTaskSwitchContext+0x8c>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <vTaskSwitchContext+0xbc>)
 8003418:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <vTaskSwitchContext+0xbc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	334c      	adds	r3, #76	; 0x4c
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <vTaskSwitchContext+0xc0>)
 8003422:	6013      	str	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	2000020c 	.word	0x2000020c
 8003434:	200001f8 	.word	0x200001f8
 8003438:	200001ec 	.word	0x200001ec
 800343c:	200000e8 	.word	0x200000e8
 8003440:	200000e4 	.word	0x200000e4
 8003444:	2000005c 	.word	0x2000005c

08003448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	60fb      	str	r3, [r7, #12]
}
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <vTaskPlaceOnEventList+0x44>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3318      	adds	r3, #24
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe ff29 	bl	80022ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800347c:	2101      	movs	r1, #1
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f000 fa4c 	bl	800391c <prvAddCurrentTaskToDelayedList>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200000e4 	.word	0x200000e4

08003490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3318      	adds	r3, #24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe ff3d 	bl	8002340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <xTaskRemoveFromEventList+0xac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11c      	bne.n	8003508 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe ff34 	bl	8002340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <xTaskRemoveFromEventList+0xb0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <xTaskRemoveFromEventList+0xb0>)
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <xTaskRemoveFromEventList+0xb4>)
 80034f8:	441a      	add	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f7fe fec0 	bl	8002286 <vListInsertEnd>
 8003506:	e005      	b.n	8003514 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3318      	adds	r3, #24
 800350c:	4619      	mov	r1, r3
 800350e:	480e      	ldr	r0, [pc, #56]	; (8003548 <xTaskRemoveFromEventList+0xb8>)
 8003510:	f7fe feb9 	bl	8002286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <xTaskRemoveFromEventList+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d905      	bls.n	800352e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <xTaskRemoveFromEventList+0xc0>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e001      	b.n	8003532 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003532:	697b      	ldr	r3, [r7, #20]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000020c 	.word	0x2000020c
 8003540:	200001ec 	.word	0x200001ec
 8003544:	200000e8 	.word	0x200000e8
 8003548:	200001a4 	.word	0x200001a4
 800354c:	200000e4 	.word	0x200000e4
 8003550:	200001f8 	.word	0x200001f8

08003554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <vTaskInternalSetTimeOutState+0x24>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <vTaskInternalSetTimeOutState+0x28>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	605a      	str	r2, [r3, #4]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	200001fc 	.word	0x200001fc
 800357c:	200001e8 	.word	0x200001e8

08003580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	613b      	str	r3, [r7, #16]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035c2:	f000 fb3f 	bl	8003c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <xTaskCheckForTimeOut+0xbc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d102      	bne.n	80035e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e023      	b.n	800362e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <xTaskCheckForTimeOut+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d007      	beq.n	8003602 <xTaskCheckForTimeOut+0x82>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e015      	b.n	800362e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d20b      	bcs.n	8003624 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad2      	subs	r2, r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff9b 	bl	8003554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e004      	b.n	800362e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800362e:	f000 fb39 	bl	8003ca4 <vPortExitCritical>

	return xReturn;
 8003632:	69fb      	ldr	r3, [r7, #28]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200001e8 	.word	0x200001e8
 8003640:	200001fc 	.word	0x200001fc

08003644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <vTaskMissedYield+0x14>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	200001f8 	.word	0x200001f8

0800365c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003664:	f000 f852 	bl	800370c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <prvIdleTask+0x28>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d9f9      	bls.n	8003664 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <prvIdleTask+0x2c>)
 8003672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003680:	e7f0      	b.n	8003664 <prvIdleTask+0x8>
 8003682:	bf00      	nop
 8003684:	200000e8 	.word	0x200000e8
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	e00c      	b.n	80036b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <prvInitialiseTaskLists+0x60>)
 80036a4:	4413      	add	r3, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fdc0 	bl	800222c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3301      	adds	r3, #1
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d9ef      	bls.n	8003698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036b8:	480d      	ldr	r0, [pc, #52]	; (80036f0 <prvInitialiseTaskLists+0x64>)
 80036ba:	f7fe fdb7 	bl	800222c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <prvInitialiseTaskLists+0x68>)
 80036c0:	f7fe fdb4 	bl	800222c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <prvInitialiseTaskLists+0x6c>)
 80036c6:	f7fe fdb1 	bl	800222c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036ca:	480c      	ldr	r0, [pc, #48]	; (80036fc <prvInitialiseTaskLists+0x70>)
 80036cc:	f7fe fdae 	bl	800222c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036d0:	480b      	ldr	r0, [pc, #44]	; (8003700 <prvInitialiseTaskLists+0x74>)
 80036d2:	f7fe fdab 	bl	800222c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <prvInitialiseTaskLists+0x78>)
 80036d8:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <prvInitialiseTaskLists+0x64>)
 80036da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <prvInitialiseTaskLists+0x7c>)
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <prvInitialiseTaskLists+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200000e8 	.word	0x200000e8
 80036f0:	20000174 	.word	0x20000174
 80036f4:	20000188 	.word	0x20000188
 80036f8:	200001a4 	.word	0x200001a4
 80036fc:	200001b8 	.word	0x200001b8
 8003700:	200001d0 	.word	0x200001d0
 8003704:	2000019c 	.word	0x2000019c
 8003708:	200001a0 	.word	0x200001a0

0800370c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003712:	e019      	b.n	8003748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003714:	f000 fa96 	bl	8003c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <prvCheckTasksWaitingTermination+0x50>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fe0b 	bl	8002340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <prvCheckTasksWaitingTermination+0x54>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <prvCheckTasksWaitingTermination+0x54>)
 8003732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <prvCheckTasksWaitingTermination+0x58>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3b01      	subs	r3, #1
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <prvCheckTasksWaitingTermination+0x58>)
 800373c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800373e:	f000 fab1 	bl	8003ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f810 	bl	8003768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <prvCheckTasksWaitingTermination+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e1      	bne.n	8003714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200001b8 	.word	0x200001b8
 8003760:	200001e4 	.word	0x200001e4
 8003764:	200001cc 	.word	0x200001cc

08003768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	334c      	adds	r3, #76	; 0x4c
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd79 	bl	800426c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fc4e 	bl	8004020 <vPortFree>
			vPortFree( pxTCB );
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fc4b 	bl	8004020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <prvResetNextTaskUnblockTime+0x38>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <prvResetNextTaskUnblockTime+0x3c>)
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ac:	e008      	b.n	80037c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <prvResetNextTaskUnblockTime+0x38>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <prvResetNextTaskUnblockTime+0x3c>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	2000019c 	.word	0x2000019c
 80037d0:	20000204 	.word	0x20000204

080037d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <xTaskGetSchedulerState+0x34>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037e2:	2301      	movs	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e008      	b.n	80037fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <xTaskGetSchedulerState+0x38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037f0:	2302      	movs	r3, #2
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	e001      	b.n	80037fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037fa:	687b      	ldr	r3, [r7, #4]
	}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	200001f0 	.word	0x200001f0
 800380c:	2000020c 	.word	0x2000020c

08003810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d06e      	beq.n	8003904 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003826:	4b3a      	ldr	r3, [pc, #232]	; (8003910 <xTaskPriorityDisinherit+0x100>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d00a      	beq.n	8003846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	429a      	cmp	r2, r3
 8003878:	d044      	beq.n	8003904 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	2b00      	cmp	r3, #0
 8003880:	d140      	bne.n	8003904 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fd5a 	bl	8002340 <uxListRemove>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d115      	bne.n	80038be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	491f      	ldr	r1, [pc, #124]	; (8003914 <xTaskPriorityDisinherit+0x104>)
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <xTaskPriorityDisinherit+0xae>
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	2201      	movs	r2, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <xTaskPriorityDisinherit+0x108>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4013      	ands	r3, r2
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <xTaskPriorityDisinherit+0x108>)
 80038bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f1c3 0207 	rsb	r2, r3, #7
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <xTaskPriorityDisinherit+0x108>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <xTaskPriorityDisinherit+0x108>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a08      	ldr	r2, [pc, #32]	; (8003914 <xTaskPriorityDisinherit+0x104>)
 80038f2:	441a      	add	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fe fcc3 	bl	8002286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003904:	697b      	ldr	r3, [r7, #20]
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200000e4 	.word	0x200000e4
 8003914:	200000e8 	.word	0x200000e8
 8003918:	200001ec 	.word	0x200001ec

0800391c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fd04 	bl	8002340 <uxListRemove>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	2201      	movs	r2, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4013      	ands	r3, r2
 8003952:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003954:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d10a      	bne.n	8003974 <prvAddCurrentTaskToDelayedList+0x58>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	481a      	ldr	r0, [pc, #104]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800396e:	f7fe fc8a 	bl	8002286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003972:	e026      	b.n	80039c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d209      	bcs.n	80039a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe fc98 	bl	80022ce <vListInsert>
}
 800399e:	e010      	b.n	80039c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7fe fc8e 	bl	80022ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d202      	bcs.n	80039c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6013      	str	r3, [r2, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200001e8 	.word	0x200001e8
 80039d0:	200000e4 	.word	0x200000e4
 80039d4:	200001ec 	.word	0x200001ec
 80039d8:	200001d0 	.word	0x200001d0
 80039dc:	200001a0 	.word	0x200001a0
 80039e0:	2000019c 	.word	0x2000019c
 80039e4:	20000204 	.word	0x20000204

080039e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3b04      	subs	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b04      	subs	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <pxPortInitialiseStack+0x64>)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b14      	subs	r3, #20
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f06f 0202 	mvn.w	r2, #2
 8003a36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3b20      	subs	r3, #32
 8003a3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	08003a51 	.word	0x08003a51

08003a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <prvTaskExitError+0x54>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d00a      	beq.n	8003a7a <prvTaskExitError+0x2a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60fb      	str	r3, [r7, #12]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <prvTaskExitError+0x28>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60bb      	str	r3, [r7, #8]
}
 8003a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a8e:	bf00      	nop
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0fc      	beq.n	8003a90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	2000000c 	.word	0x2000000c
	...

08003ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <pxCurrentTCBConst2>)
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aba:	f380 8809 	msr	PSP, r0
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	4770      	bx	lr
 8003acc:	f3af 8000 	nop.w

08003ad0 <pxCurrentTCBConst2>:
 8003ad0:	200000e4 	.word	0x200000e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop

08003ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <prvPortStartFirstTask+0x24>)
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f380 8808 	msr	MSP, r0
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8814 	msr	CONTROL, r0
 8003aea:	b662      	cpsie	i
 8003aec:	b661      	cpsie	f
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	df00      	svc	0
 8003af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003afa:	bf00      	nop
 8003afc:	e000ed08 	.word	0xe000ed08

08003b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <xPortStartScheduler+0x120>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a46      	ldr	r2, [pc, #280]	; (8003c24 <xPortStartScheduler+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10a      	bne.n	8003b26 <xPortStartScheduler+0x26>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	613b      	str	r3, [r7, #16]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b26:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <xPortStartScheduler+0x120>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <xPortStartScheduler+0x128>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10a      	bne.n	8003b46 <xPortStartScheduler+0x46>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <xPortStartScheduler+0x12c>)
 8003b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	22ff      	movs	r2, #255	; 0xff
 8003b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <xPortStartScheduler+0x130>)
 8003b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <xPortStartScheduler+0x134>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b74:	e009      	b.n	8003b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003b76:	4b2f      	ldr	r3, [pc, #188]	; (8003c34 <xPortStartScheduler+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <xPortStartScheduler+0x134>)
 8003b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d0ef      	beq.n	8003b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <xPortStartScheduler+0x134>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1c3 0307 	rsb	r3, r3, #7
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00a      	beq.n	8003bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	60bb      	str	r3, [r7, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <xPortStartScheduler+0x134>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <xPortStartScheduler+0x134>)
 8003bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <xPortStartScheduler+0x134>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bca:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <xPortStartScheduler+0x134>)
 8003bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <xPortStartScheduler+0x138>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <xPortStartScheduler+0x138>)
 8003bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <xPortStartScheduler+0x138>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <xPortStartScheduler+0x138>)
 8003be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bee:	f000 f8dd 	bl	8003dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <xPortStartScheduler+0x13c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bf8:	f000 f8fc 	bl	8003df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <xPortStartScheduler+0x140>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <xPortStartScheduler+0x140>)
 8003c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c08:	f7ff ff66 	bl	8003ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c0c:	f7ff fbba 	bl	8003384 <vTaskSwitchContext>
	prvTaskExitError();
 8003c10:	f7ff ff1e 	bl	8003a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00
 8003c24:	410fc271 	.word	0x410fc271
 8003c28:	410fc270 	.word	0x410fc270
 8003c2c:	e000e400 	.word	0xe000e400
 8003c30:	20000210 	.word	0x20000210
 8003c34:	20000214 	.word	0x20000214
 8003c38:	e000ed20 	.word	0xe000ed20
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	e000ef34 	.word	0xe000ef34

08003c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	607b      	str	r3, [r7, #4]
}
 8003c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <vPortEnterCritical+0x58>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <vPortEnterCritical+0x58>)
 8003c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <vPortEnterCritical+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10f      	bne.n	8003c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <vPortEnterCritical+0x5c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <vPortEnterCritical+0x4a>
	}
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	e000ed04 	.word	0xe000ed04

08003ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <vPortExitCritical+0x50>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <vPortExitCritical+0x24>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	607b      	str	r3, [r7, #4]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <vPortExitCritical+0x50>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <vPortExitCritical+0x50>)
 8003cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <vPortExitCritical+0x50>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <vPortExitCritical+0x42>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f383 8811 	msr	BASEPRI, r3
}
 8003ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c
	...

08003d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d00:	f3ef 8009 	mrs	r0, PSP
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <pxCurrentTCBConst>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f01e 0f10 	tst.w	lr, #16
 8003d10:	bf08      	it	eq
 8003d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d24:	f380 8811 	msr	BASEPRI, r0
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f7ff fb28 	bl	8003384 <vTaskSwitchContext>
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	f380 8811 	msr	BASEPRI, r0
 8003d3c:	bc09      	pop	{r0, r3}
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d46:	f01e 0f10 	tst.w	lr, #16
 8003d4a:	bf08      	it	eq
 8003d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d50:	f380 8809 	msr	PSP, r0
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w

08003d60 <pxCurrentTCBConst>:
 8003d60:	200000e4 	.word	0x200000e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop

08003d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	607b      	str	r3, [r7, #4]
}
 8003d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d82:	f7ff fa47 	bl	8003214 <xTaskIncrementTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <SysTick_Handler+0x40>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f383 8811 	msr	BASEPRI, r3
}
 8003d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <vPortSetupTimerInterrupt+0x34>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <vPortSetupTimerInterrupt+0x38>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <vPortSetupTimerInterrupt+0x3c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <vPortSetupTimerInterrupt+0x40>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <vPortSetupTimerInterrupt+0x44>)
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <vPortSetupTimerInterrupt+0x34>)
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e010 	.word	0xe000e010
 8003de4:	e000e018 	.word	0xe000e018
 8003de8:	20000000 	.word	0x20000000
 8003dec:	10624dd3 	.word	0x10624dd3
 8003df0:	e000e014 	.word	0xe000e014

08003df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e04 <vPortEnableVFP+0x10>
 8003df8:	6801      	ldr	r1, [r0, #0]
 8003dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dfe:	6001      	str	r1, [r0, #0]
 8003e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e02:	bf00      	nop
 8003e04:	e000ed88 	.word	0xe000ed88

08003e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e0e:	f3ef 8305 	mrs	r3, IPSR
 8003e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d914      	bls.n	8003e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e1a:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <vPortValidateInterruptPriority+0x70>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <vPortValidateInterruptPriority+0x74>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d20a      	bcs.n	8003e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	607b      	str	r3, [r7, #4]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <vPortValidateInterruptPriority+0x78>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <vPortValidateInterruptPriority+0x7c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d90a      	bls.n	8003e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	603b      	str	r3, [r7, #0]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <vPortValidateInterruptPriority+0x60>
	}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e3f0 	.word	0xe000e3f0
 8003e7c:	20000210 	.word	0x20000210
 8003e80:	e000ed0c 	.word	0xe000ed0c
 8003e84:	20000214 	.word	0x20000214

08003e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e94:	f7ff f914 	bl	80030c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e98:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <pvPortMalloc+0x180>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ea0:	f000 f920 	bl	80040e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <pvPortMalloc+0x184>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8093 	bne.w	8003fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003eb8:	2208      	movs	r2, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d014      	beq.n	8003ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f023 0307 	bic.w	r3, r3, #7
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	617b      	str	r3, [r7, #20]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06e      	beq.n	8003fd8 <pvPortMalloc+0x150>
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <pvPortMalloc+0x188>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d869      	bhi.n	8003fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f04:	4b43      	ldr	r3, [pc, #268]	; (8004014 <pvPortMalloc+0x18c>)
 8003f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <pvPortMalloc+0x18c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f0e:	e004      	b.n	8003f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d903      	bls.n	8003f2c <pvPortMalloc+0xa4>
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f1      	bne.n	8003f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f2c:	4b36      	ldr	r3, [pc, #216]	; (8004008 <pvPortMalloc+0x180>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d050      	beq.n	8003fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	2308      	movs	r3, #8
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d91f      	bls.n	8003f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <pvPortMalloc+0xf8>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	613b      	str	r3, [r7, #16]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f92:	69b8      	ldr	r0, [r7, #24]
 8003f94:	f000 f908 	bl	80041a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <pvPortMalloc+0x188>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <pvPortMalloc+0x188>)
 8003fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <pvPortMalloc+0x188>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <pvPortMalloc+0x190>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d203      	bcs.n	8003fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <pvPortMalloc+0x188>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	; (8004018 <pvPortMalloc+0x190>)
 8003fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <pvPortMalloc+0x184>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <pvPortMalloc+0x194>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a11      	ldr	r2, [pc, #68]	; (800401c <pvPortMalloc+0x194>)
 8003fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fd8:	f7ff f880 	bl	80030dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <pvPortMalloc+0x174>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60fb      	str	r3, [r7, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <pvPortMalloc+0x172>
	return pvReturn;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3728      	adds	r7, #40	; 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20001220 	.word	0x20001220
 800400c:	20001234 	.word	0x20001234
 8004010:	20001224 	.word	0x20001224
 8004014:	20001218 	.word	0x20001218
 8004018:	20001228 	.word	0x20001228
 800401c:	2000122c 	.word	0x2000122c

08004020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04d      	beq.n	80040ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004032:	2308      	movs	r3, #8
 8004034:	425b      	negs	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <vPortFree+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <vPortFree+0x44>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <vPortFree+0x62>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <vPortFree+0xb8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01e      	beq.n	80040ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11a      	bne.n	80040ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <vPortFree+0xb8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040a8:	f7ff f80a 	bl	80030c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <vPortFree+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <vPortFree+0xbc>)
 80040b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ba:	6938      	ldr	r0, [r7, #16]
 80040bc:	f000 f874 	bl	80041a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <vPortFree+0xc0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <vPortFree+0xc0>)
 80040c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040ca:	f7ff f807 	bl	80030dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20001234 	.word	0x20001234
 80040dc:	20001224 	.word	0x20001224
 80040e0:	20001230 	.word	0x20001230

080040e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <prvHeapInit+0xac>)
 80040f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <prvHeapInit+0xac>)
 8004114:	4413      	add	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <prvHeapInit+0xb0>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <prvHeapInit+0xb0>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004130:	2208      	movs	r2, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvHeapInit+0xb4>)
 8004144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <prvHeapInit+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <prvHeapInit+0xb4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <prvHeapInit+0xb4>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <prvHeapInit+0xb8>)
 8004172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <prvHeapInit+0xbc>)
 800417a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvHeapInit+0xc0>)
 800417e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000218 	.word	0x20000218
 8004194:	20001218 	.word	0x20001218
 8004198:	20001220 	.word	0x20001220
 800419c:	20001228 	.word	0x20001228
 80041a0:	20001224 	.word	0x20001224
 80041a4:	20001234 	.word	0x20001234

080041a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <prvInsertBlockIntoFreeList+0xac>)
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e002      	b.n	80041bc <prvInsertBlockIntoFreeList+0x14>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d8f7      	bhi.n	80041b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d108      	bne.n	80041ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	441a      	add	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d118      	bne.n	8004230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d00d      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e003      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d002      	beq.n	8004246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20001218 	.word	0x20001218
 8004258:	20001220 	.word	0x20001220

0800425c <memset>:
 800425c:	4402      	add	r2, r0
 800425e:	4603      	mov	r3, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <_reclaim_reent>:
 800426c:	4b29      	ldr	r3, [pc, #164]	; (8004314 <_reclaim_reent+0xa8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4283      	cmp	r3, r0
 8004272:	b570      	push	{r4, r5, r6, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	d04b      	beq.n	8004310 <_reclaim_reent+0xa4>
 8004278:	69c3      	ldr	r3, [r0, #28]
 800427a:	b143      	cbz	r3, 800428e <_reclaim_reent+0x22>
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d144      	bne.n	800430c <_reclaim_reent+0xa0>
 8004282:	69e3      	ldr	r3, [r4, #28]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	b111      	cbz	r1, 800428e <_reclaim_reent+0x22>
 8004288:	4620      	mov	r0, r4
 800428a:	f000 f879 	bl	8004380 <_free_r>
 800428e:	6961      	ldr	r1, [r4, #20]
 8004290:	b111      	cbz	r1, 8004298 <_reclaim_reent+0x2c>
 8004292:	4620      	mov	r0, r4
 8004294:	f000 f874 	bl	8004380 <_free_r>
 8004298:	69e1      	ldr	r1, [r4, #28]
 800429a:	b111      	cbz	r1, 80042a2 <_reclaim_reent+0x36>
 800429c:	4620      	mov	r0, r4
 800429e:	f000 f86f 	bl	8004380 <_free_r>
 80042a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042a4:	b111      	cbz	r1, 80042ac <_reclaim_reent+0x40>
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 f86a 	bl	8004380 <_free_r>
 80042ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ae:	b111      	cbz	r1, 80042b6 <_reclaim_reent+0x4a>
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 f865 	bl	8004380 <_free_r>
 80042b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042b8:	b111      	cbz	r1, 80042c0 <_reclaim_reent+0x54>
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 f860 	bl	8004380 <_free_r>
 80042c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80042c2:	b111      	cbz	r1, 80042ca <_reclaim_reent+0x5e>
 80042c4:	4620      	mov	r0, r4
 80042c6:	f000 f85b 	bl	8004380 <_free_r>
 80042ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042cc:	b111      	cbz	r1, 80042d4 <_reclaim_reent+0x68>
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 f856 	bl	8004380 <_free_r>
 80042d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042d6:	b111      	cbz	r1, 80042de <_reclaim_reent+0x72>
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 f851 	bl	8004380 <_free_r>
 80042de:	6a23      	ldr	r3, [r4, #32]
 80042e0:	b1b3      	cbz	r3, 8004310 <_reclaim_reent+0xa4>
 80042e2:	4620      	mov	r0, r4
 80042e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042e8:	4718      	bx	r3
 80042ea:	5949      	ldr	r1, [r1, r5]
 80042ec:	b941      	cbnz	r1, 8004300 <_reclaim_reent+0x94>
 80042ee:	3504      	adds	r5, #4
 80042f0:	69e3      	ldr	r3, [r4, #28]
 80042f2:	2d80      	cmp	r5, #128	; 0x80
 80042f4:	68d9      	ldr	r1, [r3, #12]
 80042f6:	d1f8      	bne.n	80042ea <_reclaim_reent+0x7e>
 80042f8:	4620      	mov	r0, r4
 80042fa:	f000 f841 	bl	8004380 <_free_r>
 80042fe:	e7c0      	b.n	8004282 <_reclaim_reent+0x16>
 8004300:	680e      	ldr	r6, [r1, #0]
 8004302:	4620      	mov	r0, r4
 8004304:	f000 f83c 	bl	8004380 <_free_r>
 8004308:	4631      	mov	r1, r6
 800430a:	e7ef      	b.n	80042ec <_reclaim_reent+0x80>
 800430c:	2500      	movs	r5, #0
 800430e:	e7ef      	b.n	80042f0 <_reclaim_reent+0x84>
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	bf00      	nop
 8004314:	2000005c 	.word	0x2000005c

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	4d0d      	ldr	r5, [pc, #52]	; (8004350 <__libc_init_array+0x38>)
 800431c:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 800431e:	1b64      	subs	r4, r4, r5
 8004320:	10a4      	asrs	r4, r4, #2
 8004322:	2600      	movs	r6, #0
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	4d0b      	ldr	r5, [pc, #44]	; (8004358 <__libc_init_array+0x40>)
 800432a:	4c0c      	ldr	r4, [pc, #48]	; (800435c <__libc_init_array+0x44>)
 800432c:	f000 f880 	bl	8004430 <_init>
 8004330:	1b64      	subs	r4, r4, r5
 8004332:	10a4      	asrs	r4, r4, #2
 8004334:	2600      	movs	r6, #0
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	080044f0 	.word	0x080044f0
 8004354:	080044f0 	.word	0x080044f0
 8004358:	080044f0 	.word	0x080044f0
 800435c:	080044f4 	.word	0x080044f4

08004360 <__retarget_lock_acquire_recursive>:
 8004360:	4770      	bx	lr

08004362 <__retarget_lock_release_recursive>:
 8004362:	4770      	bx	lr

08004364 <memcpy>:
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	f100 33ff 	add.w	r3, r0, #4294967295
 800436c:	d100      	bne.n	8004370 <memcpy+0xc>
 800436e:	4770      	bx	lr
 8004370:	b510      	push	{r4, lr}
 8004372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437a:	4291      	cmp	r1, r2
 800437c:	d1f9      	bne.n	8004372 <memcpy+0xe>
 800437e:	bd10      	pop	{r4, pc}

08004380 <_free_r>:
 8004380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004382:	2900      	cmp	r1, #0
 8004384:	d044      	beq.n	8004410 <_free_r+0x90>
 8004386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800438a:	9001      	str	r0, [sp, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f1a1 0404 	sub.w	r4, r1, #4
 8004392:	bfb8      	it	lt
 8004394:	18e4      	addlt	r4, r4, r3
 8004396:	f000 f83f 	bl	8004418 <__malloc_lock>
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <_free_r+0x94>)
 800439c:	9801      	ldr	r0, [sp, #4]
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	b933      	cbnz	r3, 80043b0 <_free_r+0x30>
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	6014      	str	r4, [r2, #0]
 80043a6:	b003      	add	sp, #12
 80043a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043ac:	f000 b83a 	b.w	8004424 <__malloc_unlock>
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d908      	bls.n	80043c6 <_free_r+0x46>
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	1961      	adds	r1, r4, r5
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf01      	itttt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	1949      	addeq	r1, r1, r5
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	e7ed      	b.n	80043a2 <_free_r+0x22>
 80043c6:	461a      	mov	r2, r3
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b10b      	cbz	r3, 80043d0 <_free_r+0x50>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d9fa      	bls.n	80043c6 <_free_r+0x46>
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	1855      	adds	r5, r2, r1
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d10b      	bne.n	80043f0 <_free_r+0x70>
 80043d8:	6824      	ldr	r4, [r4, #0]
 80043da:	4421      	add	r1, r4
 80043dc:	1854      	adds	r4, r2, r1
 80043de:	42a3      	cmp	r3, r4
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	d1e0      	bne.n	80043a6 <_free_r+0x26>
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	6053      	str	r3, [r2, #4]
 80043ea:	440c      	add	r4, r1
 80043ec:	6014      	str	r4, [r2, #0]
 80043ee:	e7da      	b.n	80043a6 <_free_r+0x26>
 80043f0:	d902      	bls.n	80043f8 <_free_r+0x78>
 80043f2:	230c      	movs	r3, #12
 80043f4:	6003      	str	r3, [r0, #0]
 80043f6:	e7d6      	b.n	80043a6 <_free_r+0x26>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf04      	itt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	bf04      	itt	eq
 8004408:	1949      	addeq	r1, r1, r5
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6054      	str	r4, [r2, #4]
 800440e:	e7ca      	b.n	80043a6 <_free_r+0x26>
 8004410:	b003      	add	sp, #12
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	20001374 	.word	0x20001374

08004418 <__malloc_lock>:
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <__malloc_lock+0x8>)
 800441a:	f7ff bfa1 	b.w	8004360 <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	20001370 	.word	0x20001370

08004424 <__malloc_unlock>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__malloc_unlock+0x8>)
 8004426:	f7ff bf9c 	b.w	8004362 <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	20001370 	.word	0x20001370

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
